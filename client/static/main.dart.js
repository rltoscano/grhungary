// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.JSInvocationMirror = {"": "Object;memberName>,_internalName,_kind,_liblib4$_arguments,_namedArgumentNames,_namedIndices",
  get$isMethod: function() {
    return $.eq(this._kind, 0);
  },
  get$isGetter: function() {
    return $.eq(this._kind, 1);
  },
  get$isSetter: function() {
    return $.eq(this._kind, 2);
  },
  get$isAccessor: function() {
    return !$.eqB(this._kind, 0);
  },
  get$positionalArguments: function() {
    var list, t1, t3, t4, argumentCount, index;
    if (this.get$isGetter() === true)
      return;
    list = [];
    t1 = this._liblib4$_arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.get$positionalArguments$bailout(1, t1, list);
    t3 = t1.length;
    t4 = this._namedArgumentNames;
    t4 = $.getInterceptor$JSStringJSArray(t4).get$length(t4);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    argumentCount = t3 - t4;
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return list;
  },
  get$positionalArguments$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        list = env1;
        t1 = env0;
        break;
      case 2:
        t3 = env3;
        argumentCount = env2;
        list = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (this.get$isGetter() === true)
          return;
        list = [];
        t1 = this._liblib4$_arguments;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        t4 = t3.get$length(t1);
        t5 = this._namedArgumentNames;
        t5 = $.getInterceptor$JSStringJSArray(t5).get$length(t5);
        argumentCount = $.getInterceptor$JSNumber(t4).operator$sub$1(t4, t5);
      case 2:
        var list, t1, t3, t4, t5, argumentCount, index;
        state0 = 0;
        for (index = 0; $.ltB(index, argumentCount); ++index)
          list.push(t3.operator$index$1(t1, index));
        return list;
    }
  },
  get$namedArguments: function() {
    var map, t2, t4, namedArgumentCount, t5, t7, namedArgumentsStartIndex, t1, i, t3;
    if (this.get$isAccessor() === true)
      return;
    map = $.makeLiteralMap([]);
    if (typeof map !== "object" || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
      return this.get$namedArguments$bailout(1, map);
    t2 = this._namedArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.get$namedArguments$bailout(2, t2, map);
    t4 = $.getInterceptor$JSStringJSArray(t2);
    namedArgumentCount = t2.length;
    t5 = this._liblib4$_arguments;
    if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
      return this.get$namedArguments$bailout(4, t2, t5, map, t4, namedArgumentCount);
    t7 = t5.length;
    namedArgumentsStartIndex = t7 - namedArgumentCount;
    for (t1 = map.length, i = 0; i < namedArgumentCount; ++i) {
      t3 = t2[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t7)
        throw $.ioore(t4);
      t4 = t5[t4];
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1)
        throw $.ioore(t3);
      map[t3] = t4;
    }
    return map;
  },
  get$namedArguments$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
    switch (state0) {
      case 1:
        map = env0;
        break;
      case 2:
        map = env1;
        t2 = env0;
        break;
      case 3:
        namedArgumentCount = env3;
        t4 = env2;
        map = env1;
        t2 = env0;
        break;
      case 4:
        namedArgumentCount = env4;
        t4 = env3;
        map = env2;
        t6 = env1;
        t2 = env0;
        break;
      case 5:
        namedArgumentCount = env6;
        t4 = env5;
        map = env4;
        namedArgumentsStartIndex = env3;
        t6 = env2;
        t2 = env1;
        t8 = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (this.get$isAccessor() === true)
          return;
        map = $.makeLiteralMap([]);
      case 1:
        state0 = 0;
        t2 = this._namedArgumentNames;
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSStringJSArray(t2);
        namedArgumentCount = t4.get$length(t2);
      case 3:
        state0 = 0;
        t6 = this._liblib4$_arguments;
      case 4:
        state0 = 0;
        t8 = $.getInterceptor$JSStringJSArray(t6);
        t9 = t8.get$length(t6);
        namedArgumentsStartIndex = $.getInterceptor$JSNumber(t9).operator$sub$1(t9, namedArgumentCount);
      case 5:
        var map, t2, t4, namedArgumentCount, t6, t8, t9, namedArgumentsStartIndex, t1, t3, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSNumber(namedArgumentsStartIndex), t3 = $.getInterceptor$JSArray(map), i = 0; $.ltB(i, namedArgumentCount); ++i)
          t3.operator$indexSet$2(map, t4.operator$index$1(t2, i), t8.operator$index$1(t6, t1.operator$add$1(namedArgumentsStartIndex, i)));
        return map;
    }
  }
};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.getInterceptor(dartException).toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;actualType,expectedType",
  toString$0: function() {
    return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_keys>",
  containsKey$1: function(key) {
    if ($.eqB(key, "__proto__"))
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  operator$index$1: function(key) {
    if (this.containsKey$1(key) !== true)
      return;
    return this._jsObject[key];
  },
  forEach$1: function(f) {
    var t1, t2;
    t1 = this._keys;
    t2 = new $.ConstantMap_forEach_anon(this, f);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function() {
    return $.MappedIterable$(this._keys, new $.ConstantMap_values_anon(this));
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  operator$indexSet$2: function(key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(key) {
    return this._throwUnmodifiable$0();
  },
  clear$0: function() {
    return this._throwUnmodifiable$0();
  },
  is$Map: function() {
    return true;
  }
};

$$._ConstantMapKeyIterable = {"": "Iterable;_liblib4$_map",
  get$iterator: function() {
    var t1 = this._liblib4$_map._keys;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib4$_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1, matchEnd;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.getInterceptor$JSStringJSArray(m).operator$index$1(m, 0);
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    matchEnd = matchStart + t1;
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib4$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  is$JSSyntaxRegExp: true,
  is$RegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  group$1: function(index) {
    var t1 = this._groups;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$index$1: function(index) {
    var t1 = this._groups;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib4$_current",
  get$current: function() {
    return this._liblib4$_current;
  },
  moveNext$0: function() {
    this._liblib4$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib4$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  operator$index$1: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if (!$.eqB(group_, 0))
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(elements) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(elements).get$iterator(elements); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  is$Collection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.ltB(t1.i_1, t2.length); t3 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1)) {
      if ($.gtB(t1.i_1, 0)) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t5 = $.Error_safeToString(t2[t4]);
      $.getInterceptor$JSArray(t3).add$1(t3, t5);
    }
    t2 = this._namedArguments;
    if (!(t2 == null)) {
      t3 = new $.NoSuchMethodError_toString_anon(t1);
      $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
    }
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = $.getInterceptor(t3).toString$0(t3);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t4 = t2[i];
      $.getInterceptor$JSArray(t3).add$1(t3, t4);
    }
    t1 = t1.sb_0;
    formalParameters = $.getInterceptor(t1).toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t2 = env1;
        t1 = env0;
        break;
      case 2:
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.ltB(t1.i_1, t3.get$length(t2)); t4 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, 1)) {
            if ($.gtB(t1.i_1, 0)) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = $.Error_safeToString(t3.operator$index$1(t2, t1.i_1));
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
        t2 = this._namedArguments;
        if (!(t2 == null)) {
          t3 = new $.NoSuchMethodError_toString_anon(t1);
          $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
        }
        t2 = this._existingArgumentNames;
      case 2:
        var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = $.getInterceptor(t3).toString$0(t3);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.ltB(i, t3.get$length(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = t3.operator$index$1(t2, i);
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
          t1 = t1.sb_0;
          formalParameters = $.getInterceptor(t1).toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  is$Exception: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  is$Exception: true
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  },
  is$Exception: true
};

$$.Iterable = {"": "Object;",
  mappedBy$1: function(f) {
    return $.MappedIterable$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  contains$1: function(element) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if ($.eqB(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    var iterator, buffer, t1, t2;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, t2;
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator == null || $.eqB(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  any$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$length: function() {
    var it, count;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.getInterceptor$JSArray(this).get$iterator(this).moveNext$0() !== true;
  },
  get$last: function() {
    var it, result;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  }
};

$$.Iterator = {"": "Object;"};

$$._HashMapImpl = {"": "Object;_liblib0$_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & this._liblib0$_keys.length - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._liblib0$_keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.eqB(existingKey, key))
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._liblib0$_keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, hash, key, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        key = env0;
        break;
      case 2:
        insertionIndex = env3;
        numberOfProbes0 = env2;
        key = env1;
        hash = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.getInterceptor(key).get$hashCode(key);
      case 1:
        state0 = 0;
        t3 = this._liblib0$_keys.length - 1;
        hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t3);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var t1, key, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._liblib0$_keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.eqB(existingKey, key))
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._liblib0$_keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    t2 = this._liblib0$_keys.length - 1;
    hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._liblib0$_keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._liblib0$_keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._liblib0$_keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._liblib0$_keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var t1, newNumberOfEntries, capacity, numberOfFreeOrDeleted;
    t1 = this._numberOfEntries;
    newNumberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    if ($.geB(newNumberOfEntries, this._loadLimit)) {
      this._grow$1(this._liblib0$_keys.length * 2);
      return;
    }
    capacity = this._liblib0$_keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    numberOfFreeOrDeleted = capacity - newNumberOfEntries;
    t1 = this._numberOfDeleted;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (t1 > numberOfFreeOrDeleted - t1)
      this._grow$1(this._liblib0$_keys.length);
  },
  _grow$1: function(newCapacity) {
    var capacity, t1, oldKeys, oldValues, i, key, value, newIndex;
    capacity = this._liblib0$_keys.length;
    t1 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
    this._loadLimit = $.getInterceptor$JSNumber(t1).operator$tdiv$1(t1, 4);
    oldKeys = this._liblib0$_keys;
    oldValues = this._values;
    this._liblib0$_keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT4)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._liblib0$_keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, length$, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._liblib0$_keys;
    length$ = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  operator$indexSet$2: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._liblib0$_keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT4) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.operator$indexSet$2$bailout1(1, key, value, index, t1);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._liblib0$_keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  operator$indexSet$2$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env3;
        index = env2;
        value = env1;
        key = env0;
        break;
    }
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._liblib0$_keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        var index, t1, value, key;
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT4))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
          }
        t1 = this._liblib0$_keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  operator$index$1: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.operator$index$1$bailout4(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout4: function(state0, index) {
    var t1;
    if ($.ltB(index, 0))
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, t3, value;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.remove$1$bailout2(1, index);
    if (index >= 0) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.remove$1$bailout2(2, index, t1);
      this._numberOfEntries = t1 - 1;
      t3 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t3.length)
        throw $.ioore(index);
      value = t3[index];
      t3[index] = null;
      t3 = this._liblib0$_keys;
      if (index >= t3.length)
        throw $.ioore(index);
      t3[index] = $.CONSTANT4;
      t3 = this._numberOfDeleted;
      if (typeof t3 !== "number")
        return this.remove$1$bailout2(3, t3, value);
      this._numberOfDeleted = t3 + 1;
      return value;
    }
    return;
  },
  remove$1$bailout2: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        index = env0;
        break;
      case 2:
        t1 = env1;
        index = env0;
        break;
      case 3:
        value = env1;
        t3 = env0;
        break;
    }
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
      default:
        var index, t1, t3, value;
        if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(index, 0))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 2:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1);
              t3 = this._values;
              if (index !== (index | 0))
                throw $.iae(index);
              if (index < 0 || index >= t3.length)
                throw $.ioore(index);
              value = t3[index];
              t3[index] = null;
              t3 = this._liblib0$_keys;
              if (index >= t3.length)
                throw $.ioore(index);
              t3[index] = $.CONSTANT4;
              t3 = this._numberOfDeleted;
            case 3:
              state0 = 0;
              this._numberOfDeleted = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
              return value;
          }
        return;
    }
  },
  get$isEmpty: function() {
    return $.eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._liblib0$_keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this);
  },
  containsKey$1: function(key) {
    return !$.eqB(this._probeForLookup$1(key), -1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._liblib0$_keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  is$Map: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length$, t3, newIndex, key;
    t1 = this._map;
    t2 = t1.get$_liblib0$_keys();
    length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    if (typeof length$ !== "number")
      return this.moveNext$0$bailout2(1, length$, t1);
    t3 = this._liblib0$_index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout2(2, length$, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_liblib0$_keys(); newIndex < length$;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout2(3, length$, t2, newIndex, t1);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT4)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._liblib0$_index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._liblib0$_index = length$;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        length$ = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        length$ = env0;
        break;
      case 3:
        t1 = env3;
        newIndex = env2;
        t2 = env1;
        length$ = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._map;
        t2 = t1.get$_liblib0$_keys();
        length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
      case 1:
        state0 = 0;
        t3 = this._liblib0$_index;
      case 2:
        state0 = 0;
        newIndex = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
      case 3:
        var t1, t2, length$, t3, newIndex, key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.ltB(newIndex, length$))
                  break L0;
                t2 = t1.get$_liblib0$_keys();
              case 3:
                state0 = 0;
                key = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, newIndex);
                if (!(key == null) && !(key === $.CONSTANT4)) {
                  this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_liblib0$_keys(), t1.get$_values());
                  this._liblib0$_index = newIndex;
                  return true;
                }
                newIndex = $.getInterceptor$JSNumber(newIndex).operator$add$1(newIndex, 1);
            }
        this._liblib0$_index = length$;
        this._liblib0$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_liblib0$_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(keys).operator$index$1(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_liblib0$_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(values).operator$index$1(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_liblib0$_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib0$_list,_map",
  operator$indexSet$2: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.operator$indexSet$2$bailout0(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._liblib0$_list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
        return this.operator$indexSet$2$bailout0(2, t1, key);
      t3 = this._liblib0$_list.lastEntry$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  operator$indexSet$2$bailout0: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        key = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var t1, value, key, t3;
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._liblib0$_list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              t3 = this._liblib0$_list.lastEntry$0();
              $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, key, t3);
          }
    }
  },
  operator$index$1: function(key) {
    var t1, entry;
    t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout3(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    entry = t1[key];
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  operator$index$1$bailout3: function(state0, key, t1) {
    var entry = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var t1, entry;
    t1 = this._map;
    entry = $.getInterceptor$JSArray(t1).remove$1(t1, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    return $.MappedIterable$(this._liblib0$_list, new $._LinkedHashMapImpl_keys_anon());
  },
  get$values: function() {
    return $.MappedIterable$(this._liblib0$_list, new $._LinkedHashMapImpl_values_anon());
  },
  forEach$1: function(f) {
    this._liblib0$_list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    var t1 = this._map;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  clear$0: function() {
    var t1 = this._map;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    this._liblib0$_list.clear$0();
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._liblib0$_list = $.DoubleLinkedQueue$();
  },
  is$Map: function() {
    return true;
  }
};

$$.Object = {"": ";",
  operator$eq$1: function(other) {
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  noSuchMethod$1: function(invocation) {
    throw $.$$throw($.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  _onValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onValue", "_onValue$1", 0, [$0], []));
  },
  floor$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("floor", "floor$0", 0, [], []));
  },
  _postMessage_2$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1", 0, [$0], []));
  },
  allMatches$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
  },
  _onWindowResize$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onWindowResize", "_onWindowResize$1", 0, [$0], []));
  },
  fail$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("fail", "fail$3", 0, [$0, $1, $2], []));
  },
  setTimeout$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("setTimeout", "setTimeout$2", 0, [$0, $1], []));
  },
  $$dom_addEventListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
  },
  operator$xor$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("^", "operator$xor$1", 0, [$0], []));
  },
  moveNext$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("moveNext", "moveNext$0", 0, [], []));
  },
  _probeForAdding$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1", 0, [$0], []));
  },
  _deserializeMap$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1", 0, [$0], []));
  },
  _liblib6$_deserializeMap$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_liblib6$_deserializeMap$1", 0, [$0], []));
  },
  operator$sub$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("-", "operator$sub$1", 0, [$0], []));
  },
  _navPrev$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_navPrev", "_navPrev$0", 0, [], []));
  },
  concat$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("concat", "concat$1", 0, [$0], []));
  },
  where$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("where", "where$1", 0, [$0], []));
  },
  _add_1$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2", 0, [$0, $1], []));
  },
  _modify$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_modify", "_modify$1", 0, [$0], []));
  },
  _test$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_test", "_test$1", 0, [$0], []));
  },
  startsWith$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
  },
  remove$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  remove$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1", 0, [$0], []));
  },
  getRange$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("getRange", "getRange$2", 0, [$0, $1], []));
  },
  callSync$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
  },
  handleNumber$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("handleNumber", "handleNumber$1", 0, [$0], []));
  },
  toLowerCase$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  _setLightBoxVisible$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setLightBoxVisible", "_setLightBoxVisible$1", 0, [$0], []));
  },
  operator$le$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("<=", "operator$le$1", 0, [$0], []));
  },
  _get_1$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_get_1", "_get_1$1", 0, [$0], []));
  },
  contains$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1", 0, [$0], []));
  },
  contains$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
  },
  unregister$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
  },
  _addListener$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_addListener", "_addListener$1", 0, [$0], []));
  },
  add$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  add$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("add", "add$2", 0, [$0, $1], []));
  },
  operator$mul$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("*", "operator$mul$1", 0, [$0], []));
  },
  toDouble$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toDouble", "toDouble$0", 0, [], []));
  },
  _loadProxImages$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_loadProxImages", "_loadProxImages$0", 0, [], []));
  },
  addAll$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  _navigateToHash$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_navigateToHash", "_navigateToHash$1", 0, [$0], []));
  },
  stringifyValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
  },
  queryAll$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("queryAll", "queryAll$1", 0, [$0], []));
  },
  get$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("get", "get$1", 0, [$0], []));
  },
  _sendError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_sendError", "_sendError$1", 0, [$0], []));
  },
  register$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
  },
  _initializeAllEventListeners$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_initializeAllEventListeners", "_initializeAllEventListeners$0", 0, [], []));
  },
  _setSendButtonState$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setSendButtonState", "_setSendButtonState$1", 0, [$0], []));
  },
  _computeCurrentFromIndex$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("_computeCurrentFromIndex", "_computeCurrentFromIndex$3", 0, [$0, $1, $2], []));
  },
  complete$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1", 0, [$0], []));
  },
  _createLightBoxImage$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_createLightBoxImage", "_createLightBoxImage$1", 0, [$0], []));
  },
  _throwUnmodifiable$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_throwUnmodifiable", "_throwUnmodifiable$0", 0, [], []));
  },
  completeError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("completeError", "completeError$1", 0, [$0], []));
  },
  completeError$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("completeError", "completeError$2", 0, [$0, $1], []));
  },
  toSendPort$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
  },
  enterScope$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("enterScope", "enterScope$0", 0, [], []));
  },
  $$dom_dispatchEvent$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_dispatchEvent", "$$dom_dispatchEvent$1", 0, [$0], []));
  },
  $$dom_setAttribute$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_setAttribute", "$$dom_setAttribute$2", 0, [$0, $1], []));
  },
  _chain$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_chain", "_chain$1", 0, [$0], []));
  },
  _getPropertyValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1", 0, [$0], []));
  },
  _showMessage$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_showMessage", "_showMessage$2", 0, [$0, $1], []));
  },
  _determineKeyCodeForKeypress$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_determineKeyCodeForKeypress", "_determineKeyCodeForKeypress$1", 0, [$0], []));
  },
  _onRsvpUpsertFail$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onRsvpUpsertFail", "_onRsvpUpsertFail$1", 0, [$0], []));
  },
  operator$mod$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("%", "operator$mod$1", 0, [$0], []));
  },
  _writeOn$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_writeOn", "_writeOn$1", 0, [$0], []));
  },
  postMessage$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
  },
  then$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("then", "then$1", 0, [$0], []));
  },
  indexOf$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
  },
  indexOf$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
  },
  operator$tdiv$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("~/", "operator$tdiv$1", 0, [$0], []));
  },
  operator$indexSet$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("[]=", "operator$indexSet$2", 0, [$0, $1], []));
  },
  _link$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2", 0, [$0, $1], []));
  },
  removeAt$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("removeAt", "removeAt$1", 0, [$0], []));
  },
  operator$shl$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("<<", "operator$shl$1", 0, [$0], []));
  },
  operator$lt$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("<", "operator$lt$1", 0, [$0], []));
  },
  runIteration$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
  },
  maybeCloseWorker$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("maybeCloseWorker", "maybeCloseWorker$0", 0, [], []));
  },
  _KeyboardEventController$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_KeyboardEventController", "_KeyboardEventController$2", 0, [$0, $1], []));
  },
  operator$and$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("&", "operator$and$1", 0, [$0], []));
  },
  handleString$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("handleString", "handleString$1", 0, [$0], []));
  },
  send$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("send", "send$1", 0, [$0], []));
  },
  send$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  call$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$0", 0, [], []));
  },
  call$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$1", 0, [$0], []));
  },
  call$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
  },
  call$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
  },
  call$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$2$test: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$2$test", 0, [$0, $1], ["test"]));
  },
  $$dom_removeChild$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1", 0, [$0], []));
  },
  toInt$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toInt", "toInt$0", 0, [], []));
  },
  toJson$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toJson", "toJson$0", 0, [], []));
  },
  operator$index$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("[]", "operator$index$1", 0, [$0], []));
  },
  replaceWith$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  registerPort$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("registerPort", "registerPort$2", 0, [$0, $1], []));
  },
  operator$div$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("/", "operator$div$1", 0, [$0], []));
  },
  _firesKeyPressEvent$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_firesKeyPressEvent", "_firesKeyPressEvent$1", 0, [$0], []));
  },
  _handleError$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_handleError", "_handleError$2", 0, [$0, $1], []));
  },
  _setGlobals$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
  },
  _setOrChainValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setOrChainValue", "_setOrChainValue$1", 0, [$0], []));
  },
  operator$ge$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror(">=", "operator$ge$1", 0, [$0], []));
  },
  _probeForLookup$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1", 0, [$0], []));
  },
  trim$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("trim", "trim$0", 0, [], []));
  },
  handleNull$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("handleNull", "handleNull$0", 0, [], []));
  },
  replaceAll$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
  },
  _sendValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_sendValue", "_sendValue$1", 0, [$0], []));
  },
  open$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("open", "open$2", 0, [$0, $1], []));
  },
  _deleteImg$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deleteImg", "_deleteImg$1", 0, [$0], []));
  },
  beginObject$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("beginObject", "beginObject$0", 0, [], []));
  },
  _nativeDetectEnvironment$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0", 0, [], []));
  },
  endArray$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("endArray", "endArray$0", 0, [], []));
  },
  _f$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_f", "_f$1", 0, [$0], []));
  },
  firstMatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
  },
  _setLeftPosition$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setLeftPosition", "_setLeftPosition$1", 0, [$0], []));
  },
  truncate$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("truncate", "truncate$0", 0, [], []));
  },
  mappedBy$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("mappedBy", "mappedBy$1", 0, [$0], []));
  },
  lookup$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
  },
  _handleValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_handleValue", "_handleValue$1", 0, [$0], []));
  },
  _asListener$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_asListener", "_asListener$0", 0, [], []));
  },
  _clearCache$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_clearCache", "_clearCache$0", 0, [], []));
  },
  $$dom_removeEventListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
  },
  cleanup$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
  },
  split$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("split", "split$1", 0, [$0], []));
  },
  _clearUnhandledError$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_clearUnhandledError", "_clearUnhandledError$0", 0, [], []));
  },
  push$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("push", "push$1", 0, [$0], []));
  },
  nextEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nextEntry", "nextEntry$0", 0, [], []));
  },
  $$dom_removeAttribute$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_removeAttribute", "$$dom_removeAttribute$1", 0, [$0], []));
  },
  hasMatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("hasMatch", "hasMatch$1", 0, [$0], []));
  },
  $$dom_createEvent$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_createEvent", "$$dom_createEvent$1", 0, [$0], []));
  },
  scrollTo$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("scrollTo", "scrollTo$2", 0, [$0, $1], []));
  },
  previousEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0", 0, [], []));
  },
  $$dom_getAttribute$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_getAttribute", "$$dom_getAttribute$1", 0, [$0], []));
  },
  run$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("run", "run$0", 0, [], []));
  },
  _removeListeners$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_removeListeners", "_removeListeners$0", 0, [], []));
  },
  close$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("close", "close$0", 0, [], []));
  },
  substring$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  _dispatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
  },
  _liblib6$_dispatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_liblib6$_dispatch$1", 0, [$0], []));
  },
  _onError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onError", "_onError$1", 0, [$0], []));
  },
  operator$shr$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror(">>", "operator$shr$1", 0, [$0], []));
  },
  query$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("query", "query$1", 0, [$0], []));
  },
  toList$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  charCodeAt$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1", 0, [$0], []));
  },
  $$dom_replaceChild$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
  },
  clear$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0", 0, [], []));
  },
  prepend$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1", 0, [$0], []));
  },
  addLast$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1", 0, [$0], []));
  },
  _setError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setError", "_setError$1", 0, [$0], []));
  },
  _postMessage_1$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2", 0, [$0, $1], []));
  },
  operator$or$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("|", "operator$or$1", 0, [$0], []));
  },
  forEach$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  _deserializeHelper$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1", 0, [$0], []));
  },
  _liblib6$_deserializeHelper$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_liblib6$_deserializeHelper$1", 0, [$0], []));
  },
  join$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("join", "join$1", 0, [$0], []));
  },
  $$dom_initCustomEvent$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_initCustomEvent", "$$dom_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
  },
  _normalizeKeyCodes$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_normalizeKeyCodes", "_normalizeKeyCodes$1", 0, [$0], []));
  },
  propertyValue$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("propertyValue", "propertyValue$0", 0, [], []));
  },
  _deserializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1", 0, [$0], []));
  },
  _liblib6$_deserializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_liblib6$_deserializeList$1", 0, [$0], []));
  },
  endsWith$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
  },
  _asNonSentinelEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0", 0, [], []));
  },
  beginArray$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("beginArray", "beginArray$0", 0, [], []));
  },
  removeFirst$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0", 0, [], []));
  },
  group$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("group", "group$1", 0, [$0], []));
  },
  _grow$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1", 0, [$0], []));
  },
  _serializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1", 0, [$0], []));
  },
  _liblib6$_serializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_liblib6$_serializeList$1", 0, [$0], []));
  },
  any$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("any", "any$1", 0, [$0], []));
  },
  handleBool$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("handleBool", "handleBool$1", 0, [$0], []));
  },
  operator$add$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("+", "operator$add$1", 0, [$0], []));
  },
  _navNext$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_navNext", "_navNext$0", 0, [], []));
  },
  _nativeInitWorkerMessageHandler$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0", 0, [], []));
  },
  _add_2$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1", 0, [$0], []));
  },
  _showPage$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_showPage", "_showPage$1", 0, [$0], []));
  },
  propertyName$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("propertyName", "propertyName$0", 0, [], []));
  },
  containsKey$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
  },
  _setValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setValue", "_setValue$1", 0, [$0], []));
  },
  _ensureCapacity$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0", 0, [], []));
  },
  removeRange$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("removeRange", "removeRange$2", 0, [$0, $1], []));
  },
  _runHelper$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0", 0, [], []));
  },
  _findCharCodeKeyDown$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_findCharCodeKeyDown", "_findCharCodeKeyDown$1", 0, [$0], []));
  },
  exitScope$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("exitScope", "exitScope$0", 0, [], []));
  },
  operator$gt$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror(">", "operator$gt$1", 0, [$0], []));
  },
  _checkReplyTo$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
  },
  _callback$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$1", 0, [$0], []));
  },
  _liblib6$_callback$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib6$_callback$2", 0, [$0, $1], []));
  },
  process$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("process", "process$0", 0, [], []));
  },
  $$dom_createElement$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_createElement", "$$dom_createElement$1", 0, [$0], []));
  },
  enqueue$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
  },
  endObject$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("endObject", "endObject$0", 0, [], []));
  },
  _scheduleUnhandledError$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_scheduleUnhandledError", "_scheduleUnhandledError$0", 0, [], []));
  },
  lastEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0", 0, [], []));
  },
  ceil$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("ceil", "ceil$0", 0, [], []));
  },
  _matches$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_matches", "_matches$1", 0, [$0], []));
  },
  _deserializeRef$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1", 0, [$0], []));
  },
  _liblib6$_deserializeRef$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_liblib6$_deserializeRef$1", 0, [$0], []));
  },
  terminate$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("terminate", "terminate$0", 0, [], []));
  },
  $$dom_appendChild$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_appendChild", "$$dom_appendChild$1", 0, [$0], []));
  },
  reset$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0", 0, [], []));
  },
  lookupPort$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("lookupPort", "lookupPort$1", 0, [$0], []));
  },
  catchError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("catchError", "catchError$1", 0, [$0], []));
  },
  eval$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("eval", "eval$1", 0, [$0], []));
  },
  arrayElement$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("arrayElement", "arrayElement$0", 0, [], []));
  },
  _get_2$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_get_2", "_get_2$1", 0, [$0], []));
  },
  removeLast$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  get$keyCode: function() {
    return this.noSuchMethod$1($.createInvocationMirror("keyCode", "get$keyCode", 1, [], []));
  },
  get$_liblib6$_id: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_id", "get$_liblib6$_id", 1, [], []));
  },
  get$_previous: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_previous", "get$_previous", 1, [], []));
  },
  get$_onWindowScroll: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onWindowScroll", "get$_onWindowScroll", 1, [], []));
  },
  get$key: function() {
    return this.noSuchMethod$1($.createInvocationMirror("key", "get$key", 1, [], []));
  },
  get$target: function() {
    return this.noSuchMethod$1($.createInvocationMirror("target", "get$target", 1, [], []));
  },
  get$metaKey: function() {
    return this.noSuchMethod$1($.createInvocationMirror("metaKey", "get$metaKey", 1, [], []));
  },
  get$_hasUnhandledError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_hasUnhandledError", "get$_hasUnhandledError", 1, [], []));
  },
  get$_values: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_values", "get$_values", 1, [], []));
  },
  get$load: function() {
    return this.noSuchMethod$1($.createInvocationMirror("load", "get$load", 1, [], []));
  },
  get$_onWindowResize: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onWindowResize", "get$_onWindowResize", 1, [], []));
  },
  get$isNaN: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isNaN", "get$isNaN", 1, [], []));
  },
  get$memberName: function() {
    return this.noSuchMethod$1($.createInvocationMirror("memberName", "get$memberName", 1, [], []));
  },
  get$$$dom_attributes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_attributes", "get$$$dom_attributes", 1, [], []));
  },
  get$hash: function() {
    return this.noSuchMethod$1($.createInvocationMirror("hash", "get$hash", 1, [], []));
  },
  get$namedArguments: function() {
    return this.noSuchMethod$1($.createInvocationMirror("namedArguments", "get$namedArguments", 1, [], []));
  },
  get$_set: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_set", "get$_set", 1, [], []));
  },
  get$_realKeyCode: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_realKeyCode", "get$_realKeyCode", 1, [], []));
  },
  get$_capsLockOn: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_capsLockOn", "get$_capsLockOn", 1, [], []));
  },
  get$userAgent: function() {
    return this.noSuchMethod$1($.createInvocationMirror("userAgent", "get$userAgent", 1, [], []));
  },
  get$_isComplete: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_isComplete", "get$_isComplete", 1, [], []));
  },
  get$offsetHeight: function() {
    return this.noSuchMethod$1($.createInvocationMirror("offsetHeight", "get$offsetHeight", 1, [], []));
  },
  get$hashChange: function() {
    return this.noSuchMethod$1($.createInvocationMirror("hashChange", "get$hashChange", 1, [], []));
  },
  get$ctrlKey: function() {
    return this.noSuchMethod$1($.createInvocationMirror("ctrlKey", "get$ctrlKey", 1, [], []));
  },
  get$rootContext: function() {
    return this.noSuchMethod$1($.createInvocationMirror("rootContext", "get$rootContext", 1, [], []));
  },
  get$isCaseSensitive: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isCaseSensitive", "get$isCaseSensitive", 1, [], []));
  },
  get$last: function() {
    return this.noSuchMethod$1($.createInvocationMirror("last", "get$last", 1, [], []));
  },
  get$sb: function() {
    return this.noSuchMethod$1($.createInvocationMirror("sb", "get$sb", 1, [], []));
  },
  get$keyUp: function() {
    return this.noSuchMethod$1($.createInvocationMirror("keyUp", "get$keyUp", 1, [], []));
  },
  get$length: function() {
    return this.noSuchMethod$1($.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$click: function() {
    return this.noSuchMethod$1($.createInvocationMirror("click", "get$click", 1, [], []));
  },
  get$_onImgLoad: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onImgLoad", "get$_onImgLoad", 1, [], []));
  },
  get$isWorker: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isWorker", "get$isWorker", 1, [], []));
  },
  get$mainManager: function() {
    return this.noSuchMethod$1($.createInvocationMirror("mainManager", "get$mainManager", 1, [], []));
  },
  get$future: function() {
    return this.noSuchMethod$1($.createInvocationMirror("future", "get$future", 1, [], []));
  },
  get$iterator: function() {
    return this.noSuchMethod$1($.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$$$dom_className: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_className", "get$$$dom_className", 1, [], []));
  },
  get$id: function() {
    return this.noSuchMethod$1($.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$cause: function() {
    return this.noSuchMethod$1($.createInvocationMirror("cause", "get$cause", 1, [], []));
  },
  get$parent: function() {
    return this.noSuchMethod$1($.createInvocationMirror("parent", "get$parent", 1, [], []));
  },
  get$_onInfoElTransitionEnd: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onInfoElTransitionEnd", "get$_onInfoElTransitionEnd", 1, [], []));
  },
  get$value: function() {
    return this.noSuchMethod$1($.createInvocationMirror("value", "get$value", 1, [], []));
  },
  get$partyMembers: function() {
    return this.noSuchMethod$1($.createInvocationMirror("partyMembers", "get$partyMembers", 1, [], []));
  },
  get$type: function() {
    return this.noSuchMethod$1($.createInvocationMirror("type", "get$type", 1, [], []));
  },
  get$isMethod: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isMethod", "get$isMethod", 1, [], []));
  },
  get$_infoEl: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_infoEl", "get$_infoEl", 1, [], []));
  },
  get$status: function() {
    return this.noSuchMethod$1($.createInvocationMirror("status", "get$status", 1, [], []));
  },
  get$_resultOrListeners: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_resultOrListeners", "get$_resultOrListeners", 1, [], []));
  },
  get$transitionEnd: function() {
    return this.noSuchMethod$1($.createInvocationMirror("transitionEnd", "get$transitionEnd", 1, [], []));
  },
  get$positionalArguments: function() {
    return this.noSuchMethod$1($.createInvocationMirror("positionalArguments", "get$positionalArguments", 1, [], []));
  },
  get$currentManagerId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("currentManagerId", "get$currentManagerId", 1, [], []));
  },
  get$isGetter: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isGetter", "get$isGetter", 1, [], []));
  },
  get$_navigateToHash: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_navigateToHash", "get$_navigateToHash", 1, [], []));
  },
  get$keyDown: function() {
    return this.noSuchMethod$1($.createInvocationMirror("keyDown", "get$keyDown", 1, [], []));
  },
  get$_filtered: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_filtered", "get$_filtered", 1, [], []));
  },
  get$_next: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_next", "get$_next", 1, [], []));
  },
  get$pattern: function() {
    return this.noSuchMethod$1($.createInvocationMirror("pattern", "get$pattern", 1, [], []));
  },
  get$_lightBox: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_lightBox", "get$_lightBox", 1, [], []));
  },
  get$hidden: function() {
    return this.noSuchMethod$1($.createInvocationMirror("hidden", "get$hidden", 1, [], []));
  },
  get$_hasError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_hasError", "get$_hasError", 1, [], []));
  },
  get$sendPort: function() {
    return this.noSuchMethod$1($.createInvocationMirror("sendPort", "get$sendPort", 1, [], []));
  },
  get$_portId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_portId", "get$_portId", 1, [], []));
  },
  get$_hasValue: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_hasValue", "get$_hasValue", 1, [], []));
  },
  get$fromCommandLine: function() {
    return this.noSuchMethod$1($.createInvocationMirror("fromCommandLine", "get$fromCommandLine", 1, [], []));
  },
  get$_futurePort: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "get$_futurePort", 1, [], []));
  },
  get$children: function() {
    return this.noSuchMethod$1($.createInvocationMirror("children", "get$children", 1, [], []));
  },
  get$_setError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_setError", "get$_setError", 1, [], []));
  },
  get$on: function() {
    return this.noSuchMethod$1($.createInvocationMirror("on", "get$on", 1, [], []));
  },
  get$_onLightBoxTransitionEnd: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onLightBoxTransitionEnd", "get$_onLightBoxTransitionEnd", 1, [], []));
  },
  get$isNegative: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isNegative", "get$isNegative", 1, [], []));
  },
  get$element: function() {
    return this.noSuchMethod$1($.createInvocationMirror("element", "get$element", 1, [], []));
  },
  get$_registry: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_registry", "get$_registry", 1, [], []));
  },
  get$charCodes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("charCodes", "get$charCodes", 1, [], []));
  },
  get$innerHeight: function() {
    return this.noSuchMethod$1($.createInvocationMirror("innerHeight", "get$innerHeight", 1, [], []));
  },
  get$attributes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("attributes", "get$attributes", 1, [], []));
  },
  get$result: function() {
    return this.noSuchMethod$1($.createInvocationMirror("result", "get$result", 1, [], []));
  },
  get$source: function() {
    return this.noSuchMethod$1($.createInvocationMirror("source", "get$source", 1, [], []));
  },
  get$$$dom_namespaceUri: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_namespaceUri", "get$$$dom_namespaceUri", 1, [], []));
  },
  get$scroll: function() {
    return this.noSuchMethod$1($.createInvocationMirror("scroll", "get$scroll", 1, [], []));
  },
  get$keyPress: function() {
    return this.noSuchMethod$1($.createInvocationMirror("keyPress", "get$keyPress", 1, [], []));
  },
  get$_realAltKey: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_realAltKey", "get$_realAltKey", 1, [], []));
  },
  get$topEventLoop: function() {
    return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "get$topEventLoop", 1, [], []));
  },
  get$body: function() {
    return this.noSuchMethod$1($.createInvocationMirror("body", "get$body", 1, [], []));
  },
  get$width: function() {
    return this.noSuchMethod$1($.createInvocationMirror("width", "get$width", 1, [], []));
  },
  get$error: function() {
    return this.noSuchMethod$1($.createInvocationMirror("error", "get$error", 1, [], []));
  },
  get$_onSendClick: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onSendClick", "get$_onSendClick", 1, [], []));
  },
  get$$$dom_localName: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_localName", "get$$$dom_localName", 1, [], []));
  },
  get$_scopeIndices: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_scopeIndices", "get$_scopeIndices", 1, [], []));
  },
  get$_shadowKeyIdentifier: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_shadowKeyIdentifier", "get$_shadowKeyIdentifier", 1, [], []));
  },
  get$dataAttributes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("dataAttributes", "get$dataAttributes", 1, [], []));
  },
  get$shiftKey: function() {
    return this.noSuchMethod$1($.createInvocationMirror("shiftKey", "get$shiftKey", 1, [], []));
  },
  get$style: function() {
    return this.noSuchMethod$1($.createInvocationMirror("style", "get$style", 1, [], []));
  },
  get$_liblib0$_keys: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_keys", "get$_liblib0$_keys", 1, [], []));
  },
  get$_keys: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_keys", "get$_keys", 1, [], []));
  },
  get$documentElement: function() {
    return this.noSuchMethod$1($.createInvocationMirror("documentElement", "get$documentElement", 1, [], []));
  },
  get$_onRsvpUpsertFail: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onRsvpUpsertFail", "get$_onRsvpUpsertFail", 1, [], []));
  },
  get$$$dom_childNodes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_childNodes", "get$$$dom_childNodes", 1, [], []));
  },
  get$detail: function() {
    return this.noSuchMethod$1($.createInvocationMirror("detail", "get$detail", 1, [], []));
  },
  get$_listenerName: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_listenerName", "get$_listenerName", 1, [], []));
  },
  get$_onAddNameClick: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onAddNameClick", "get$_onAddNameClick", 1, [], []));
  },
  get$managers: function() {
    return this.noSuchMethod$1($.createInvocationMirror("managers", "get$managers", 1, [], []));
  },
  get$nextIsolateId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "get$nextIsolateId", 1, [], []));
  },
  get$_liblib6$_receivePort: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "get$_liblib6$_receivePort", 1, [], []));
  },
  get$isEmpty: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$currentContext: function() {
    return this.noSuchMethod$1($.createInvocationMirror("currentContext", "get$currentContext", 1, [], []));
  },
  get$parentNode: function() {
    return this.noSuchMethod$1($.createInvocationMirror("parentNode", "get$parentNode", 1, [], []));
  },
  get$_onRsvpUpsertSuccess: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onRsvpUpsertSuccess", "get$_onRsvpUpsertSuccess", 1, [], []));
  },
  get$scrollLeft: function() {
    return this.noSuchMethod$1($.createInvocationMirror("scrollLeft", "get$scrollLeft", 1, [], []));
  },
  get$scrollY: function() {
    return this.noSuchMethod$1($.createInvocationMirror("scrollY", "get$scrollY", 1, [], []));
  },
  get$needSerialization: function() {
    return this.noSuchMethod$1($.createInvocationMirror("needSerialization", "get$needSerialization", 1, [], []));
  },
  get$_setValue: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_setValue", "get$_setValue", 1, [], []));
  },
  get$activeTimerCount: function() {
    return this.noSuchMethod$1($.createInvocationMirror("activeTimerCount", "get$activeTimerCount", 1, [], []));
  },
  get$_realCharCode: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_realCharCode", "get$_realCharCode", 1, [], []));
  },
  get$location: function() {
    return this.noSuchMethod$1($.createInvocationMirror("location", "get$location", 1, [], []));
  },
  get$$$dom_lastElementChild: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_lastElementChild", "get$$$dom_lastElementChild", 1, [], []));
  },
  get$isMultiLine: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isMultiLine", "get$isMultiLine", 1, [], []));
  },
  get$_liblib6$_callback: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_callback", "get$_liblib6$_callback", 1, [], []));
  },
  get$$$dom_firstElementChild: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_firstElementChild", "get$$$dom_firstElementChild", 1, [], []));
  },
  get$$$dom_body: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_body", "get$$$dom_body", 1, [], []));
  },
  get$_nextListener: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_nextListener", "get$_nextListener", 1, [], []));
  },
  get$resize: function() {
    return this.noSuchMethod$1($.createInvocationMirror("resize", "get$resize", 1, [], []));
  },
  get$isInfinite: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isInfinite", "get$isInfinite", 1, [], []));
  },
  get$_tag: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_tag", "get$_tag", 1, [], []));
  },
  get$nodes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  get$ports: function() {
    return this.noSuchMethod$1($.createInvocationMirror("ports", "get$ports", 1, [], []));
  },
  get$_liblib6$_isolateId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "get$_liblib6$_isolateId", 1, [], []));
  },
  get$_location: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_location", "get$_location", 1, [], []));
  },
  get$src: function() {
    return this.noSuchMethod$1($.createInvocationMirror("src", "get$src", 1, [], []));
  },
  get$altKey: function() {
    return this.noSuchMethod$1($.createInvocationMirror("altKey", "get$altKey", 1, [], []));
  },
  get$_onThumbClick: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onThumbClick", "get$_onThumbClick", 1, [], []));
  },
  get$current: function() {
    return this.noSuchMethod$1($.createInvocationMirror("current", "get$current", 1, [], []));
  },
  get$stackTrace: function() {
    return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "get$stackTrace", 1, [], []));
  },
  get$nextManagerId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nextManagerId", "get$nextManagerId", 1, [], []));
  },
  get$classes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("classes", "get$classes", 1, [], []));
  },
  get$navigator: function() {
    return this.noSuchMethod$1($.createInvocationMirror("navigator", "get$navigator", 1, [], []));
  },
  get$isSetter: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isSetter", "get$isSetter", 1, [], []));
  },
  get$offsetWidth: function() {
    return this.noSuchMethod$1($.createInvocationMirror("offsetWidth", "get$offsetWidth", 1, [], []));
  },
  get$isolates: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isolates", "get$isolates", 1, [], []));
  },
  get$_onLinkClick: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onLinkClick", "get$_onLinkClick", 1, [], []));
  },
  get$_shadowCharCode: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_shadowCharCode", "get$_shadowCharCode", 1, [], []));
  },
  get$listener: function() {
    return this.noSuchMethod$1($.createInvocationMirror("listener", "get$listener", 1, [], []));
  },
  get$_serialized: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_serialized", "get$_serialized", 1, [], []));
  },
  get$keyLocation: function() {
    return this.noSuchMethod$1($.createInvocationMirror("keyLocation", "get$keyLocation", 1, [], []));
  },
  get$_workerId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_workerId", "get$_workerId", 1, [], []));
  },
  get$_onWindowKeyPress: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onWindowKeyPress", "get$_onWindowKeyPress", 1, [], []));
  },
  set$left: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("left=", "set$left", 2, [$0], []));
  },
  set$_previous: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_previous=", "set$_previous", 2, [$0], []));
  },
  set$currentContext: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("currentContext=", "set$currentContext", 2, [$0], []));
  },
  set$$$dom_className: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_className=", "set$$$dom_className", 2, [$0], []));
  },
  set$_handle: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_handle=", "set$_handle", 2, [$0], []));
  },
  set$id: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("id=", "set$id", 2, [$0], []));
  },
  set$value: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("value=", "set$value", 2, [$0], []));
  },
  set$src: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("src=", "set$src", 2, [$0], []));
  },
  set$nextManagerId: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("nextManagerId=", "set$nextManagerId", 2, [$0], []));
  },
  set$_nextListener: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_nextListener=", "set$_nextListener", 2, [$0], []));
  },
  set$hash: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("hash=", "set$hash", 2, [$0], []));
  },
  set$top: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("top=", "set$top", 2, [$0], []));
  },
  set$type: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  set$width: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("width=", "set$width", 2, [$0], []));
  },
  set$disabled: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("disabled=", "set$disabled", 2, [$0], []));
  },
  set$activeTimerCount: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("activeTimerCount=", "set$activeTimerCount", 2, [$0], []));
  },
  set$onmessage: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("onmessage=", "set$onmessage", 2, [$0], []));
  },
  set$text: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("text=", "set$text", 2, [$0], []));
  },
  set$rootContext: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("rootContext=", "set$rootContext", 2, [$0], []));
  },
  set$innerHtml: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
  },
  set$currentManagerId: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("currentManagerId=", "set$currentManagerId", 2, [$0], []));
  },
  set$height: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("height=", "set$height", 2, [$0], []));
  },
  set$_next: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_next=", "set$_next", 2, [$0], []));
  },
  set$length: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  set$nextIsolateId: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "set$nextIsolateId", 2, [$0], []));
  },
  set$hidden: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("hidden=", "set$hidden", 2, [$0], []));
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_liblib0$_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._liblib0$_element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._liblib0$_element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._liblib0$_element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_liblib0$_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._sentinel.prepend$1(t2);
    }
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.eqB(entry.get$element(), o)) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  get$last: function() {
    return this._sentinel._previous.get$element();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  is$Collection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib0$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib0$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib0$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.operator$indexSet$2(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  is$Collection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT4)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT4;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$._StringBufferImpl = {"": "Object;_buffer,_liblib0$_length",
  get$length: function() {
    return this._liblib0$_length;
  },
  get$isEmpty: function() {
    return $.eq(this._liblib0$_length, 0);
  },
  add$1: function(obj) {
    var str, t1;
    str = $.getInterceptor(obj).toString$0(obj);
    if (!(typeof str === "string"))
      throw $.$$throw($.ArgumentError$("toString() did not return a string"));
    if ($.CONSTANT1.get$isEmpty(str) === true)
      return;
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, str);
    t1 = this._liblib0$_length;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, t1, str);
    this._liblib0$_length = t1 + str.length;
  },
  add$1$bailout: function(state0, t1, str) {
    var t3 = str.length;
    this._liblib0$_length = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
  },
  addAll$1: function(objects) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(objects).get$iterator(objects); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  clear$0: function() {
    this._buffer = $.List_List(0);
    this._liblib0$_length = 0;
  },
  toString$0: function() {
    var t1, result;
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      return "";
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
      t1 = this._buffer;
      return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    }
    result = $.Strings__toJsStringArray(this._buffer).join("");
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, result);
    return result;
  },
  _StringBufferImpl$1: function(content$) {
    this.clear$0();
    this.add$1(content$);
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.MappedIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  },
  get$length: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  }
};

$$.MappedIterator = {"": "Iterator;_liblib3$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib3$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib3$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib3$_current;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.WhereIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.NonExtensibleListMixin = {"": "Iterable;",
  get$iterator: function() {
    return $.ListIterator$(this);
  },
  forEach$1: function(f) {
    var t1, i;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; $.ltB(i, t1.get$length(this)); ++i)
      f.call$1(this.operator$index$1(i));
  },
  contains$1: function(value) {
    var t1, i, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = 0;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.contains$1$bailout(1, value, t2, i);
      if (!(i < t2))
        break;
      if ($.eqB(this.operator$index$1(i), value))
        return true;
      ++i;
    }
    return false;
  },
  contains$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        i = env2;
        t2 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = 0;
      case 1:
        var t1, i, t2, value;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 1:
                state0 = 0;
                if (!$.ltB(i, t2))
                  break L0;
                if ($.eqB(this.operator$index$1(i), value))
                  return true;
                ++i;
            }
        return false;
    }
  },
  any$1: function(f) {
    var t1, i;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; $.ltB(i, t1.get$length(this)); ++i)
      if (f.call$1(this.operator$index$1(i)) === true)
        return true;
    return false;
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  indexOf$2: function(value, start) {
    var t1, i, t2;
    if (typeof start !== "number")
      return this.indexOf$2$bailout(1, value, start);
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = start;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.indexOf$2$bailout(2, i, value, t2);
      if (!(i < t2))
        break;
      if ($.eqB(this.operator$index$1(i), value))
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$2$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        start = env1;
        value = env0;
        break;
      case 2:
        t2 = env2;
        value = env1;
        i = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = start;
      case 2:
        var start, value, t1, i, t2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 2:
                state0 = 0;
                if (!$.ltB(i, t2))
                  break L0;
                if ($.eqB(this.operator$index$1(i), value))
                  return i;
                i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1);
            }
        return -1;
    }
  },
  indexOf$1: function(value) {
    return this.indexOf$2(value, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  getRange$2: function(start, length$) {
    var result, i;
    if (typeof start !== "number")
      return this.getRange$2$bailout(1, start, length$);
    if (typeof length$ !== "number")
      return this.getRange$2$bailout(1, start, length$);
    result = [];
    for (i = 0; i < length$; ++i)
      result.push(this.operator$index$1(start + i));
    return result;
  },
  getRange$2$bailout: function(state0, start, length$) {
    var result, t1, i;
    result = [];
    for (t1 = $.getInterceptor$JSNumber(start), i = 0; $.ltB(i, length$); ++i)
      result.push(this.operator$index$1(t1.operator$add$1(start, i)));
    return result;
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeAt$1: function(index) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeRange$2: function(start, length$) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.ListIterator = {"": "Object;_liblib3$_list,_liblib3$_position,_liblib3$_current",
  moveNext$0: function() {
    var t1, nextPosition, t2, t3;
    t1 = this._liblib3$_position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout3(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib3$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout3(2, t1, t2, t3, nextPosition);
    if (nextPosition < t3) {
      this._liblib3$_current = t1.operator$index$1(nextPosition);
      this._liblib3$_position = nextPosition;
      return true;
    }
    this._liblib3$_position = t2.get$length(t1);
    this._liblib3$_current = null;
    return false;
  },
  moveNext$0$bailout3: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env3;
        t3 = env2;
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._liblib3$_position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib3$_list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        var t1, nextPosition, t2, t3;
        state0 = 0;
        if ($.ltB(nextPosition, t3)) {
          this._liblib3$_current = t1.operator$index$1(nextPosition);
          this._liblib3$_position = nextPosition;
          return true;
        }
        this._liblib3$_position = t2.get$length(t1);
        this._liblib3$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib3$_current;
  }
};

$$.MappedList = {"": "NonExtensibleListMixin;_liblib3$_list,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  operator$index$1: function(index) {
    var t1 = this._liblib3$_list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout5(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return this._f$1(t1[index]);
  },
  operator$index$1$bailout5: function(state0, index, t1) {
    return this._f$1($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index));
  },
  get$length: function() {
    var t1 = this._liblib3$_list;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  }
};

$$.ObjectInterceptor = {"": "Object;",
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  operator$indexSet$2: function(receiver, a0, a1) {
    return receiver.operator$indexSet$2(a0, a1);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  operator$tdiv$1: function(receiver, a0) {
    return receiver.operator$tdiv$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  operator$and$1: function(receiver, a0) {
    return receiver.operator$and$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  operator$index$1: function(receiver, a0) {
    return receiver.operator$index$1(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  get$charCodes: function(receiver) {
    return receiver.get$charCodes();
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  startsWith$1: function(receiver, a0) {
    return receiver.startsWith$1(a0);
  },
  contains$2: function(receiver, a0, a1) {
    return receiver.contains$2(a0, a1);
  },
  toDouble$0: function(receiver) {
    return receiver.toDouble$0();
  },
  concat$1: function(receiver, a0) {
    return receiver.concat$1(a0);
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  operator$mul$1: function(receiver, a0) {
    return receiver.operator$mul$1(a0);
  },
  removeAt$1: function(receiver, a0) {
    return receiver.removeAt$1(a0);
  },
  operator$mod$1: function(receiver, a0) {
    return receiver.operator$mod$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  toInt$0: function(receiver) {
    return receiver.toInt$0();
  },
  addAll$1: function(receiver, a0) {
    return receiver.addAll$1(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  operator$add$1: function(receiver, a0) {
    return receiver.operator$add$1(a0);
  },
  operator$or$1: function(receiver, a0) {
    return receiver.operator$or$1(a0);
  },
  trim$0: function(receiver) {
    return receiver.trim$0();
  },
  operator$shr$1: function(receiver, a0) {
    return receiver.operator$shr$1(a0);
  },
  operator$div$1: function(receiver, a0) {
    return receiver.operator$div$1(a0);
  },
  mappedBy$1: function(receiver, a0) {
    return receiver.mappedBy$1(a0);
  },
  operator$shl$1: function(receiver, a0) {
    return receiver.operator$shl$1(a0);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  get$isInfinite: function(receiver) {
    return receiver.get$isInfinite();
  },
  operator$sub$1: function(receiver, a0) {
    return receiver.operator$sub$1(a0);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  operator$xor$1: function(receiver, a0) {
    return receiver.operator$xor$1(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  any$1: function(receiver, a0) {
    return receiver.any$1(a0);
  },
  join$1: function(receiver, a0) {
    return receiver.join$1(a0);
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  is$bool: true
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    $.checkGrowable(receiver, "removeAt");
    return receiver.splice(index, 1)[0];
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(receiver[i], element)) {
        receiver.splice(i, 1);
        return;
      }
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(collection).get$iterator(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(receiver, f) {
    return $.MappedList$(receiver, f);
  },
  join$1: function(receiver, separator) {
    var list, i, t1;
    if (separator == null)
      separator = "";
    list = $.List_List(receiver.length);
    for (i = 0; i < receiver.length; ++i) {
      t1 = $.S(receiver[i]);
      if (i >= list.length)
        throw $.ioore(i);
      list[i] = t1;
    }
    return list.join(separator);
  },
  getRange$2: function(receiver, start, length$) {
    var t1, end;
    if (0 === length$)
      return [];
    $.checkNull(start);
    $.checkNull(length$);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length$ === "number" && Math.floor(length$) === length$))
      throw $.$$throw($.ArgumentError$(length$));
    t1 = length$ < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$(length$));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + length$;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value(length$));
    if (t1)
      throw $.$$throw($.ArgumentError$(length$));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, length$) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if ($.eqB(length$, 0))
      return;
    $.checkNull(start);
    $.checkNull(length$);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length$ === "number" && Math.floor(length$) === length$))
      throw $.$$throw($.ArgumentError$(length$));
    if (length$ < 0)
      throw $.$$throw($.ArgumentError$(length$));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + length$;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - length$;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  any$1: function(receiver, f) {
    return $.IterableMixinWorkaround_any(receiver, f);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(other, receiver[i]))
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  get$iterator: function(receiver) {
    return $._ArrayIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  operator$indexSet$2: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._ArrayIterator = {"": "Object;_list,_liblib$_position,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, nextPosition, length$;
    t1 = this._liblib$_position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout0(1, t1);
    nextPosition = t1 + 1;
    t1 = this._list;
    length$ = t1.length;
    if (nextPosition < length$) {
      this._liblib$_position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_position = length$;
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t1) {
    var nextPosition, length$;
    nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    t1 = this._list;
    length$ = t1.length;
    if ($.ltB(nextPosition, length$)) {
      this._liblib$_position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_position = length$;
    this._liblib$_current = null;
    return false;
  }
};

$$.JSNumber = {"": "Object;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver) === true)
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver) === true)
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = this.truncate$0(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  operator$add$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  operator$sub$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  operator$div$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  operator$mul$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  operator$mod$1: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  operator$tdiv$1: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  operator$shl$1: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  operator$shr$1: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  operator$and$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  operator$or$1: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  operator$xor$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  }
};

$$.JSInt = {"": "JSNumber;"};

$$.JSDouble = {"": "JSNumber;"};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (!(typeof index === "number"))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  concat$1: function(receiver, other) {
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if ($.ltB(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  get$charCodes: function(receiver) {
    var t1, result, i;
    t1 = receiver.length;
    result = $.List_List$fixedLength(t1, null);
    for (i = 0; i < t1; ++i)
      result[i] = receiver.charCodeAt(i);
    return result;
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  is$String: true
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId=,nextManagerId=,currentContext=,rootContext=,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, isWorkerDefined, t2;
    t1 = $.get$globalWindow() == null;
    isWorkerDefined = !($.get$globalWorker() == null);
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = isWorkerDefined && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var function$ = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = function$;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true && $.eqB(this.topEventLoop.get$activeTimerCount(), 0);
    } else
      t1 = false;
    if (t1)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id=,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.get$currentContext();
    $globalState.set$currentContext(this);
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      t1 = old;
      $globalState.set$currentContext(t1);
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId);
  },
  register$2: function(portId, port) {
    var t1, t2;
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, portId, port);
    t1 = $globalState.get$isolates();
    t2 = this.id;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, this);
  },
  unregister$1: function(portId) {
    var t1, t2;
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).remove$1(t1, portId);
    t1 = this.ports;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true) {
      t1 = $globalState.get$isolates();
      t2 = this.id;
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState0();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    var t1, t2;
    t1 = this.events;
    t2 = $._IsolateEvent$(isolate, fn, msg);
    $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    var t1, t2;
    if (!($globalState.get$rootContext() == null))
      if ($globalState.get$isolates().containsKey$1($globalState.get$rootContext().get$id()) === true)
        if ($globalState.get$fromCommandLine() === true) {
          t1 = $globalState.get$rootContext().get$ports();
          t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var event$ = this.dequeue$0();
    if (event$ == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    event$.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.get$isWorker() !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  set$id: function(i) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  set$onmessage: function(f) {
    throw $.$$throw($.Exception_Exception("onmessage should not be set on MainManagerStub"));
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_liblib6$_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_BufferingSendPort))
      throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.get$future();
  },
  is$SendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_liblib6$_receivePort>,_liblib6$_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  operator$eq$1: function(other) {
    return typeof other === "object" && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._liblib6$_receivePort, other._liblib6$_receivePort);
  },
  get$hashCode: function() {
    return this._liblib6$_receivePort.get$_liblib6$_id();
  },
  is$_NativeJsSendPort: true,
  is$SendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_liblib6$_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  operator$eq$1: function(other) {
    var t1;
    if (typeof other === "object" && other !== null && !!other.is$_WorkerSendPort)
      t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._liblib6$_isolateId, other._liblib6$_isolateId) && $.eqB(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = this._workerId;
    t1 = $.getInterceptor$JSNumber(t1).operator$shl$1(t1, 16);
    t2 = this._liblib6$_isolateId;
    t2 = $.getInterceptor$JSNumber(t2).operator$shl$1(t2, 8);
    t2 = $.getInterceptor$JSNumber(t1).operator$xor$1(t1, t2);
    t1 = this._receivePortId;
    return $.getInterceptor$JSNumber(t2).operator$xor$1(t2, t1);
  },
  is$_WorkerSendPort: true,
  is$SendPort: true
};

$$.ReceivePortImpl = {"": "Object;_liblib6$_id>,_liblib6$_callback>",
  _liblib6$_callback$2: function(arg0, arg1) {
    return this._liblib6$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib6$_callback = onMessage;
  },
  close$0: function() {
    this._liblib6$_callback = null;
    $globalState.get$currentContext().unregister$1(this._liblib6$_id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.get$currentContext().get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState0().get$currentContext().register$2(this._liblib6$_id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_liblib6$_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._liblib6$_visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list) == null))
      return;
    t1 = this._liblib6$_visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, true);
    t1 = new $._PendingSendPortFinder_visitList_anon(this);
    $.getInterceptor$JSArray(list).forEach$1(list, t1);
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = this._liblib6$_visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map) == null))
      return;
    t1 = this._liblib6$_visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, true);
    t1 = map.get$values();
    t2 = new $._PendingSendPortFinder_visitMap_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  visitSendPort$1: function(port) {
    if (!!port.is$_BufferingSendPort && port._liblib6$_port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._liblib6$_visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer0 = {"": "_Serializer;_liblib6$_nextFreeRefId,_liblib6$_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return ["sendport", x._workerId, x._liblib6$_isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.get$currentManagerId(), port._liblib6$_isolateId, port._liblib6$_receivePort.get$_liblib6$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._liblib6$_port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._liblib6$_visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_liblib6$_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._liblib6$_receivePort, port._liblib6$_isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._liblib6$_isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._liblib6$_port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._liblib6$_visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer0 = {"": "_Deserializer;_liblib6$_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSStringJSArray(x);
    managerId = t1.operator$index$1(x, 1);
    isolateId = t1.operator$index$1(x, 2);
    receivePortId = t1.operator$index$1(x, 3);
    if ($.eqB(managerId, $globalState.get$currentManagerId())) {
      t1 = $globalState.get$isolates();
      isolate = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  operator$index$1: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  operator$indexSet$2: function(object, info) {
    var t1 = this.tagged;
    $.getInterceptor$JSArray(t1).add$1(t1, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List(0);
  },
  cleanup$0: function() {
    var t1, length$, i;
    t1 = this.tagged;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof length$ !== "number")
      return this.cleanup$0$bailout(1, length$);
    i = 0;
    for (; i < length$; ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, length$) {
    var i, t1;
    i = 0;
    for (; $.ltB(i, length$); ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap0 = {"": "Object;",
  operator$index$1: function(object) {
    return;
  },
  operator$indexSet$2: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._liblib6$_visited.reset$0();
    result = null;
    try {
      result = this._liblib6$_dispatch$1(x);
    } finally {
      this._liblib6$_visited.cleanup$0();
    }
    return result;
  },
  _liblib6$_dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.is$List()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.is$Map())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
      return this.visitList$1$bailout(1, list);
    t1 = this._liblib6$_visited;
    copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._liblib6$_visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._liblib6$_dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        list = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._liblib6$_visited;
        copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, copy, len, t3, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        t3 = this._liblib6$_visited;
        $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, list, copy);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._liblib6$_dispatch$1(t1.operator$index$1(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2, t3;
    t1 = {};
    t2 = this._liblib6$_visited;
    t1.copy_0 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $.Map_Map();
    t2 = this._liblib6$_visited;
    t3 = t1.copy_0;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, map, t3);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._liblib6$_visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._liblib6$_nextFreeRefId;
    this._liblib6$_nextFreeRefId = id + 1;
    t1 = this._liblib6$_visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, id);
    return ["list", id, this._liblib6$_serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys, t2;
    t1 = this._liblib6$_visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._liblib6$_nextFreeRefId;
    this._liblib6$_nextFreeRefId = id + 1;
    t1 = this._liblib6$_visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, id);
    t1 = map.get$keys();
    keys = this._liblib6$_serializeList$1($.getInterceptor$JSArray(t1).toList$0(t1));
    t2 = map.get$values();
    return ["map", id, keys, this._liblib6$_serializeList$1($.getInterceptor$JSArray(t2).toList$0(t2))];
  },
  _liblib6$_serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
      return this._liblib6$_serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._liblib6$_dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _liblib6$_serializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        t1 = env1;
        list = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, len, result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._liblib6$_dispatch$1(t1.operator$index$1(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._liblib6$_deserialized = $.HashMap_HashMap();
    return this._liblib6$_deserializeHelper$1(x);
  },
  _liblib6$_deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
      case "ref":
        return this._liblib6$_deserializeRef$1(x);
      case "list":
        return this._liblib6$_deserializeList$1(x);
      case "map":
        return this._liblib6$_deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _liblib6$_deserializeRef$1: function(x) {
    var id, t1;
    id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
    t1 = this._liblib6$_deserialized;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  },
  _liblib6$_deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    dartList = t1.operator$index$1(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
      return this._liblib6$_deserializeList$1$bailout(1, dartList, id);
    t2 = this._liblib6$_deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._liblib6$_deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _liblib6$_deserializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        id = env1;
        dartList = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        dartList = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        dartList = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        t2 = this._liblib6$_deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
        t2 = $.getInterceptor$JSStringJSArray(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, id, dartList, t2, len, i;
        state0 = 0;
        for (i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(dartList, i, this._liblib6$_deserializeHelper$1(t2.operator$index$1(dartList, i)));
        return dartList;
    }
  },
  _liblib6$_deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map();
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    t2 = this._liblib6$_deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
    keys = t1.operator$index$1(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
      return this._liblib6$_deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.operator$index$1(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
      return this._liblib6$_deserializeMap$1$bailout(2, values, result, keys);
    len = keys.length;
    for (t1 = $.getInterceptor$JSArray(result), i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._liblib6$_deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      t1.operator$indexSet$2(result, key, this._liblib6$_deserializeHelper$1(values[i]));
    }
    return result;
  },
  _liblib6$_deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env3;
        keys = env2;
        result = env1;
        x = env0;
        break;
      case 2:
        keys = env2;
        result = env1;
        values = env0;
        break;
      case 3:
        keys = env4;
        result = env3;
        len = env2;
        t3 = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        result = $.Map_Map();
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        t2 = this._liblib6$_deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
        keys = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        values = t1.operator$index$1(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(keys);
        len = t3.get$length(keys);
      case 3:
        var result, t1, id, t2, keys, x, values, t3, len, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(values), t2 = $.getInterceptor$JSArray(result), i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(result, this._liblib6$_deserializeHelper$1(t3.operator$index$1(keys, i)), this._liblib6$_deserializeHelper$1(t1.operator$index$1(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if ($.eqB(milliseconds, 0))
      t1 = !$.hasTimer() || $._globalState0().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState0().get$topEventLoop().enqueue$3($._globalState0().get$currentContext(), new $.anon0(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState0().get$topEventLoop();
      t2 = t1.get$activeTimerCount();
      t1.set$activeTimerCount($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, t1, t2, exception;
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "'");
    message = null;
    try {
      t2 = this.error;
      message = $.getInterceptor(t2).toString$0(t2);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    t1.add$1(buffer, message);
    t1.add$1(buffer, "'\n");
    t2 = this.stackTrace;
    if (!(t2 == null)) {
      t1.add$1(buffer, "Stack trace:\n");
      t1.add$1(buffer, $.getInterceptor(t2).toString$0(t2));
      t1.add$1(buffer, "\n");
    }
  },
  toString$0: function() {
    var buffer, t1, cause;
    buffer = $.StringBuffer_StringBuffer("");
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      t1.add$1(buffer, "Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return t1.toString$0(buffer);
  },
  is$AsyncError: true
};

$$._CompleterImpl = {"": "Object;future>,_isComplete>",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.is$AsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future>,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return !$.eqB(this._state, 0);
  },
  get$_hasValue: function() {
    return $.eq(this._state, 1);
  },
  get$_hasError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 2), 0);
  },
  get$_hasUnhandledError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 4), 0);
  },
  _clearUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$and$1(t1, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_Timer(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_Timer(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$or$1(t1, 4);
    $.Timer_Timer(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  is$_FutureImpl: true,
  is$Future: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.is$Future)
      if (!!result.is$_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function(function$, onError) {
    return this._future.then$2$onError(function$, onError);
  },
  then$1: function(function$) {
    return this.then$2$onError(function$, null);
  },
  catchError$2$test: function(function$, test) {
    return this._future.catchError$2$test(function$, test);
  },
  catchError$1: function(function$) {
    return this.catchError$2$test(function$, null);
  },
  is$Future: true
};

$$.RsvpInsertRequest = {"": "Object;id=,partyMembers>,dietaryRestrictions,isStayingOvernight,durationDaysCount",
  toJson$0: function() {
    var map, t1, t2;
    map = $.Map_Map();
    t1 = this.id;
    t2 = $.getInterceptor$JSArray(map);
    t2.operator$indexSet$2(map, "Id", t1);
    t2.operator$indexSet$2(map, "PartyMembers", this.partyMembers);
    t2.operator$indexSet$2(map, "DietaryRestrictions", this.dietaryRestrictions);
    t2.operator$indexSet$2(map, "IsStayingOvernight", this.isStayingOvernight);
    t2.operator$indexSet$2(map, "DurationDaysCount", this.durationDaysCount);
    return map;
  }
};

$$.RsvpWidget = {"": "Object;_reqInProgress,_infoEl>",
  decorate$0: function() {
    var t1, t2;
    t1 = document.query$1("#rsvp-send-button").get$on().get$click();
    t2 = this.get$_onSendClick();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = document.query$1("#rsvp-add-name-button").get$on().get$click();
    t1 = this.get$_onAddNameClick();
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    this._infoEl = document.query$1("#rsvp-info-element");
    t1 = this._infoEl.get$on().get$transitionEnd();
    t2 = this.get$_onInfoElTransitionEnd();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  _showMessage$2: function(type, msg) {
    var t1;
    this._infoEl.set$innerHtml(msg);
    t1 = this._infoEl.get$classes();
    $.getInterceptor$JSArray(t1).remove$1(t1, "info");
    t1 = this._infoEl.get$classes();
    $.getInterceptor$JSArray(t1).remove$1(t1, "error");
    t1 = this._infoEl.get$classes();
    $.getInterceptor$JSArray(t1).add$1(t1, type);
    this._infoEl.set$hidden(false);
    window.setTimeout$2(new $.RsvpWidget__showMessage_anon(this), 0);
    if (type === "info")
      window.setTimeout$2(new $.RsvpWidget__showMessage_anon0(this), 6000);
  },
  _setSendButtonState$1: function(isInProgress) {
    var sendButton, t1, label;
    sendButton = document.query$1("#rsvp-send-button");
    if (isInProgress) {
      t1 = sendButton.get$dataAttributes();
      label = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "label-send-in-progress");
    } else {
      t1 = sendButton.get$dataAttributes();
      label = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "label-send");
    }
    sendButton.set$text(label);
    sendButton.set$disabled(isInProgress);
  },
  _onSendClick$1: function(e) {
    var rsvp, t1, t2;
    this._setSendButtonState$1(true);
    rsvp = $.RsvpInsertRequest$();
    rsvp.id = $.callTypeCast(document.query$1("#rsvp-id"), "is$TextInputElement").get$value();
    rsvp.partyMembers = $.List_List(0);
    t1 = document.queryAll$1("#rsvp-names > .rsvp-name");
    t2 = new $.RsvpWidget__onSendClick_anon(rsvp);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
    rsvp.dietaryRestrictions = $.callTypeCast(document.query$1("#rsvp-dietary-restrictions"), "is$TextAreaElement").get$value();
    rsvp.isStayingOvernight = $.callTypeCast(document.query$1("#rsvp-is-staying-overnight"), "is$CheckboxInputElement").get$checked();
    rsvp.durationDaysCount = $.callTypeCast(document.query$1("#rsvp-duration-days-count"), "is$TextInputElement").get$value();
    this._reqInProgress = $.HttpRequest_HttpRequest();
    t2 = this._reqInProgress.get$on().get$load();
    t1 = this.get$_onRsvpUpsertSuccess();
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    t1 = this._reqInProgress.get$on().get$error();
    t2 = this.get$_onRsvpUpsertFail();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    this._reqInProgress.open$2("POST", "/api/rsvp/create");
    this._reqInProgress.send$1($._JsonStringifier_stringify(rsvp));
    $.scoped(new $.RsvpWidget__onSendClick_anon0());
  },
  get$_onSendClick: function() {
    return new $.BoundClosure(this, "_onSendClick$1");
  },
  _onRsvpUpsertSuccess$1: function(e) {
    var t1;
    if ($.eqB(this._reqInProgress.get$status(), 200)) {
      t1 = document.query$1("#rsvp-info-element").get$dataAttributes();
      this._showMessage$2("info", $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "success-message"));
      this._setSendButtonState$1(false);
      $.scoped(new $.RsvpWidget__onRsvpUpsertSuccess_anon());
    } else
      this._onRsvpUpsertFail$1(e);
  },
  get$_onRsvpUpsertSuccess: function() {
    return new $.BoundClosure(this, "_onRsvpUpsertSuccess$1");
  },
  _onRsvpUpsertFail$1: function(e) {
    var t1;
    $.scoped(new $.RsvpWidget__onRsvpUpsertFail_anon());
    t1 = document.query$1("#rsvp-info-element").get$dataAttributes();
    this._showMessage$2("error", $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "fail-message"));
    this._setSendButtonState$1(false);
  },
  get$_onRsvpUpsertFail: function() {
    return new $.BoundClosure(this, "_onRsvpUpsertFail$1");
  },
  _onAddNameClick$1: function(e) {
    var child, t1, rsvpNames, t2;
    child = $.TextInputElement_TextInputElement();
    t1 = child.get$classes();
    $.getInterceptor$JSArray(t1).add$1(t1, "rsvp-name");
    rsvpNames = document.query$1("#rsvp-names");
    t1 = rsvpNames.get$children();
    t2 = $.BRElement_BRElement();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = rsvpNames.get$children();
    $.getInterceptor$JSArray(t2).add$1(t2, child);
  },
  get$_onAddNameClick: function() {
    return new $.BoundClosure(this, "_onAddNameClick$1");
  },
  _onInfoElTransitionEnd$1: function(_) {
    var t1 = this._infoEl.get$classes();
    if ($.getInterceptor$JSStringJSArray(t1).contains$1(t1, "transparent") === true)
      this._infoEl.set$hidden(true);
  },
  get$_onInfoElTransitionEnd: function() {
    return new $.BoundClosure(this, "_onInfoElTransitionEnd$1");
  }
};

$$.PhotoGalleryWidget = {"": "Object;_lightBox>,_keyboardEventController,_prevImg,_currImg,_nextImg",
  decorate$0: function() {
    var t1, t2;
    this._lightBox = document.query$1("#photo-gallery-light-box");
    t1 = this._lightBox.get$on().get$transitionEnd();
    t2 = this.get$_onLightBoxTransitionEnd();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = document.queryAll$1("#photo-gallery-page img");
    t1 = new $.PhotoGalleryWidget_decorate_anon(this);
    $.getInterceptor$JSArray(t2).forEach$1(t2, t1);
    t1 = document.query$1("#light-box-close-button").get$on().get$click();
    t2 = new $.PhotoGalleryWidget_decorate_anon0(this);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = document.query$1("#light-box-right-button").get$on().get$click();
    t1 = new $.PhotoGalleryWidget_decorate_anon1(this);
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    t1 = document.query$1("#light-box-left-button").get$on().get$click();
    t2 = new $.PhotoGalleryWidget_decorate_anon2(this);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = window.get$on().get$resize();
    t1 = this.get$_onWindowResize();
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    window.get$on().get$scroll().add$2(this.get$_onWindowScroll(), true);
    this._onWindowResize$1(null);
    this._keyboardEventController = $.KeyboardEventController$keydown(window);
    t1 = this._keyboardEventController;
    t2 = this.get$_onWindowKeyPress();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  },
  _setLightBoxVisible$1: function(isVisible) {
    var t1 = this._lightBox;
    if (isVisible) {
      t1.set$hidden(false);
      window.setTimeout$2(new $.PhotoGalleryWidget__setLightBoxVisible_anon(this), 0);
    } else {
      t1 = t1.get$classes();
      $.getInterceptor$JSArray(t1).add$1(t1, "transparent");
    }
  },
  _createLightBoxImage$1: function(src) {
    var img, t1, t2;
    $.scoped(new $.PhotoGalleryWidget__createLightBoxImage_anon(src));
    img = $.ImageElement_ImageElement(null, src, null);
    img.set$hidden(true);
    t1 = img.get$classes();
    $.getInterceptor$JSArray(t1).add$1(t1, "light-box-image");
    t1 = img.get$on().get$load();
    t2 = this.get$_onImgLoad();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = this._lightBox.get$children();
    $.getInterceptor$JSArray(t2).add$1(t2, img);
    return img;
  },
  _loadProxImages$0: function() {
    var nextUrl, prevUrl, t1, t2;
    nextUrl = $.PhotoGalleryWidget__getImageUrl(this._currImg.get$src(), 1);
    prevUrl = $.PhotoGalleryWidget__getImageUrl(this._currImg.get$src(), -1);
    if (this._nextImg == null) {
      this._nextImg = this._createLightBoxImage$1(nextUrl);
      t1 = this._lightBox.get$offsetWidth();
      t2 = $.S($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 10)) + "px";
      this._nextImg.get$style().set$left(t2);
    }
    if (this._prevImg == null) {
      this._prevImg = this._createLightBoxImage$1(prevUrl);
      t1 = this._lightBox.get$offsetWidth();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = $.S(10 - t1 + 80) + "px";
      this._prevImg.get$style().set$left(t2);
    }
  },
  _clearCache$0: function() {
    this._deleteImg$1(this._prevImg);
    this._prevImg = null;
    this._deleteImg$1(this._currImg);
    this._currImg = null;
    this._deleteImg$1(this._nextImg);
    this._nextImg = null;
  },
  _deleteImg$1: function(img) {
    var t1, t2;
    if (img == null)
      return;
    img.remove$0();
    t1 = img.get$on().get$load();
    t2 = this.get$_onImgLoad();
    $.getInterceptor$JSArray(t1).remove$1(t1, t2);
  },
  _onThumbClick$1: function(e) {
    var t1, t2;
    t1 = {};
    t1.originalSrc_0 = $.callTypeCast(e.get$target(), "is$ImageElement").get$src();
    t2 = t1.originalSrc_0;
    t1.originalSrc_0 = $.getInterceptor$JSString(t2).replaceAll$2(t2, ".jpg", "_original.jpg");
    this._clearCache$0();
    this._setLightBoxVisible$1(true);
    this._currImg = this._createLightBoxImage$1(t1.originalSrc_0);
    $.scoped(new $.PhotoGalleryWidget__onThumbClick_anon(t1));
  },
  get$_onThumbClick: function() {
    return new $.BoundClosure(this, "_onThumbClick$1");
  },
  _onImgLoad$1: function(e) {
    var img, t1, maxWidth, maxHeight, t2, scaleFactor, t3, top$;
    img = $.callTypeCast(e.get$target(), "is$ImageElement");
    if (img.get$parent() == null)
      return;
    t1 = this._lightBox.get$offsetWidth();
    maxWidth = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 80);
    t1 = this._lightBox.get$offsetHeight();
    maxHeight = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 80);
    if ($.eqB(img.get$width(), 0)) {
      img.set$width(400);
      img.set$height(400);
    } else {
      t1 = img.get$width();
      t1 = $.getInterceptor$JSNumber(maxWidth).operator$div$1(maxWidth, t1);
      t2 = img.get$height();
      scaleFactor = $.min(t1, $.getInterceptor$JSNumber(maxHeight).operator$div$1(maxHeight, t2));
      t1 = img.get$width();
      t1 = $.getInterceptor$JSNumber(t1).toDouble$0(t1);
      t1 = $.getInterceptor$JSNumber(t1).operator$mul$1(t1, scaleFactor);
      img.set$width($.getInterceptor$JSNumber(t1).toInt$0(t1));
      t3 = img.get$height();
      t3 = $.getInterceptor$JSNumber(t3).toDouble$0(t3);
      t3 = $.getInterceptor$JSNumber(t3).operator$mul$1(t3, scaleFactor);
      img.set$height($.getInterceptor$JSNumber(t3).toInt$0(t3));
    }
    t1 = $.getInterceptor$JSNumber(maxHeight).operator$div$1(maxHeight, 2);
    t2 = img.get$height();
    t2 = $.getInterceptor$JSNumber(t2).operator$div$1(t2, 2);
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    top$ = $.getInterceptor$JSNumber(t2).toInt$0(t2);
    t2 = $.S($.getInterceptor$JSNumber(top$).operator$add$1(top$, 40)) + "px";
    img.get$style().set$top(t2);
    this._setLeftPosition$1(img);
    if ($.eqB(img, this._currImg))
      this._loadProxImages$0();
    img.set$hidden(false);
  },
  get$_onImgLoad: function() {
    return new $.BoundClosure(this, "_onImgLoad$1");
  },
  _onLightBoxTransitionEnd$1: function(_) {
    var t1 = this._lightBox.get$classes();
    if ($.getInterceptor$JSStringJSArray(t1).contains$1(t1, "transparent") === true) {
      this._lightBox.set$hidden(true);
      this._clearCache$0();
    }
  },
  get$_onLightBoxTransitionEnd: function() {
    return new $.BoundClosure(this, "_onLightBoxTransitionEnd$1");
  },
  _onWindowResize$1: function(_) {
    var t1, buttonTop, t2;
    t1 = $.S(document.query$1("html").get$offsetWidth()) + "px";
    this._lightBox.get$style().set$width(t1);
    t1 = $.S(window.get$innerHeight()) + "px";
    this._lightBox.get$style().set$height(t1);
    t1 = window.get$innerHeight();
    buttonTop = $.getInterceptor$JSNumber(t1).operator$tdiv$1(t1, 2);
    t1 = document.queryAll$1(".light-box-nav-button");
    t2 = new $.PhotoGalleryWidget__onWindowResize_anon(buttonTop);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  get$_onWindowResize: function() {
    return new $.BoundClosure(this, "_onWindowResize$1");
  },
  _onWindowScroll$1: function(_) {
    var html, t1;
    html = document.query$1("html");
    t1 = $.S(window.get$scrollY()) + "px";
    this._lightBox.get$style().set$top(t1);
    t1 = $.S(html.get$scrollLeft()) + "px";
    this._lightBox.get$style().set$left(t1);
  },
  get$_onWindowScroll: function() {
    return new $.BoundClosure(this, "_onWindowScroll$1");
  },
  _onWindowKeyPress$1: function(e) {
    if (this._lightBox.get$hidden() === true)
      return;
    switch (e.get$keyCode()) {
      case 27:
        this._setLightBoxVisible$1(false);
        break;
      case 37:
        this._navPrev$0();
        break;
      case 39:
        this._navNext$0();
        break;
    }
  },
  get$_onWindowKeyPress: function() {
    return new $.BoundClosure(this, "_onWindowKeyPress$1");
  },
  _navNext$0: function() {
    this._deleteImg$1(this._prevImg);
    this._prevImg = this._currImg;
    this._currImg = this._nextImg;
    this._nextImg = null;
    this._setLeftPosition$1(this._prevImg);
    this._setLeftPosition$1(this._currImg);
    this._loadProxImages$0();
  },
  _navPrev$0: function() {
    this._deleteImg$1(this._nextImg);
    this._nextImg = this._currImg;
    this._currImg = this._prevImg;
    this._prevImg = null;
    this._setLeftPosition$1(this._currImg);
    this._setLeftPosition$1(this._nextImg);
    this._loadProxImages$0();
  },
  _setLeftPosition$1: function(img) {
    var t1, t2, centerPos, left;
    t1 = this._lightBox.get$offsetWidth();
    t1 = $.getInterceptor$JSNumber(t1).operator$div$1(t1, 2);
    t2 = img.get$width();
    t2 = $.getInterceptor$JSNumber(t2).operator$div$1(t2, 2);
    t2 = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2);
    centerPos = $.getInterceptor$JSNumber(t2).toInt$0(t2);
    if ($.eqB(img, this._currImg))
      left = centerPos;
    else if ($.eqB(img, this._prevImg)) {
      t1 = this._lightBox.get$offsetWidth();
      left = $.getInterceptor$JSNumber(centerPos).operator$sub$1(centerPos, t1);
    } else if ($.eqB(img, this._nextImg)) {
      t1 = this._lightBox.get$offsetWidth();
      left = $.getInterceptor$JSNumber(centerPos).operator$add$1(centerPos, t1);
    } else
      left = 0;
    t1 = $.S(left) + "px";
    img.get$style().set$left(t1);
  }
};

$$.MainWidget = {"": "Object;",
  decorate$0: function() {
    var t1, t2, mainContent;
    t1 = document.queryAll$1("#nav-bar li");
    t2 = new $.MainWidget_decorate_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
    t2 = document.queryAll$1(".page");
    t1 = new $.MainWidget_decorate_anon0();
    $.getInterceptor$JSArray(t2).forEach$1(t2, t1);
    document.query$1("#loading-overlay").set$hidden(true);
    mainContent = document.query$1("#main-content");
    mainContent.set$hidden(false);
    window.setTimeout$2(new $.MainWidget_decorate_anon1(mainContent), 0);
    t1 = window.get$on().get$hashChange();
    t2 = this.get$_navigateToHash();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    this._navigateToHash$1(null);
  },
  _navigateToHash$1: function(_) {
    var t1, hash, t2, defaultPageSelector;
    t1 = window.get$location().get$hash();
    hash = $.getInterceptor$JSString(t1).replaceAll$2(t1, "#", "");
    t1 = document.queryAll$1("#nav-bar li");
    t2 = new $.MainWidget__navigateToHash_anon(hash);
    if ($.getInterceptor$JSArray(t1).any$1(t1, t2) === true)
      return;
    if ($.getInterceptor$JSStringJSArray(hash).get$isEmpty(hash) !== true) {
      t1 = "#" + $.S(hash);
      t2 = !(document.query$1(t1) == null);
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      this._showPage$1(hash);
    else {
      t1 = document.query$1("#nav-bar").get$children();
      t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$dataAttributes();
      defaultPageSelector = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, "page-id");
      window.get$location().set$hash(defaultPageSelector);
    }
  },
  get$_navigateToHash: function() {
    return new $.BoundClosure(this, "_navigateToHash$1");
  },
  _showPage$1: function(pageSelector) {
    var activeEl, t1, t2, shownPage;
    $.scoped(new $.MainWidget__showPage_anon(pageSelector));
    activeEl = document.query$1("#nav-bar li.active");
    if (!(activeEl == null)) {
      t1 = activeEl.get$classes();
      $.getInterceptor$JSArray(t1).remove$1(t1, "active");
    }
    t1 = document.queryAll$1(".page");
    t2 = new $.MainWidget__showPage_anon0();
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
    t2 = document.queryAll$1("#nav-bar li");
    t1 = new $.MainWidget__showPage_anon1(pageSelector);
    $.getInterceptor$JSArray(t2).forEach$1(t2, t1);
    t1 = "#" + $.S(pageSelector);
    shownPage = document.query$1(t1);
    shownPage.set$hidden(false);
    window.scrollTo$2(0, 0);
    window.setTimeout$2(new $.MainWidget__showPage_anon2(shownPage), 0);
  },
  _onLinkClick$1: function(e) {
    var t1 = $.callTypeCast(e.get$target(), "is$Element").get$dataAttributes();
    t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "page-id");
    window.get$location().set$hash(t1);
  },
  get$_onLinkClick: function() {
    return new $.BoundClosure(this, "_onLinkClick$1");
  }
};

$$.AbstractWorkerEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.ApplicationCacheEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.BatteryManagerEvents = {"": "Events;_ptr"};

$$.BodyElementEvents = {"": "ElementEvents;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$hashChange: function() {
    return this.operator$index$1("hashchange");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  get$resize: function() {
    return this.operator$index$1("resize");
  }
};

$$.DedicatedWorkerContextEvents = {"": "WorkerContextEvents;_ptr"};

$$.DocumentEvents = {"": "ElementEvents;_ptr"};

$$._FrozenCssClassSet = {"": "CssClassSet;",
  writeClasses$1: function(s) {
    throw $.$$throw($.UnsupportedError$("frozen class set cannot be modified"));
  },
  readClasses$0: function() {
    return $.Set_Set();
  }
};

$$._ChildrenElementList = {"": "Object;_element,_childElements",
  toList$0: function() {
    var t1, t3, output, len, i, t2;
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.toList$0$bailout(1, t1);
    t3 = t1.length;
    output = $.List_List$fixedLength(t3, null);
    for (len = t1.length, i = 0; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        output = env3;
        len = env2;
        t3 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        output = $.List_List$fixedLength(t3.get$length(t1), null);
        len = t3.get$length(t1);
      case 2:
        var t1, t3, output, len, i, t2;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  contains$1: function(element) {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this._childElements, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  any$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function() {
    return this._element.firstElementChild == null;
  },
  get$length: function() {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    var t1, t2;
    t1 = this._element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.$$dom_replaceChild$2(value, t2[index]);
  },
  operator$indexSet$2$bailout: function(state0, index, value, t1, t2) {
    t1.$$dom_replaceChild$2(value, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, index));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    this._element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    this._element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    var t1 = this.toList$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  remove$1: function(object) {
    if (typeof object === "object" && object !== null && object.is$Element())
      if (object.parentNode === this)
        this._element.$$dom_removeChild$1(object);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    this._element.textContent = "";
  },
  removeAt$1: function(index) {
    var result = this.operator$index$1(index);
    if (!(result == null))
      this._element.$$dom_removeChild$1(result);
    return result;
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._element.$$dom_removeChild$1(result);
    return result;
  },
  get$last: function() {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(element) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if ($.eqB(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout2(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout2: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(newLength) {
    var t1 = this._nodeList;
    $.getInterceptor$JSArray(t1).set$length(t1, newLength);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    var t1 = this._nodeList;
    return $._FrozenElementList$_wrap($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    var t1 = this._nodeList;
    return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeAt$1: function(index) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function() {
    var t1 = this._nodeList;
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {"": "Object;_liblib1$_list,_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2, t3;
    t1 = this._index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(1, t1);
    nextIndex = t1 + 1;
    t1 = this._liblib1$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout1(2, t1, t2, t3, nextIndex);
    if (nextIndex < t3) {
      this._current = t1.operator$index$1(nextIndex);
      this._index = nextIndex;
      return true;
    }
    this._index = t2.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextIndex = env3;
        t3 = env2;
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._index;
      case 1:
        state0 = 0;
        nextIndex = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib1$_list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        var t1, nextIndex, t2, t3;
        state0 = 0;
        if ($.ltB(nextIndex, t3)) {
          this._current = t1.operator$index$1(nextIndex);
          this._index = nextIndex;
          return true;
        }
        this._index = t2.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._ElementCssClassSet = {"": "CssClassSet;_element",
  readClasses$0: function() {
    var s, classname, t1, t2, t3, trimmed;
    s = $.Set_Set();
    classname = this._element.className;
    for (t1 = $.getInterceptor$JSString(classname).split$1(classname, " "), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = $.getInterceptor$JSArray(s); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      trimmed = $.getInterceptor$JSString(t3).trim$0(t3);
      if ($.getInterceptor$JSStringJSArray(trimmed).get$isEmpty(trimmed) !== true)
        t2.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1;
    $.List_List$from(s);
    t1 = $.getInterceptor$JSArray(s).join$1(s, " ");
    this._element.className = t1;
  }
};

$$.ElementEvents = {"": "Events;_ptr",
  get$click: function() {
    return this.operator$index$1("click");
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  get$keyPress: function() {
    return this.operator$index$1("keypress");
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  },
  get$scroll: function() {
    return this.operator$index$1("scroll");
  },
  get$transitionEnd: function() {
    return this.operator$index$1("webkitTransitionEnd");
  }
};

$$.EventSourceEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  }
};

$$.Events = {"": "Object;_ptr",
  operator$index$1: function(type) {
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {"": "Object;_ptr,_type",
  add$2: function(listener, useCapture) {
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  }
};

$$.FileReaderEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  }
};

$$.FileWriterEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.HttpRequestEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  }
};

$$.HttpRequestUploadEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$load: function() {
    return this.operator$index$1("load");
  }
};

$$.InputElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaStreamEvents = {"": "Events;_ptr"};

$$.MediaStreamTrackEvents = {"": "Events;_ptr"};

$$.MessagePortEvents = {"": "Events;_ptr"};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function() {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._this.$$dom_removeChild$1(result);
    return result;
  },
  removeAt$1: function(index) {
    var result = this.operator$index$1(index);
    if (!(result == null))
      this._this.$$dom_removeChild$1(result);
    return result;
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.is$Node()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  clear$0: function() {
    this._this.textContent = "";
  },
  operator$indexSet$2: function(index, value) {
    this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
  },
  get$iterator: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  get$length: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  operator$index$1: function(index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout0(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout0: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.NotificationEvents = {"": "Events;_ptr",
  get$click: function() {
    return this.operator$index$1("click");
  },
  get$close: function() {
    return this.operator$index$1("close");
  },
  close$0: function() {
    return this.get$close().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.RtcDataChannelEvents = {"": "Events;_ptr",
  get$close: function() {
    return this.operator$index$1("close");
  },
  close$0: function() {
    return this.get$close().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  }
};

$$.RtcPeerConnectionEvents = {"": "Events;_ptr",
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  }
};

$$.SharedWorkerContextEvents = {"": "WorkerContextEvents;_ptr"};

$$.SpeechRecognitionEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$result: function() {
    return this.operator$index$1("result");
  }
};

$$.TextTrackEvents = {"": "Events;_ptr"};

$$.TextTrackCueEvents = {"": "Events;_ptr"};

$$.TextTrackListEvents = {"": "Events;_ptr"};

$$.WebSocketEvents = {"": "Events;_ptr",
  get$close: function() {
    return this.operator$index$1("close");
  },
  close$0: function() {
    return this.get$close().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$open: function() {
    return this.operator$index$1("open");
  },
  open$2: function(arg0, arg1) {
    return this.get$open().call$2(arg0, arg1);
  }
};

$$.WindowEvents = {"": "Events;_ptr",
  get$click: function() {
    return this.operator$index$1("click");
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$hashChange: function() {
    return this.operator$index$1("hashchange");
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  get$keyPress: function() {
    return this.operator$index$1("keypress");
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  },
  get$resize: function() {
    return this.operator$index$1("resize");
  },
  get$scroll: function() {
    return this.operator$index$1("scroll");
  },
  get$transitionEnd: function() {
    return this.operator$index$1("webkitTransitionEnd");
  }
};

$$.WorkerEvents = {"": "AbstractWorkerEvents;_ptr"};

$$.WorkerContextEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$._FrameSetElementEvents = {"": "ElementEvents;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$hashChange: function() {
    return this.operator$index$1("hashchange");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  get$resize: function() {
    return this.operator$index$1("resize");
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function() {
    for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.operator$index$1(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        keys = env3;
        len = env2;
        attributes = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, keys, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            keys.push(t1.operator$index$1(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$values$bailout(1, attributes);
    values = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push(attributes[i].get$value());
      }
    }
    return values;
  },
  get$values$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        values = env3;
        len = env2;
        attributes = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._element.attributes;
      case 1:
        state0 = 0;
        values = $.List_List(0);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, values, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            values.push(t1.operator$index$1(attributes, i).get$value());
        return values;
    }
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  is$Map: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.$$dom_hasAttribute$1(key);
  },
  operator$index$1: function(key) {
    return this._element.$$dom_getAttribute$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this._element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    var t1 = this.get$keys();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$._DataAttributeMap = {"": "Object;$$dom_attributes>",
  containsKey$1: function(key) {
    return this.$$dom_attributes.containsKey$1("data-" + $.S(key));
  },
  operator$index$1: function(key) {
    var t1, t2;
    t1 = this.$$dom_attributes;
    t2 = "data-" + $.S(key);
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
  },
  operator$indexSet$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.$$dom_attributes;
    t2 = "data-" + $.S(key);
    t3 = $.S(value);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, t3);
  },
  remove$1: function(key) {
    var t1, t2;
    t1 = this.$$dom_attributes;
    t2 = "data-" + $.S(key);
    return $.getInterceptor$JSArray(t1).remove$1(t1, t2);
  },
  clear$0: function() {
    var t1, t2, t3;
    for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = this.$$dom_attributes, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;)
      t3.remove$1(t2, "data-" + $.S(t1.get$current()));
  },
  forEach$1: function(f) {
    var t1, t2;
    t1 = this.$$dom_attributes;
    t2 = new $._DataAttributeMap_forEach_anon(this, f);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  get$keys: function() {
    var keys, t1, t2;
    keys = $.List_List(0);
    t1 = this.$$dom_attributes;
    t2 = new $._DataAttributeMap_keys_anon(this, keys);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
    return keys;
  },
  get$values: function() {
    var values, t1, t2;
    values = $.List_List(0);
    t1 = this.$$dom_attributes;
    t2 = new $._DataAttributeMap_values_anon(this, values);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
    return values;
  },
  get$length: function() {
    var t1 = this.get$keys();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  _matches$1: function(key) {
    return $.getInterceptor$JSString(key).startsWith$1(key, "data-");
  },
  is$Map: function() {
    return true;
  }
};

$$.CssClassSet = {"": "Object;",
  toString$0: function() {
    return $.Strings_join($.List_List$from(this.readClasses$0()), " ");
  },
  get$iterator: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  forEach$1: function(f) {
    var t1 = this.readClasses$0();
    $.getInterceptor$JSArray(t1).forEach$1(t1, f);
  },
  join$1: function(separator) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).join$1(t1, separator);
  },
  mappedBy$1: function(f) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).mappedBy$1(t1, f);
  },
  where$1: function(f) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).where$1(t1, f);
  },
  any$1: function(f) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).any$1(t1, f);
  },
  get$isEmpty: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  contains$1: function(value) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, value);
  },
  add$1: function(value) {
    this._modify$1(new $.CssClassSet_add_anon(value));
  },
  remove$1: function(value) {
    var s, result;
    if (!(typeof value === "string"))
      return false;
    s = this.readClasses$0();
    result = $.getInterceptor$JSArray(s).remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(iterable) {
    this._modify$1(new $.CssClassSet_addAll_anon(iterable));
  },
  get$last: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  toList$0: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).toList$0(t1);
  },
  clear$0: function() {
    this._modify$1(new $.CssClassSet_clear_anon());
  },
  _modify$1: function(f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  is$Collection: function() {
    return true;
  }
};

$$.KeyboardEventController = {"": "Object;_keyDownList,_callbacks,_type,_target,_ROMAN_ALPHABET_OFFSET,_keyUp,_keyDown,_keyPress",
  _KeyboardEventController$2: function(target, type) {
    this._callbacks = [];
    this._type = type;
    this._target = target;
    this._keyDown = this.get$processKeyDown();
    this._keyUp = this.get$processKeyUp();
    this._keyPress = this.get$processKeyPress();
  },
  _initializeAllEventListeners$0: function() {
    this._keyDownList = [];
    this._target.get$on().get$keyDown().add$2(this._keyDown, true);
    this._target.get$on().get$keyPress().add$2(this._keyPress, true);
    this._target.get$on().get$keyUp().add$2(this._keyUp, true);
  },
  add$1: function(callback) {
    var t1 = this._callbacks;
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      return this.add$1$bailout2(1, callback, t1);
    if (t1 === 0)
      this._initializeAllEventListeners$0();
    t1 = this._callbacks;
    $.getInterceptor$JSArray(t1).add$1(t1, callback);
  },
  add$1$bailout2: function(state0, callback, t1) {
    if ($.eqB(t1, 0))
      this._initializeAllEventListeners$0();
    t1 = this._callbacks;
    $.getInterceptor$JSArray(t1).add$1(t1, callback);
  },
  _dispatch$1: function(event$) {
    var t1;
    if ($.eqB(event$.get$type(), this._type))
      for (t1 = $.CONSTANT0.get$iterator($.List_List$from(this._callbacks)); t1.moveNext$0() === true;)
        t1.get$current().call$1(event$);
  },
  remove$1: function(callback) {
    var t1, index, t2;
    t1 = this._callbacks;
    index = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, callback);
    if (typeof index !== "number")
      return this.remove$1$bailout3(1, index);
    if (!(index === -1)) {
      t1 = this._callbacks;
      $.getInterceptor$JSArray(t1).removeAt$1(t1, index);
    }
    t1 = this._callbacks;
    t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof t1 !== "number")
      return this.remove$1$bailout3(2, t1);
    if (t1 === 0) {
      t1 = this._target.get$on().get$keyDown();
      t2 = this._keyDown;
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
      t2 = this._target.get$on().get$keyPress();
      t1 = this._keyPress;
      $.getInterceptor$JSArray(t2).remove$1(t2, t1);
      t1 = this._target.get$on().get$keyUp();
      t2 = this._keyUp;
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
    }
  },
  remove$1$bailout3: function(state0, env0) {
    switch (state0) {
      case 1:
        index = env0;
        break;
      case 2:
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._callbacks;
        index = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, callback);
      case 1:
        state0 = 0;
        if (!$.eqB(index, -1)) {
          t1 = this._callbacks;
          $.getInterceptor$JSArray(t1).removeAt$1(t1, index);
        }
        t1 = this._callbacks;
        t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        var t1, index, t2;
        state0 = 0;
        if ($.eqB(t1, 0)) {
          t1 = this._target.get$on().get$keyDown();
          t2 = this._keyDown;
          $.getInterceptor$JSArray(t1).remove$1(t1, t2);
          t2 = this._target.get$on().get$keyPress();
          t1 = this._keyPress;
          $.getInterceptor$JSArray(t2).remove$1(t2, t1);
          t1 = this._target.get$on().get$keyUp();
          t2 = this._keyUp;
          $.getInterceptor$JSArray(t1).remove$1(t1, t2);
        }
    }
  },
  get$_capsLockOn: function() {
    var t1, t2;
    t1 = this._keyDownList;
    t2 = new $.KeyboardEventController__capsLockOn_anon();
    return $.getInterceptor$JSArray(t1).any$1(t1, t2);
  },
  _determineKeyCodeForKeypress$1: function(event$) {
    var t1, t2, t3, t4, t5;
    t1 = this._keyDownList;
    t1 = $.getInterceptor$JSArray(t1).get$iterator(t1);
    t2 = this._ROMAN_ALPHABET_OFFSET;
    if (typeof t2 !== "number")
      return this._determineKeyCodeForKeypress$1$bailout(1, event$, t2, t1);
    for (; t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      if ($.eqB(t3.get$_shadowCharCode(), event$.get$charCode()))
        return t3.get$keyCode();
      if (event$.get$shiftKey() === true || this.get$_capsLockOn() === true) {
        t4 = event$.get$charCode();
        t5 = $.CONSTANT1.get$charCodes("A");
        if ($.geB(t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 0))) {
          t4 = event$.get$charCode();
          t5 = $.CONSTANT1.get$charCodes("Z");
          if ($.leB(t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 0))) {
            t4 = event$.get$charCode();
            t5 = $.eqB($.getInterceptor$JSNumber(t4).operator$add$1(t4, t2), t3.get$_shadowCharCode());
            t4 = t5;
          } else
            t4 = false;
        } else
          t4 = false;
      } else
        t4 = false;
      if (t4)
        return t3.get$keyCode();
    }
    return -1;
  },
  _determineKeyCodeForKeypress$1$bailout: function(state0, event$, t2, t1) {
    var t3, t4, t5;
    for (; t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      if ($.eqB(t3.get$_shadowCharCode(), event$.get$charCode()))
        return t3.get$keyCode();
      if (event$.get$shiftKey() === true || this.get$_capsLockOn() === true) {
        t4 = event$.get$charCode();
        t5 = $.CONSTANT1.get$charCodes("A");
        if ($.geB(t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 0))) {
          t4 = event$.get$charCode();
          t5 = $.CONSTANT1.get$charCodes("Z");
          if ($.leB(t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 0))) {
            t4 = event$.get$charCode();
            t5 = $.eqB($.getInterceptor$JSNumber(t4).operator$add$1(t4, t2), t3.get$_shadowCharCode());
            t4 = t5;
          } else
            t4 = false;
        } else
          t4 = false;
      } else
        t4 = false;
      if (t4)
        return t3.get$keyCode();
    }
    return -1;
  },
  _findCharCodeKeyDown$1: function(event$) {
    var t1, t2;
    if ($.eqB(event$.get$keyLocation(), 3))
      switch (event$.get$keyCode()) {
        case 96:
          return 48;
        case 97:
          return 49;
        case 98:
          return 50;
        case 99:
          return 51;
        case 100:
          return 52;
        case 101:
          return 53;
        case 102:
          return 54;
        case 103:
          return 55;
        case 104:
          return 56;
        case 105:
          return 57;
        case 106:
          return 42;
        case 107:
          return 43;
        case 109:
          return 45;
        case 110:
          return 46;
        case 111:
          return 47;
      }
    else if ($.geB(event$.get$keyCode(), 65) && $.leB(event$.get$keyCode(), 90)) {
      t1 = event$.get$keyCode();
      t2 = this._ROMAN_ALPHABET_OFFSET;
      return $.getInterceptor$JSNumber(t1).operator$add$1(t1, t2);
    }
    switch (event$.get$keyCode()) {
      case 186:
        return 59;
      case 187:
        return 61;
      case 188:
        return 44;
      case 189:
        return 45;
      case 190:
        return 46;
      case 191:
        return 47;
      case 192:
        return 96;
      case 219:
        return 91;
      case 220:
        return 92;
      case 221:
        return 93;
      case 222:
        return 39;
    }
    return event$.get$keyCode();
  },
  _firesKeyPressEvent$1: function(event$) {
    var t1, t2;
    t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
      t1 = window.get$navigator().get$userAgent();
      t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
      t1 = t2;
    } else
      t1 = false;
    if (!t1) {
      t1 = window.get$navigator().get$userAgent();
      if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
        t1 = window.get$navigator().get$userAgent();
        t2 = $.getInterceptor$JSString(t1).contains$2(t1, "WebKit", 0) === true;
        t1 = t2;
      } else
        t1 = false;
      t1 = !t1;
    } else
      t1 = false;
    if (t1)
      return true;
    t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSStringJSArray(t1).contains$1(t1, "Mac") === true && event$.get$altKey() === true)
      return $.KeyCode_isCharacterKey(event$.get$keyCode());
    if (event$.get$altKey() === true && event$.get$ctrlKey() !== true)
      return false;
    if (event$.get$shiftKey() !== true) {
      t1 = this._keyDownList;
      if (!$.eqB($.getInterceptor$JSArray(t1).get$last(t1).get$keyCode(), 17)) {
        t1 = this._keyDownList;
        if (!$.eqB($.getInterceptor$JSArray(t1).get$last(t1).get$keyCode(), 18)) {
          t1 = window.get$navigator().get$userAgent();
          if ($.getInterceptor$JSStringJSArray(t1).contains$1(t1, "Mac") === true) {
            t1 = this._keyDownList;
            t2 = $.eqB($.getInterceptor$JSArray(t1).get$last(t1).get$keyCode(), 91);
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = false;
    if (t1)
      return false;
    t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
      t1 = window.get$navigator().get$userAgent();
      t2 = $.getInterceptor$JSString(t1).contains$2(t1, "WebKit", 0) === true;
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      if (event$.get$ctrlKey() === true)
        if (event$.get$shiftKey() === true)
          t1 = $.eqB(event$.get$keyCode(), 220) || $.eqB(event$.get$keyCode(), 219) || $.eqB(event$.get$keyCode(), 221) || $.eqB(event$.get$keyCode(), 192) || $.eqB(event$.get$keyCode(), 186) || $.eqB(event$.get$keyCode(), 189) || $.eqB(event$.get$keyCode(), 187) || $.eqB(event$.get$keyCode(), 188) || $.eqB(event$.get$keyCode(), 190) || $.eqB(event$.get$keyCode(), 191) || $.eqB(event$.get$keyCode(), 192) || $.eqB(event$.get$keyCode(), 222);
        else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      return false;
    switch (event$.get$keyCode()) {
      case 13:
        t1 = window.get$navigator().get$userAgent();
        if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
          t1 = window.get$navigator().get$userAgent();
          t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
          t1 = t2;
        } else
          t1 = false;
        return !t1;
      case 27:
        t1 = window.get$navigator().get$userAgent();
        if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
          t1 = window.get$navigator().get$userAgent();
          t2 = $.getInterceptor$JSString(t1).contains$2(t1, "WebKit", 0) === true;
          t1 = t2;
        } else
          t1 = false;
        return !t1;
    }
    return $.KeyCode_isCharacterKey(event$.get$keyCode());
  },
  _normalizeKeyCodes$1: function(event$) {
    var t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSString(t1).contains$2(t1, "Firefox", 0) === true)
      switch (event$.get$keyCode()) {
        case 61:
          return 187;
        case 59:
          return 186;
        case 224:
          return 91;
        case 0:
          return 224;
      }
    return event$.get$keyCode();
  },
  processKeyDown$1: function(e) {
    var t1, event$, t2;
    t1 = this._keyDownList;
    if ($.gtB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
      t1 = this._keyDownList;
      if (!($.eqB($.getInterceptor$JSArray(t1).get$last(t1).get$keyCode(), 17) && e.get$ctrlKey() !== true)) {
        t1 = this._keyDownList;
        if (!($.eqB($.getInterceptor$JSArray(t1).get$last(t1).get$keyCode(), 18) && e.get$altKey() !== true)) {
          t1 = window.get$navigator().get$userAgent();
          if ($.getInterceptor$JSStringJSArray(t1).contains$1(t1, "Mac") === true) {
            t1 = this._keyDownList;
            t1 = $.eqB($.getInterceptor$JSArray(t1).get$last(t1).get$keyCode(), 91) && e.get$metaKey() !== true;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = false;
    if (t1)
      this._keyDownList = [];
    event$ = $.KeyEvent$(e);
    event$._shadowKeyCode = this._normalizeKeyCodes$1(event$);
    event$._shadowCharCode = this._findCharCodeKeyDown$1(event$);
    t1 = this._keyDownList;
    if ($.gtB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
      t1 = event$.get$keyCode();
      t2 = this._keyDownList;
      t1 = !$.eqB(t1, $.getInterceptor$JSArray(t2).get$last(t2).get$keyCode()) && this._firesKeyPressEvent$1(event$) !== true;
    } else
      t1 = false;
    if (t1)
      this.processKeyPress$1(event$);
    t1 = this._keyDownList;
    $.getInterceptor$JSArray(t1).add$1(t1, event$);
    this._dispatch$1(event$);
  },
  get$processKeyDown: function() {
    return new $.BoundClosure(this, "processKeyDown$1");
  },
  processKeyPress$1: function(event$) {
    var e, t1, t2;
    e = $.KeyEvent$(event$);
    t1 = window.get$navigator().get$userAgent();
    if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
      t1 = window.get$navigator().get$userAgent();
      t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      if ($.eqB(e.get$keyCode(), 13) || $.eqB(e.get$keyCode(), 27))
        e._shadowCharCode = 0;
      else
        e._shadowCharCode = e.get$keyCode();
    else {
      t1 = window.get$navigator().get$userAgent();
      if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) === true)
        e._shadowCharCode = $.KeyCode_isCharacterKey(e.get$keyCode()) ? e.get$keyCode() : 0;
    }
    e._shadowKeyCode = this._determineKeyCodeForKeypress$1(e);
    if (!(e.get$_shadowKeyIdentifier() == null) && $.get$KeyboardEventController__keyIdentifier().containsKey$1(e.get$_shadowKeyIdentifier()) === true) {
      t1 = $.get$KeyboardEventController__keyIdentifier();
      t2 = e.get$_shadowKeyIdentifier();
      e._shadowKeyCode = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
    }
    t1 = this._keyDownList;
    t2 = new $.KeyboardEventController_processKeyPress_anon();
    e._shadowAltKey = $.getInterceptor$JSArray(t1).any$1(t1, t2);
    this._dispatch$1(e);
  },
  get$processKeyPress: function() {
    return new $.BoundClosure(this, "processKeyPress$1");
  },
  processKeyUp$1: function(event$) {
    var t1, e, t2, toRemove;
    t1 = {};
    e = $.KeyEvent$(event$);
    t1.toRemove_0 = null;
    for (t2 = this._keyDownList, t2 = $.getInterceptor$JSArray(t2).get$iterator(t2); t2.moveNext$0() === true;) {
      toRemove = t2.get$current();
      if ($.eqB(toRemove.get$keyCode(), e.get$keyCode()))
        t1.toRemove_0 = toRemove;
    }
    if (!(t1.toRemove_0 == null)) {
      t2 = this._keyDownList;
      t1 = new $.KeyboardEventController_processKeyUp_anon(t1);
      t1 = $.getInterceptor$JSArray(t2).where$1(t2, t1);
      this._keyDownList = $.getInterceptor$JSArray(t1).toList$0(t1);
    } else {
      t1 = this._keyDownList;
      if ($.gtB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
        t1 = this._keyDownList;
        $.getInterceptor$JSArray(t1).removeLast$0(t1);
      }
    }
    this._dispatch$1(e);
  },
  get$processKeyUp: function() {
    return new $.BoundClosure(this, "processKeyUp$1");
  },
  KeyboardEventController$keydown$1: function(target) {
    this._KeyboardEventController$2(target, "keydown");
  }
};

$$._JsSerializer = {"": "_Serializer0;_nextFreeRefId,_visited",
  visitSendPortSync$1: function(x) {
    if (!!x.is$_JsSendPortSync)
      return ["sendport", "nativejs", x._id];
    if (!!x.is$_LocalSendPortSync)
      return this.visitLocalSendPortSync$1(x);
    if (!!x.is$_RemoteSendPortSync)
      return ["sendport", "dart", x._isolateId, x._portId];
    throw $.$$throw("Unknown port type " + $.S(x));
  },
  visitLocalSendPortSync$1: function(x) {
    return ["sendport", "dart", $.ReceivePortSync__isolateId(), x._receivePort._portId];
  },
  visitSendPort$1: function(x) {
    throw $.$$throw($.UnimplementedError$("Asynchronous send port not yet implemented."));
  }
};

$$._JsDeserializer = {"": "_Deserializer0;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, tag;
    t1 = $.getInterceptor$JSStringJSArray(x);
    tag = t1.operator$index$1(x, 1);
    switch (tag) {
      case "nativejs":
        return $._JsSendPortSync$(t1.operator$index$1(x, 2));
      case "dart":
        return $.ReceivePortSync__lookup(t1.operator$index$1(x, 2), t1.operator$index$1(x, 3));
      default:
        throw $.$$throw("Illegal SendPortSync type: " + $.S(tag));
    }
  }
};

$$._JsSendPortSync = {"": "Object;_id",
  callSync$1: function(message) {
    var serialized, result;
    serialized = $._JsSerializer$().traverse$1(message);
    result = ReceivePortSync.dispatchCall(this._id, serialized);
    return $._JsDeserializer$().deserialize$1(result);
  },
  operator$eq$1: function(other) {
    return typeof other === "object" && other !== null && !!other.is$_JsSendPortSync && $.eqB(this._id, other._id);
  },
  get$hashCode: function() {
    return this._id;
  },
  is$_JsSendPortSync: true,
  is$SendPortSync: true
};

$$._RemoteSendPortSync = {"": "Object;_isolateId,_portId>",
  callSync$1: function(message) {
    var serialized, result;
    serialized = $._JsSerializer$().traverse$1(message);
    result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
    return $._JsDeserializer$().deserialize$1(result);
  },
  operator$eq$1: function(other) {
    var t1;
    if (typeof other === "object" && other !== null && !!other.is$_RemoteSendPortSync)
      t1 = $.eqB(this._isolateId, other._isolateId) && $.eqB(this._portId, other._portId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = this._isolateId;
    t2 = this._portId;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t2 = 16 + t2;
    return $.getInterceptor$JSNumber(t1).operator$shr$1(t1, t2);
  },
  is$_RemoteSendPortSync: true,
  is$SendPortSync: true
};

$$._LocalSendPortSync = {"": "Object;_receivePort",
  callSync$1: function(message) {
    var t1, copy, result;
    t1 = $._JsSerializer$().traverse$1(message);
    copy = $._JsDeserializer$().deserialize$1(t1);
    result = this._receivePort._callback$1(copy);
    t1 = $._JsSerializer$().traverse$1(result);
    return $._JsDeserializer$().deserialize$1(t1);
  },
  operator$eq$1: function(other) {
    return typeof other === "object" && other !== null && !!other.is$_LocalSendPortSync && $.eqB(this._receivePort, other._receivePort);
  },
  get$hashCode: function() {
    var t1 = this._receivePort;
    return $.getInterceptor(t1).get$hashCode(t1);
  },
  is$_LocalSendPortSync: true,
  is$SendPortSync: true
};

$$.ReceivePortSync = {"": "Object;_portId>,_callback,_listener",
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  get$_listenerName: function() {
    return $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId);
  },
  receive$1: function(callback) {
    var t1, t2;
    this._callback = callback;
    if (this._listener == null) {
      this._listener = new $.ReceivePortSync_receive_anon(this);
      t1 = window.get$on();
      t2 = this.get$_listenerName();
      t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
      t1 = this._listener;
      $.getInterceptor$JSArray(t2).add$1(t2, t1);
    }
  },
  close$0: function() {
    var t1, t2;
    t1 = $.ReceivePortSync__portMap;
    t2 = this._portId;
    $.getInterceptor$JSArray(t1).remove$1(t1, t2);
    if (!(this._listener == null)) {
      t1 = window.get$on();
      t2 = this.get$_listenerName();
      t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
      t1 = this._listener;
      $.getInterceptor$JSArray(t2).remove$1(t2, t1);
    }
  },
  toSendPort$0: function() {
    return $._LocalSendPortSync$_internal(this);
  },
  ReceivePortSync$0: function() {
    var t1, t2;
    if ($.ReceivePortSync__portIdCount == null) {
      $.ReceivePortSync__portIdCount = 0;
      $.ReceivePortSync__portMap = $.Map_Map();
    }
    t1 = $.ReceivePortSync__portIdCount;
    $.ReceivePortSync__portIdCount = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    this._portId = t1;
    t1 = $.ReceivePortSync__portMap;
    t2 = this._portId;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, this);
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  operator$index$1: function(object) {
    return;
  },
  operator$indexSet$2: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser0 = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      t1.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.is$List()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.is$Map())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Serializer0 = {"": "_MessageTraverser0;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.operator$index$1(list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1.operator$indexSet$2(list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys, t2;
    t1 = this._visited;
    copyId = t1.operator$index$1(map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1.operator$indexSet$2(map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1($.getInterceptor$JSArray(t1).toList$0(t1));
    t2 = map.get$values();
    return ["map", id, keys, this._serializeList$1($.getInterceptor$JSArray(t2).toList$0(t2))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List$fixedLength(len, null);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        t1 = env1;
        list = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, len, result, i, t2;
        state0 = 0;
        result = $.List_List$fixedLength(len, null);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer0 = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap_HashMap();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
    t1 = this._deserialized;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    dartList = t1.operator$index$1(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        id = env1;
        dartList = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        dartList = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        dartList = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
        t2 = $.getInterceptor$JSStringJSArray(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, id, dartList, t2, len, i;
        state0 = 0;
        for (i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(dartList, i, this._deserializeHelper$1(t2.operator$index$1(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map();
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
    keys = t1.operator$index$1(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.operator$index$1(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, values, result, keys);
    len = keys.length;
    for (t1 = $.getInterceptor$JSArray(result), i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      t1.operator$indexSet$2(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env3;
        keys = env2;
        result = env1;
        x = env0;
        break;
      case 2:
        keys = env2;
        result = env1;
        values = env0;
        break;
      case 3:
        keys = env4;
        result = env3;
        len = env2;
        t3 = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        result = $.Map_Map();
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
        keys = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        values = t1.operator$index$1(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(keys);
        len = t3.get$length(keys);
      case 3:
        var result, t1, id, t2, keys, x, values, t3, len, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(values), t2 = $.getInterceptor$JSArray(result), i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(result, this._deserializeHelper$1(t3.operator$index$1(keys, i)), this._deserializeHelper$1(t1.operator$index$1(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$location: function() {
    return $._LocationCrossFrame__createSafe(this._window.location);
  },
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$._LocationCrossFrame = {"": "Object;_location>"};

$$.KeyEvent = {"": "Object;_parent,_shadowAltKey,_shadowCharCode>,_shadowKeyCode",
  get$keyCode: function() {
    return this._shadowKeyCode;
  },
  get$charCode: function() {
    return $.eqB(this.get$type(), "keypress") ? this._shadowCharCode : 0;
  },
  get$altKey: function() {
    return this._shadowAltKey;
  },
  get$_realKeyCode: function() {
    return this._parent.keyCode;
  },
  get$_realCharCode: function() {
    return this._parent.charCode;
  },
  get$_realAltKey: function() {
    return this._parent.altKey;
  },
  get$ctrlKey: function() {
    return this._parent.get$ctrlKey();
  },
  get$detail: function() {
    return this._parent.get$detail();
  },
  get$keyLocation: function() {
    return this._parent.get$keyLocation();
  },
  get$metaKey: function() {
    return this._parent.get$metaKey();
  },
  get$shiftKey: function() {
    return this._parent.get$shiftKey();
  },
  get$type: function() {
    return this._parent.get$type();
  },
  get$_shadowKeyIdentifier: function() {
    return this._parent.keyIdentifier;
  },
  get$$$dom_keyCode: function() {
    return this.get$keyCode();
  },
  get$target: function() {
    return this._parent.get$target();
  },
  KeyEvent$1: function(parent$) {
    this._parent = parent$;
    this._shadowAltKey = this.get$_realAltKey();
    this._shadowCharCode = this.get$_realCharCode();
    this._shadowKeyCode = this.get$_realKeyCode();
  }
};

$$._LocationWrapper = {"": "Object;_ptr",
  get$hash: function() {
    return $._LocationWrapper__get(this._ptr, "hash");
  },
  set$hash: function(value) {
    $._LocationWrapper__set(this._ptr, "hash", value);
  },
  toString$0: function() {
    return this._ptr.toString();
  },
  is$Location: function() {
    return true;
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, nextPosition, t1);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env1;
        t1 = env0;
        break;
      case 3:
        t1 = env1;
        nextPosition = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
      case 3:
        var t1, nextPosition;
        if (state0 === 3 || state0 === 0 && $.ltB(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1, t2;
    t1 = this._childNodes;
    t2 = new $.FilteredElementList__filtered_anon();
    return $.List_List$from($.getInterceptor$JSArray(t1).where$1(t1, t2));
  },
  forEach$1: function(f) {
    var t1 = this.get$_filtered();
    $.getInterceptor$JSArray(t1).forEach$1(t1, f);
  },
  operator$indexSet$2: function(index, value) {
    this.operator$index$1(index).replaceWith$1(value);
  },
  set$length: function(newLength) {
    var len = $.getInterceptor$JSStringJSArray(this).get$length(this);
    if ($.geB(newLength, len))
      return;
    else if ($.ltB(newLength, 0))
      throw $.$$throw($.ArgumentError$("Invalid list length"));
    this.removeRange$2(newLength, $.getInterceptor$JSNumber(len).operator$sub$1(len, newLength));
  },
  join$1: function(separator) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).join$1(t1, separator);
  },
  add$1: function(value) {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).add$1(t1, value);
  },
  addAll$1: function(iterable) {
    var t1, t2, t3;
    for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable), t2 = this._childNodes, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;)
      t3.add$1(t2, t1.get$current());
  },
  addLast$1: function(value) {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).add$1(t1, value);
  },
  contains$1: function(element) {
    var t1, t2;
    if (typeof element === "object" && element !== null && element.is$Element()) {
      t1 = this._childNodes;
      t2 = $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element) === true;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  removeRange$2: function(start, rangeLength) {
    var t1, t2;
    t1 = this.get$_filtered();
    t1 = $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
    t2 = new $.FilteredElementList_removeRange_anon();
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  clear$0: function() {
    var t1 = this._childNodes;
    $.getInterceptor$JSArray(t1).clear$0(t1);
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      result.remove$0();
    return result;
  },
  mappedBy$1: function(f) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).mappedBy$1(t1, f);
  },
  where$1: function(f) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).where$1(t1, f);
  },
  removeAt$1: function(index) {
    var result = this.operator$index$1(index);
    result.remove$0();
    return result;
  },
  remove$1: function(element) {
    var t1, i, t2, indexElement;
    if (!(typeof element === "object" && element !== null && element.is$Element()))
      return;
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = 0;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.remove$1$bailout0(1, element, t2, i);
      if (!(i < t2))
        break;
      indexElement = this.operator$index$1(i);
      if (indexElement === element) {
        indexElement.remove$0();
        return;
      }
      ++i;
    }
  },
  remove$1$bailout0: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        i = env2;
        t2 = env1;
        element = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (!(typeof element === "object" && element !== null && element.is$Element()))
          return;
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = 0;
      case 1:
        var t1, i, t2, element, indexElement;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 1:
                state0 = 0;
                if (!$.ltB(i, t2))
                  break L0;
                indexElement = this.operator$index$1(i);
                if (indexElement === element) {
                  indexElement.remove$0();
                  return;
                }
                ++i;
            }
    }
  },
  any$1: function(f) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).any$1(t1, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this.get$_filtered();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout1(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout1: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  get$iterator: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  getRange$2: function(start, rangeLength) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
  },
  indexOf$2: function(element, start) {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = this.get$_filtered();
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.DatabaseEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.OpenDBRequestEvents = {"": "RequestEvents;_ptr"};

$$.RequestEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.TransactionEvents = {"": "Events;_ptr",
  get$complete: function() {
    return this.operator$index$1("complete");
  },
  complete$1: function(arg0) {
    return this.get$complete().call$1(arg0);
  },
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.VersionChangeRequestEvents = {"": "RequestEvents;_ptr"};

$$.JsonUnsupportedObjectError = {"": "Object;unsupportedObject,cause>",
  toString$0: function() {
    if (!(this.cause == null))
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$.JsonListener = {"": "Object;",
  handleString$1: function(value) {
  },
  handleNumber$1: function(value) {
  },
  handleBool$1: function(value) {
  },
  handleNull$0: function() {
  },
  beginObject$0: function() {
  },
  propertyName$0: function() {
  },
  propertyValue$0: function() {
  },
  endObject$0: function() {
  },
  beginArray$0: function() {
  },
  arrayElement$0: function() {
  },
  endArray$0: function() {
  },
  fail$3: function(source, position, message) {
  }
};

$$.BuildJsonListener = {"": "JsonListener;stack,currentContainer,key>,value=",
  pushContainer$0: function() {
    var t1 = this.currentContainer;
    if (typeof t1 === "object" && t1 !== null && t1.is$Map())
      this.stack.push(this.key);
    this.stack.push(this.currentContainer);
  },
  popContainer$0: function() {
    var t1, t2;
    this.value = this.currentContainer;
    t1 = this.stack;
    if (0 >= t1.length)
      throw $.ioore(0);
    this.currentContainer = t1.pop();
    t2 = this.currentContainer;
    if (typeof t2 === "object" && t2 !== null && t2.is$Map()) {
      if (0 >= t1.length)
        throw $.ioore(0);
      this.key = t1.pop();
    }
  },
  handleString$1: function(value) {
    this.value = value;
  },
  handleNumber$1: function(value) {
    this.value = value;
  },
  handleBool$1: function(value) {
    this.value = value;
  },
  handleNull$0: function() {
    this.value = this.value;
  },
  beginObject$0: function() {
    this.pushContainer$0();
    this.currentContainer = $.makeLiteralMap([]);
  },
  propertyName$0: function() {
    this.key = this.value;
    this.value = null;
  },
  propertyValue$0: function() {
    var map, t1, t2;
    map = this.currentContainer;
    t1 = this.key;
    t2 = this.value;
    $.getInterceptor$JSArray(map).operator$indexSet$2(map, t1, t2);
    this.value = null;
    this.key = null;
  },
  endObject$0: function() {
    this.popContainer$0();
  },
  beginArray$0: function() {
    this.pushContainer$0();
    this.currentContainer = [];
  },
  arrayElement$0: function() {
    var list, t1;
    list = this.currentContainer;
    t1 = this.value;
    $.getInterceptor$JSArray(list).add$1(list, t1);
    this.value = null;
  },
  endArray$0: function() {
    this.popContainer$0();
  },
  get$result: function() {
    return this.value;
  }
};

$$.ReviverJsonListener = {"": "BuildJsonListener;reviver,stack,currentContainer,key,value",
  reviver$2: function(arg0, arg1) {
    return this.reviver.call$2(arg0, arg1);
  },
  arrayElement$0: function() {
    var list = this.currentContainer;
    this.value = this.reviver$2($.getInterceptor$JSStringJSArray(list).get$length(list), this.value);
    $.BuildJsonListener.prototype.arrayElement$0.call(this);
  },
  propertyValue$0: function() {
    this.value = this.reviver$2(this.key, this.value);
    $.BuildJsonListener.prototype.propertyValue$0.call(this);
  },
  get$result: function() {
    return this.reviver$2("", this.value);
  }
};

$$.JsonParser = {"": "Object;source>,listener>",
  parse$0: function() {
    var states, t1, length$, t2, t3, state, position, char$, t4, position0;
    states = [];
    t1 = this.source;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    for (t2 = $.getInterceptor$JSString(t1), t3 = this.listener, state = 0, position = 0; $.ltB(position, length$);) {
      char$ = t2.charCodeAt$1(t1, position);
      switch (char$) {
        case 32:
        case 13:
        case 10:
        case 9:
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          break;
        case 34:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 8), 0))
            this.fail$1(position);
          position0 = this.parseString$1($.getInterceptor$JSNumber(position).operator$add$1(position, 1));
          state = t4.operator$or$1(state, 28);
          position = position0;
          break;
        case 91:
          if (!$.eqB($.getInterceptor$JSNumber(state).operator$and$1(state, 4), 0))
            this.fail$1(position);
          t3.beginArray$0();
          states.push(state);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          state = 1;
          break;
        case 123:
          if (!$.eqB($.getInterceptor$JSNumber(state).operator$and$1(state, 4), 0))
            this.fail$1(position);
          t3.beginObject$0();
          states.push(state);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          state = 6;
          break;
        case 110:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseNull$1(position);
          state = t4.operator$or$1(state, 28);
          break;
        case 102:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseFalse$1(position);
          state = t4.operator$or$1(state, 28);
          break;
        case 116:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseTrue$1(position);
          state = t4.operator$or$1(state, 28);
          break;
        case 58:
          if (!$.eqB(state, 30))
            this.fail$1(position);
          t3.propertyName$0();
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          state = 19;
          break;
        case 44:
          if ($.eqB(state, 31)) {
            t3.propertyValue$0();
            position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
            state = 22;
          } else if ($.eqB(state, 29)) {
            t3.arrayElement$0();
            position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
            state = 17;
          } else
            this.fail$1(position);
          break;
        case 93:
          if ($.eqB(state, 1))
            t3.endArray$0();
          else if ($.eqB(state, 29)) {
            t3.arrayElement$0();
            t3.endArray$0();
          } else
            this.fail$1(position);
          if (0 >= states.length)
            throw $.ioore(0);
          t4 = states.pop();
          state = $.getInterceptor$JSNumber(t4).operator$or$1(t4, 28);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          break;
        case 125:
          if ($.eqB(state, 6))
            t3.endObject$0();
          else if ($.eqB(state, 31)) {
            t3.propertyValue$0();
            t3.endObject$0();
          } else
            this.fail$1(position);
          if (0 >= states.length)
            throw $.ioore(0);
          t4 = states.pop();
          state = $.getInterceptor$JSNumber(t4).operator$or$1(t4, 28);
          position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
          break;
        default:
          t4 = $.getInterceptor$JSNumber(state);
          if (!$.eqB(t4.operator$and$1(state, 4), 0))
            this.fail$1(position);
          position = this.parseNumber$2(char$, position);
          state = t4.operator$or$1(state, 28);
          break;
      }
    }
    if (!$.eqB(state, 28))
      this.fail$1(position);
  },
  parseTrue$1: function(position) {
    var t1, t2, t3, t5;
    if (typeof position !== "number")
      return this.parseTrue$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(2, position, t1, t3);
    t5 = position + 4;
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(3, position, $.CONSTANT5, t2, t1, t3);
    if (t3 === 114) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseTrue$1$bailout(4, position, $.CONSTANT5, t2, t1, t3);
      if (t3 === 117) {
        t1 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t1 !== "number")
          return this.parseTrue$1$bailout(5, position, $.CONSTANT5, t1);
        t3 = !(t1 === 101);
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleBool$1(true);
    return t5;
  },
  parseTrue$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        position = env0;
        break;
      case 2:
        t2 = env2;
        t1 = env1;
        position = env0;
        break;
      case 3:
        t2 = env4;
        t1 = env3;
        t3 = env2;
        t4 = env1;
        position = env0;
        break;
      case 4:
        t2 = env4;
        t1 = env3;
        t3 = env2;
        t4 = env1;
        position = env0;
        break;
      case 5:
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(position);
        if ($.ltB(t2, t4.operator$add$1(position, 4)))
          this.fail$2(position, "Unexpected identifier");
        t2 = t4.operator$add$1(position, 1);
        t3 = $.getInterceptor$JSString(t1);
        t2 = t3.charCodeAt$1(t1, t2);
      case 3:
        state0 = 0;
      default:
        var position, t1, t2, t4, t3;
        if (state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t2, 114))
          switch (state0) {
            case 0:
              t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 2));
            case 4:
              state0 = 0;
            case 5:
              if (state0 === 5 || state0 === 0 && $.eqB(t2, 117))
                switch (state0) {
                  case 0:
                    t1 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 3));
                  case 5:
                    state0 = 0;
                    t3 = !$.eqB(t1, 101);
                    t1 = t3;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleBool$1(true);
        return t4.operator$add$1(position, 4);
    }
  },
  parseFalse$1: function(position) {
    var t1, t2, t3, t5;
    if (typeof position !== "number")
      return this.parseFalse$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(2, position, t1, t3);
    t5 = position + 5;
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(3, position, t1, $.CONSTANT5, t3, t2);
    if (t3 === 97) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseFalse$1$bailout(4, position, t1, $.CONSTANT5, t3, t2);
      if (t3 === 108) {
        t3 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t3 !== "number")
          return this.parseFalse$1$bailout(5, position, t1, $.CONSTANT5, t3, t2);
        if (t3 === 115) {
          t1 = t2.charCodeAt$1(t1, position + 4);
          if (typeof t1 !== "number")
            return this.parseFalse$1$bailout(6, position, $.CONSTANT5, t1);
          t3 = !(t1 === 101);
          t1 = t3;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleBool$1(false);
    return t5;
  },
  parseFalse$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        position = env0;
        break;
      case 2:
        t2 = env2;
        t1 = env1;
        position = env0;
        break;
      case 3:
        t3 = env4;
        t2 = env3;
        t4 = env2;
        t1 = env1;
        position = env0;
        break;
      case 4:
        t3 = env4;
        t2 = env3;
        t4 = env2;
        t1 = env1;
        position = env0;
        break;
      case 5:
        t3 = env4;
        t2 = env3;
        t4 = env2;
        t1 = env1;
        position = env0;
        break;
      case 6:
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(position);
        if ($.ltB(t2, t4.operator$add$1(position, 5)))
          this.fail$2(position, "Unexpected identifier");
        t2 = t4.operator$add$1(position, 1);
        t3 = $.getInterceptor$JSString(t1);
        t2 = t3.charCodeAt$1(t1, t2);
      case 3:
        state0 = 0;
      default:
        var position, t1, t2, t4, t3;
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t2, 97))
          switch (state0) {
            case 0:
              t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 2));
            case 4:
              state0 = 0;
            default:
              if (state0 === 6 || state0 === 5 || state0 === 0 && $.eqB(t2, 108))
                switch (state0) {
                  case 0:
                    t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 3));
                  case 5:
                    state0 = 0;
                  case 6:
                    if (state0 === 6 || state0 === 0 && $.eqB(t2, 115))
                      switch (state0) {
                        case 0:
                          t1 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 4));
                        case 6:
                          state0 = 0;
                          t3 = !$.eqB(t1, 101);
                          t1 = t3;
                      }
                    else
                      t1 = true;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleBool$1(false);
        return t4.operator$add$1(position, 5);
    }
  },
  parseNull$1: function(position) {
    var t1, t2, t3, t5;
    if (typeof position !== "number")
      return this.parseNull$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(2, position, t1, t3);
    t5 = position + 4;
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(3, position, $.CONSTANT5, t1, t3, t2);
    if (t3 === 117) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseNull$1$bailout(4, position, $.CONSTANT5, t1, t3, t2);
      if (t3 === 108) {
        t1 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t1 !== "number")
          return this.parseNull$1$bailout(5, position, $.CONSTANT5, t1);
        t3 = !(t1 === 108);
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleNull$0();
    return t5;
  },
  parseNull$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        position = env0;
        break;
      case 2:
        t2 = env2;
        t1 = env1;
        position = env0;
        break;
      case 3:
        t3 = env4;
        t2 = env3;
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
      case 4:
        t3 = env4;
        t2 = env3;
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
      case 5:
        t1 = env2;
        t4 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      case 2:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(position);
        if ($.ltB(t2, t4.operator$add$1(position, 4)))
          this.fail$2(position, "Unexpected identifier");
        t2 = t4.operator$add$1(position, 1);
        t3 = $.getInterceptor$JSString(t1);
        t2 = t3.charCodeAt$1(t1, t2);
      case 3:
        state0 = 0;
      default:
        var position, t1, t2, t4, t3;
        if (state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t2, 117))
          switch (state0) {
            case 0:
              t2 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 2));
            case 4:
              state0 = 0;
            case 5:
              if (state0 === 5 || state0 === 0 && $.eqB(t2, 108))
                switch (state0) {
                  case 0:
                    t1 = t3.charCodeAt$1(t1, t4.operator$add$1(position, 3));
                  case 5:
                    state0 = 0;
                    t3 = !$.eqB(t1, 108);
                    t1 = t3;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleNull$0();
        return t4.operator$add$1(position, 4);
    }
  },
  parseString$1: function(position) {
    var t1, t2, t3, t4, position0, char$, firstEscape, chars, hexStart, value, i, t5, result;
    t1 = this.source;
    t2 = $.getInterceptor$JSString(t1);
    t3 = $.getInterceptor$JSNumber(position);
    t4 = $.getInterceptor$JSStringJSArray(t1);
    position0 = position;
    do {
      if ($.eqB(position0, t4.get$length(t1)))
        this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
      char$ = t2.charCodeAt$1(t1, position0);
      if ($.eqB(char$, 34)) {
        this.listener.handleString$1(t2.substring$2(t1, position, position0));
        return $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
      }
      if ($.ltB(char$, 32))
        this.fail$2(position0, "Control character in string");
      position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
    } while (!$.eqB(char$, 92));
    firstEscape = $.getInterceptor$JSNumber(position0).operator$sub$1(position0, 1);
    chars = [];
    for (; true;) {
      if ($.eqB(position0, t4.get$length(t1)))
        this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
      char$ = t2.charCodeAt$1(t1, position0);
      switch (char$) {
        case 98:
          char$ = 8;
          break;
        case 102:
          char$ = 12;
          break;
        case 110:
          char$ = 10;
          break;
        case 114:
          char$ = 13;
          break;
        case 116:
          char$ = 9;
          break;
        case 47:
        case 92:
        case 34:
          break;
        case 117:
          hexStart = $.getInterceptor$JSNumber(position0).operator$sub$1(position0, 1);
          for (value = 0, i = 0; i < 4; ++i) {
            position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
            if ($.eqB(position0, t4.get$length(t1)))
              this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
            char$ = t2.charCodeAt$1(t1, position0);
            char$ = $.getInterceptor$JSNumber(char$).operator$sub$1(char$, 48);
            if ($.ltB(char$, 0))
              this.fail$2(hexStart, "Invalid unicode escape");
            if ($.ltB(char$, 10)) {
              t5 = value * 16;
              if (typeof char$ !== "number")
                throw $.iae(char$);
              value = t5 + char$;
            } else {
              t5 = $.getInterceptor$JSNumber(char$).operator$or$1(char$, 32);
              char$ = $.getInterceptor$JSNumber(t5).operator$sub$1(t5, 49);
              if ($.ltB(char$, 0) || $.gtB(char$, 5))
                this.fail$2(hexStart, "Invalid unicode escape");
              t5 = value * 16;
              if (typeof char$ !== "number")
                throw $.iae(char$);
              value = t5 + char$ + 10;
            }
          }
          char$ = value;
          break;
        default:
          if ($.ltB(char$, 32))
            this.fail$2(position0, "Control character in string");
          this.fail$2(position0, "Unrecognized string escape");
      }
      do {
        chars.push(char$);
        position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
        if ($.eqB(position0, t4.get$length(t1)))
          this.fail$2(t3.operator$sub$1(position, 1), "Unterminated string");
        char$ = t2.charCodeAt$1(t1, position0);
        if ($.eqB(char$, 34)) {
          result = $.String_String$fromCharCodes(chars);
          if ($.ltB(position, firstEscape))
            result = $.S(t2.substring$2(t1, position, firstEscape)) + $.S(result);
          this.listener.handleString$1(result);
          return $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
        }
        if ($.ltB(char$, 32))
          this.fail$2(position0, "Control character in string");
      } while (!$.eqB(char$, 92));
      position0 = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
    }
  },
  parseNumber$2: function(char$, position) {
    var t1, t2, t3, length$, position0, t4;
    t1 = {};
    if (typeof char$ !== "number")
      return this.parseNumber$2$bailout(1, char$, position, t1);
    if (typeof position !== "number")
      return this.parseNumber$2$bailout(1, char$, position, t1);
    t2 = this.source;
    t3 = $.getInterceptor$JSStringJSArray(t2);
    length$ = t3.get$length(t2);
    t1.isDouble_0 = false;
    if (char$ === 45) {
      position0 = position + 1;
      if (position0 === length$)
        this.fail$2(position0, "Missing expected digit");
      char$ = t3.charCodeAt$1(t2, position0);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(2, t2, t1, position0, position, length$, char$);
    } else
      position0 = position;
    if (char$ < 48 || char$ > 57)
      this.fail$2(position0, "Missing expected digit");
    t4 = new $.JsonParser_parseNumber_handleLiteral(t1, this, position);
    if (char$ === 48) {
      position = position0 + 1;
      if (position === length$)
        return t4.call$1(position);
      char$ = t3.charCodeAt$1(t2, position);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(3, position, t2, t1, length$, t4, char$);
      if (48 <= char$ && char$ <= 57)
        this.fail$1(position);
    } else {
      position = position0;
      do {
        ++position;
        if (position === length$)
          return t4.call$1(position);
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(4, t2, t1, char$, t3, position, length$, t4);
      } while (48 <= char$ && char$ <= 57);
    }
    if (char$ === 46) {
      t1.isDouble_0 = true;
      ++position;
      if (position === length$)
        this.fail$2(position, "Missing expected digit");
      char$ = t3.charCodeAt$1(t2, position);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(5, t2, t1, position, length$, t4, t3, char$);
      if (char$ < 48 || char$ > 57)
        this.fail$1(position);
      do {
        ++position;
        if (position === length$)
          return t4.call$1(position);
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(6, t2, t1, char$, length$, position, t4, t3);
      } while (48 <= char$ && char$ <= 57);
    }
    if (char$ === 101 || char$ === 69) {
      t1.isDouble_0 = true;
      ++position;
      if (position === length$)
        this.fail$2(position, "Missing expected digit");
      char$ = t3.charCodeAt$1(t2, position);
      if (typeof char$ !== "number")
        return this.parseNumber$2$bailout(7, t2, position, length$, t4, t3, char$);
      if (char$ === 43 || char$ === 45) {
        ++position;
        if (position === length$)
          this.fail$2(position, "Missing expected digit");
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(8, t2, length$, t4, char$, t3, position);
      }
      if (char$ < 48 || char$ > 57)
        this.fail$2(position, "Missing expected digit");
      do {
        ++position;
        if (position === length$)
          return t4.call$1(position);
        char$ = t3.charCodeAt$1(t2, position);
        if (typeof char$ !== "number")
          return this.parseNumber$2$bailout(9, t2, char$, length$, t4, position, t3);
      } while (48 <= char$ && char$ <= 57);
    }
    return t4.call$1(position);
  },
  parseNumber$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
    switch (state0) {
      case 1:
        t1 = env2;
        position = env1;
        char$ = env0;
        break;
      case 2:
        char$ = env5;
        length$ = env4;
        position = env3;
        position0 = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 3:
        char$ = env5;
        t3 = env4;
        length$ = env3;
        t1 = env2;
        t2 = env1;
        position = env0;
        break;
      case 4:
        t3 = env6;
        length$ = env5;
        position = env4;
        t4 = env3;
        char$ = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 5:
        char$ = env6;
        t4 = env5;
        t3 = env4;
        length$ = env3;
        position = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 6:
        t4 = env6;
        t3 = env5;
        position = env4;
        length$ = env3;
        char$ = env2;
        t1 = env1;
        t2 = env0;
        break;
      case 7:
        char$ = env5;
        t1 = env4;
        t3 = env3;
        length$ = env2;
        position = env1;
        t2 = env0;
        break;
      case 8:
        position = env5;
        t1 = env4;
        char$ = env3;
        t3 = env2;
        length$ = env1;
        t2 = env0;
        break;
      case 9:
        t1 = env5;
        position = env4;
        t3 = env3;
        length$ = env2;
        char$ = env1;
        t2 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        state0 = 0;
        t2 = this.source;
        length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
        t1.isDouble_0 = false;
      case 2:
        if (state0 === 2 || state0 === 0 && $.eqB(char$, 45))
          switch (state0) {
            case 0:
              position0 = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
              if ($.eqB(position0, length$))
                this.fail$2(position0, "Missing expected digit");
              char$ = $.getInterceptor$JSString(t2).charCodeAt$1(t2, position0);
            case 2:
              state0 = 0;
          }
        else
          position0 = position;
        if ($.ltB(char$, 48) || $.gtB(char$, 57))
          this.fail$2(position0, "Missing expected digit");
        t3 = new $.JsonParser_parseNumber_handleLiteral(t1, this, position);
      default:
        if (state0 === 3 || state0 === 0 && $.eqB(char$, 48))
          switch (state0) {
            case 0:
              position = $.getInterceptor$JSNumber(position0).operator$add$1(position0, 1);
              if ($.eqB(position, length$))
                return t3.call$1(position);
              char$ = $.getInterceptor$JSString(t2).charCodeAt$1(t2, position);
            case 3:
              state0 = 0;
              if ($.leB(48, char$) && $.leB(char$, 57))
                this.fail$1(position);
          }
        else
          switch (state0) {
            case 0:
              t4 = $.getInterceptor$JSString(t2);
              position = position0;
            case 4:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                      if ($.eqB(position, length$))
                        return t3.call$1(position);
                      char$ = t4.charCodeAt$1(t2, position);
                    case 4:
                      state0 = 0;
                      if (!($.leB(48, char$) && $.leB(char$, 57)))
                        break L0;
                  }
          }
      case 5:
      case 6:
        if (state0 === 6 || state0 === 5 || state0 === 0 && $.eqB(char$, 46))
          switch (state0) {
            case 0:
              t1.isDouble_0 = true;
              position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
              if ($.eqB(position, length$))
                this.fail$2(position, "Missing expected digit");
              t4 = $.getInterceptor$JSString(t2);
              char$ = t4.charCodeAt$1(t2, position);
            case 5:
              state0 = 0;
              if ($.ltB(char$, 48) || $.gtB(char$, 57))
                this.fail$1(position);
            case 6:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                      if ($.eqB(position, length$))
                        return t3.call$1(position);
                      char$ = t4.charCodeAt$1(t2, position);
                    case 6:
                      state0 = 0;
                      if (!($.leB(48, char$) && $.leB(char$, 57)))
                        break L1;
                  }
          }
      case 7:
      case 8:
      case 9:
        var t1, position, char$, t2, length$, position0, t3, t4;
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && ($.eqB(char$, 101) || $.eqB(char$, 69)))
          switch (state0) {
            case 0:
              t1.isDouble_0 = true;
              position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
              if ($.eqB(position, length$))
                this.fail$2(position, "Missing expected digit");
              t1 = $.getInterceptor$JSString(t2);
              char$ = t1.charCodeAt$1(t2, position);
            case 7:
              state0 = 0;
            case 8:
              if (state0 === 8 || state0 === 0 && ($.eqB(char$, 43) || $.eqB(char$, 45)))
                switch (state0) {
                  case 0:
                    position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                    if ($.eqB(position, length$))
                      this.fail$2(position, "Missing expected digit");
                    char$ = t1.charCodeAt$1(t2, position);
                  case 8:
                    state0 = 0;
                }
              if ($.ltB(char$, 48) || $.gtB(char$, 57))
                this.fail$2(position, "Missing expected digit");
            case 9:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      position = $.getInterceptor$JSNumber(position).operator$add$1(position, 1);
                      if ($.eqB(position, length$))
                        return t3.call$1(position);
                      char$ = t1.charCodeAt$1(t2, position);
                    case 9:
                      state0 = 0;
                      if (!($.leB(48, char$) && $.leB(char$, 57)))
                        break L2;
                  }
          }
        return t3.call$1(position);
    }
  },
  fail$2: function(position, message) {
    var t1, t2, sliceEnd, t3, slice;
    if (typeof position !== "number")
      return this.fail$2$bailout(1, position, message);
    if (typeof message !== "string")
      return this.fail$2$bailout(1, position, message);
    t1 = this.listener;
    t2 = this.source;
    t1.fail$3(t2, position, message);
    sliceEnd = position + 20;
    t1 = $.getInterceptor$JSStringJSArray(t2);
    t3 = t1.get$length(t2);
    if (typeof t3 !== "number")
      return this.fail$2$bailout(2, position, t2, sliceEnd, t3);
    slice = sliceEnd > t3 ? "'" + $.S(t1.substring$1(t2, position)) + "'" : "'" + $.S(t1.substring$2(t2, position, sliceEnd)) + "...'";
    throw $.$$throw($.FormatException$("Unexpected character at " + $.S(position) + ": " + slice));
  },
  fail$2$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        message = env1;
        position = env0;
        break;
      case 2:
        t1 = env3;
        sliceEnd = env2;
        t2 = env1;
        position = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (message == null)
          message = "Unexpected character";
        t1 = this.listener;
        t2 = this.source;
        t1.fail$3(t2, position, message);
        sliceEnd = $.getInterceptor$JSNumber(position).operator$add$1(position, 20);
        t1 = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
      case 2:
        var message, position, t1, t2, sliceEnd, t4, slice;
        state0 = 0;
        t1 = $.gtB(sliceEnd, t1);
        t4 = $.getInterceptor$JSString(t2);
        slice = t1 ? "'" + $.S(t4.substring$1(t2, position)) + "'" : "'" + $.S(t4.substring$2(t2, position, sliceEnd)) + "...'";
        throw $.$$throw($.FormatException$("Unexpected character at " + $.S(position) + ": " + slice));
    }
  },
  fail$1: function(position) {
    return this.fail$2(position, null);
  }
};

$$._JsonStringifier = {"": "Object;sb>,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.$$throw("Cyclic structure");
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (this.stringifyJsonValue$1(object) !== true) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (this.stringifyJsonValue$1(customJson) !== true)
          throw $.$$throw($.JsonUnsupportedObjectError$(object));
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, t3, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t2 = $.CONSTANT5.toString$0(object);
      $.getInterceptor$JSArray(t1).add$1(t1, t2);
      return true;
    } else if (object === true) {
      t1 = this.sb;
      $.getInterceptor$JSArray(t1).add$1(t1, "true");
      return true;
    } else if (object === false) {
      t1 = this.sb;
      $.getInterceptor$JSArray(t1).add$1(t1, "false");
      return true;
    } else if (object == null) {
      t1 = this.sb;
      $.getInterceptor$JSArray(t1).add$1(t1, "null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t2 = $.getInterceptor$JSArray(t1);
      t2.add$1(t1, "\"");
      $._JsonStringifier_escape(t1, object);
      t2.add$1(t1, "\"");
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || object.is$List())) {
      if (typeof object !== "object" || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t2 = this.sb;
      t3 = $.getInterceptor$JSArray(t2);
      t3.add$1(t2, "[");
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t3.add$1(t2, ",");
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t3.add$1(t2, "]");
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && object.is$Map()) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t3 = $.getInterceptor$JSArray(t2);
      t3.add$1(t2, "{");
      t1.first_0 = true;
      object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
      t3.add$1(t2, "}");
      t2 = this.seen;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, env0) {
    switch (state0) {
      case 1:
        object = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, object, t3, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t2 = $.CONSTANT5.toString$0(object);
          $.getInterceptor$JSArray(t1).add$1(t1, t2);
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                $.getInterceptor$JSArray(t1).add$1(t1, "true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      $.getInterceptor$JSArray(t1).add$1(t1, "false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            $.getInterceptor$JSArray(t1).add$1(t1, "null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t2 = $.getInterceptor$JSArray(t1);
                                  t2.add$1(t1, "\"");
                                  $._JsonStringifier_escape(t1, object);
                                  t2.add$1(t1, "\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || object.is$List()))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t2 = this.sb;
                                            t3 = $.getInterceptor$JSArray(t2);
                                            t3.add$1(t2, "[");
                                            t1 = $.getInterceptor$JSStringJSArray(object);
                                            if ($.gtB(t1.get$length(object), 0)) {
                                              this.stringifyValue$1(t1.operator$index$1(object, 0));
                                              for (i = 1; $.ltB(i, t1.get$length(object)); ++i) {
                                                t3.add$1(t2, ",");
                                                this.stringifyValue$1(t1.operator$index$1(object, i));
                                              }
                                            }
                                            t3.add$1(t2, "]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && object.is$Map()) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t3 = $.getInterceptor$JSArray(t2);
                                        t3.add$1(t2, "{");
                                        t1.first_0 = true;
                                        object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                        t3.add$1(t2, "}");
                                        t2 = this.seen;
                                        if (0 >= t2.length)
                                          throw $.ioore(0);
                                        t2.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$.ElementInstanceEvents = {"": "Events;_ptr",
  get$click: function() {
    return this.operator$index$1("click");
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  get$keyPress: function() {
    return this.operator$index$1("keypress");
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  get$load: function() {
    return this.operator$index$1("load");
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  },
  get$resize: function() {
    return this.operator$index$1("resize");
  },
  get$scroll: function() {
    return this.operator$index$1("scroll");
  }
};

$$._AttributeClassSet = {"": "CssClassSet;_liblib2$_element",
  readClasses$0: function() {
    var t1, classname, s, t2, t3, trimmed;
    t1 = this._liblib2$_element.get$attributes();
    classname = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "class");
    s = $.Set_Set();
    if (classname == null)
      return s;
    for (t1 = $.getInterceptor$JSString(classname).split$1(classname, " "), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = $.getInterceptor$JSArray(s); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      trimmed = $.getInterceptor$JSString(t3).trim$0(t3);
      if ($.getInterceptor$JSStringJSArray(trimmed).get$isEmpty(trimmed) !== true)
        t2.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var list, t1, t2;
    list = $.List_List$from(s);
    t1 = this._liblib2$_element.get$attributes();
    t2 = $.Strings_join(list, " ");
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "class", t2);
  }
};

$$.AudioContextEvents = {"": "Events;_ptr",
  get$complete: function() {
    return this.operator$index$1("complete");
  },
  complete$1: function(arg0) {
    return this.get$complete().call$1(arg0);
  }
};

$$.Proxy = {"": "Object;_port,_liblib5$_id",
  operator$index$1: function(arg) {
    return $.Proxy__forward(this, "[]", "method", [arg]);
  },
  operator$indexSet$2: function(key, value) {
    return $.Proxy__forward(this, "[]=", "method", [key, value]);
  },
  operator$eq$1: function(other) {
    var t1;
    if (this === other)
      t1 = true;
    else
      t1 = typeof other === "object" && other !== null && !!other.is$Proxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
    return t1;
  },
  noSuchMethod$1: function(invocation) {
    var member, args, t1, kind, t2;
    member = invocation.get$memberName();
    args = invocation.get$positionalArguments();
    if (args == null)
      args = [];
    if (invocation.get$isGetter() === true) {
      t1 = $.getInterceptor$JSString(member);
      if (t1.startsWith$1(member, "get:") === true)
        member = t1.substring$1(member, 4);
      kind = "get";
    } else if (invocation.get$isSetter() === true) {
      t1 = $.getInterceptor$JSString(member);
      if (t1.endsWith$1(member, "=") === true) {
        t2 = t1.get$length(member);
        member = t1.substring$2(member, 0, $.getInterceptor$JSNumber(t2).operator$sub$1(t2, 1));
      }
      t1 = $.getInterceptor$JSString(member);
      if (t1.startsWith$1(member, "set:") === true)
        member = t1.substring$1(member, 4);
      kind = "set";
    } else {
      t1 = $.getInterceptor$JSString(member);
      if (t1.startsWith$1(member, "get:") === true) {
        member = t1.substring$1(member, 4);
        kind = "get";
      } else if (t1.startsWith$1(member, "set:") === true) {
        member = t1.substring$1(member, 4);
        kind = "set";
      } else
        kind = "method";
    }
    return $.Proxy__forward(this, member, kind, args);
  },
  is$Proxy: true
};

$$.FunctionProxy = {"": "Proxy;_port,_liblib5$_id",
  noSuchMethod$1: function(invocation) {
    var t1, t2, message, result;
    if (invocation.get$isMethod() === true && $.eqB(invocation.get$memberName(), "call")) {
      t1 = this._liblib5$_id;
      t2 = invocation.get$positionalArguments();
      t2 = $.getInterceptor$JSArray(t2).mappedBy$1(t2, $._serialize);
      message = [t1, "", "apply", $.getInterceptor$JSArray(t2).toList$0(t2)];
      result = this._port.callSync$1(message);
      t1 = $.getInterceptor$JSStringJSArray(result);
      if ($.eqB(t1.operator$index$1(result, 0), "throws"))
        throw $.$$throw(t1.operator$index$1(result, 1));
      return $._deserialize(t1.operator$index$1(result, 1));
    } else
      return $.Proxy.prototype.noSuchMethod$1.call(this, invocation);
  }
};

$$._ProxiedObjectTable = {"": "Object;_name,_nextId,_deletedCount,_registry>,_port,_globalIds,_handleStack,_scopeIndices>",
  enterScope$0: function() {
    $.CONSTANT0.addLast$1(this._scopeIndices, this._handleStack.length);
  },
  exitScope$0: function() {
    var t1, start, t2, t3, t4, t5, i, t6;
    t1 = this._scopeIndices;
    if (0 >= t1.length)
      throw $.ioore(0);
    start = t1.pop();
    if (start !== (start | 0))
      return this.exitScope$0$bailout(1, start);
    for (t1 = this._registry, t2 = this._handleStack, t3 = $.getInterceptor$JSArray(t1), t4 = this._globalIds, t5 = $.getInterceptor$JSStringJSArray(t4), i = start; t6 = t2.length, i < t6; ++i) {
      if (i < 0)
        throw $.ioore(i);
      if (t5.contains$1(t4, t2[i]) !== true) {
        if (i >= t2.length)
          throw $.ioore(i);
        t3.remove$1(t1, t2[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    $.CONSTANT0.removeRange$2(t2, start, t6 - start);
  },
  exitScope$0$bailout: function(state0, start) {
    var t1, t2, t3, t4, t5, i, t6, t7;
    for (t1 = this._registry, t2 = this._handleStack, t3 = $.getInterceptor$JSArray(t1), t4 = this._globalIds, t5 = $.getInterceptor$JSStringJSArray(t4), i = start; t6 = $.ltB(i, t2.length), t7 = t2.length, t6; ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t7)
        throw $.ioore(i);
      if (t5.contains$1(t4, t2[i]) !== true) {
        if (i >= t2.length)
          throw $.ioore(i);
        t3.remove$1(t1, t2[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (typeof start !== "number")
      throw $.iae(start);
    $.CONSTANT0.removeRange$2(t2, start, t7 - start);
  },
  add$1: function(x) {
    var t1, t2, id, t4;
    if (this._scopeIndices.length === 0)
      throw $.$$throw("Must be inside scope to allocate.");
    t1 = this._name + "-";
    t2 = this._nextId;
    if (typeof t2 !== "number")
      return this.add$1$bailout1(1, x, t2, t1);
    this._nextId = t2 + 1;
    id = t1 + $.S(t2);
    t4 = this._registry;
    $.getInterceptor$JSArray(t4).operator$indexSet$2(t4, id, x);
    $.CONSTANT0.addLast$1(this._handleStack, id);
    return id;
  },
  add$1$bailout1: function(state0, x, t2, t1) {
    var id, t4;
    this._nextId = $.getInterceptor$JSNumber(t2).operator$add$1(t2, 1);
    id = t1 + $.S(t2);
    t4 = this._registry;
    $.getInterceptor$JSArray(t4).operator$indexSet$2(t4, id, x);
    $.CONSTANT0.addLast$1(this._handleStack, id);
    return id;
  },
  get$1: function(id) {
    var t1 = this._registry;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  },
  get$sendPort: function() {
    return this._port.toSendPort$0();
  },
  _ProxiedObjectTable$0: function() {
    this._port.receive$1(new $.anon(this));
  }
};

$$.MainWidget_decorate_anon = {"": "Closure;this_0",
  call$1: function(el) {
    var t1, t2;
    t1 = el.get$on().get$click();
    t2 = this.this_0.get$_onLinkClick();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  }
};

$$.MainWidget_decorate_anon0 = {"": "Closure;",
  call$1: function(pageEl) {
    var t1, t2;
    t1 = pageEl.get$on().get$transitionEnd();
    t2 = new $.MainWidget_decorate__anon(pageEl);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  }
};

$$.MainWidget_decorate__anon = {"": "Closure;pageEl_1",
  call$1: function(_) {
    var t1, t2;
    t1 = this.pageEl_1;
    t2 = t1.get$classes();
    if ($.getInterceptor$JSStringJSArray(t2).contains$1(t2, "transparent") === true)
      t1.set$hidden(true);
  }
};

$$.MainWidget_decorate_anon1 = {"": "Closure;mainContent_2",
  call$0: function() {
    var t1 = this.mainContent_2.get$classes();
    $.getInterceptor$JSArray(t1).remove$1(t1, "transparent");
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, t3, length$, i, t2;
    t1 = this.values_1;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.call$1$bailout0(1, value, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    length$ = t1.length;
    for (i = 0; i < length$; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t3.add$1(t1, value);
    t1 = this.copies_2;
    $.getInterceptor$JSArray(t1).add$1(t1, null);
    return length$;
  },
  call$1$bailout0: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        value = env0;
        break;
      case 2:
        length$ = env3;
        t3 = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.values_1;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length$ = t3.get$length(t1);
      case 2:
        var t1, value, t3, length$, i, t2;
        state0 = 0;
        for (i = 0; $.ltB(i, length$); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.getInterceptor$JSArray(t1).add$1(t1, value);
        t1 = this.copies_2;
        $.getInterceptor$JSArray(t1).add$1(t1, null);
        return length$;
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
  }
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, x);
  }
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.is$Date)
      throw $.$$throw($.UnimplementedError$("structured clone of Date"));
    if (typeof e === "object" && e !== null && !!e.is$RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.is$File())
      return e;
    if (typeof e === "object" && e !== null && e.is$Blob())
      return e;
    if (typeof e === "object" && e !== null && e.is$FileList())
      return e;
    if (typeof e === "object" && e !== null && e.is$ImageData())
      return e;
    if (typeof e === "object" && e !== null && e.is$ArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.is$ArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.is$Map()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (!(t2 == null))
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.is$List())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      length$ = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (!(copy == null)) {
        if (true === copy) {
          copy = new Array(length$);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < length$; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (!(elementCopy == null ? element == null : elementCopy === element)) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array(length$);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
              return this.call$1$bailout(3, e, t3, elementCopy, $.CONSTANT0, length$, copy0, slot, t2, i, copy);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array(length$);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout(4, e, length$, copy, i, $.CONSTANT0);
      for (; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
    switch (state0) {
      case 1:
        e = env0;
        break;
      case 2:
        t2 = env2;
        length$ = env1;
        e = env0;
        break;
      case 3:
        copy = env9;
        i = env8;
        t4 = env7;
        slot = env6;
        copy0 = env5;
        length$ = env4;
        t2 = env3;
        elementCopy = env2;
        t3 = env1;
        e = env0;
        break;
      case 4:
        t2 = env4;
        i = env3;
        copy = env2;
        length$ = env1;
        e = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.is$Date)
          throw $.$$throw($.UnimplementedError$("structured clone of Date"));
        if (typeof e === "object" && e !== null && !!e.is$RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.is$File())
          return e;
        if (typeof e === "object" && e !== null && e.is$Blob())
          return e;
        if (typeof e === "object" && e !== null && e.is$FileList())
          return e;
        if (typeof e === "object" && e !== null && e.is$ImageData())
          return e;
        if (typeof e === "object" && e !== null && e.is$ArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.is$ArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.is$Map()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (!(t2 == null))
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, slot, t2, e, length$, t4, copy, t3, i, element, elementCopy, copy0, j;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.is$List()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(e);
              length$ = t2.get$length(e);
            case 2:
              state0 = 0;
              slot = this.findSlot_5.call$1(e);
              t4 = this.readSlot_6;
              copy = t4.call$1(slot);
              if (!(copy == null)) {
                if (true === copy) {
                  copy = new Array(length$);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t3 = this.writeSlot_7;
            case 3:
              if (state0 === 3 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t3.call$2(slot, true);
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.ltB(i, length$))
                              break L0;
                            element = t2.operator$index$1(e, i);
                            elementCopy = this.call$1(element);
                          case 3:
                            if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                              switch (state0) {
                                case 0:
                                  copy0 = t4.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array(length$);
                                    t3.call$2(slot, copy0);
                                  }
                                case 3:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$JSArray(copy0), j = 0; j < i; ++j)
                                    t1.operator$indexSet$2(copy0, j, t2.operator$index$1(e, j));
                                  t1.operator$indexSet$2(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t3.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array(length$);
                t3.call$2(slot, copy);
                i = 0;
              }
            case 4:
              state0 = 0;
              for (t1 = $.getInterceptor$JSArray(copy); $.ltB(i, length$); ++i)
                t1.operator$indexSet$2(copy, i, this.call$1(t2.operator$index$1(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  }
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true) {
      t2 = this.result_1;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.getInterceptor$JSArray(t1).add$1(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  }
};

$$.MainWidget__navigateToHash_anon = {"": "Closure;hash_0",
  call$1: function(el) {
    var t1, t2;
    t1 = el.get$dataAttributes();
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "page-id"), this.hash_0)) {
      t1 = el.get$classes();
      t2 = $.getInterceptor$JSStringJSArray(t1).contains$1(t1, "active") === true;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  }
};

$$._DataAttributeMap_keys_anon = {"": "Closure;this_0,keys_1",
  call$2: function(key, value) {
    var t1, t2;
    t1 = $.getInterceptor$JSString(key);
    if (t1.startsWith$1(key, "data-") === true) {
      t2 = this.keys_1;
      t1 = t1.substring$1(key, 5);
      $.getInterceptor$JSArray(t2).add$1(t2, t1);
    }
  }
};

$$._DataAttributeMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$2: function(key, value) {
    var t1 = $.getInterceptor$JSString(key);
    if (t1.startsWith$1(key, "data-") === true)
      this.f_1.call$2(t1.substring$1(key, 5), value);
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    var t1, t2;
    t1 = this.f_1;
    t2 = this.this_0;
    return t1.call$2(key, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, key));
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.is$Element();
  }
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return el.remove$0();
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    if ($.gtB(t1.i_1, 0)) {
      t2 = t1.sb_0;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, key);
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ": ");
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    $.getInterceptor$JSArray(t2).add$1(t2, t3);
    t3 = t1.i_1;
    t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
  }
};

$$.MainWidget__showPage_anon = {"": "Closure;pageSelector_0",
  call$0: function() {
    var t1 = $.context();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "_gaq").push$1($.Proxy_Proxy$_json(["_trackEvent", "PageView", this.pageSelector_0]));
  }
};

$$.MainWidget__showPage_anon0 = {"": "Closure;",
  call$1: function(el) {
    var t1 = el.get$classes();
    if ($.getInterceptor$JSStringJSArray(t1).contains$1(t1, "transparent") !== true) {
      t1 = el.get$classes();
      $.getInterceptor$JSArray(t1).add$1(t1, "transparent");
    }
  }
};

$$.MainWidget__showPage_anon1 = {"": "Closure;pageSelector_1",
  call$1: function(el) {
    var t1 = el.get$dataAttributes();
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "page-id"), this.pageSelector_1)) {
      t1 = el.get$classes();
      $.getInterceptor$JSArray(t1).add$1(t1, "active");
    }
  }
};

$$.MainWidget__showPage_anon2 = {"": "Closure;shownPage_2",
  call$0: function() {
    var t1 = this.shownPage_2.get$classes();
    $.getInterceptor$JSArray(t1).remove$1(t1, "transparent");
  }
};

$$.CssClassSet_clear_anon = {"": "Closure;",
  call$1: function(s) {
    return $.getInterceptor$JSArray(s).clear$0(s);
  }
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  }
};

$$.CssClassSet_add_anon = {"": "Closure;value_0",
  call$1: function(s) {
    var t1 = this.value_0;
    return $.getInterceptor$JSArray(s).add$1(s, t1);
  }
};

$$.anon = {"": "Closure;this_0",
  call$1: function(msg) {
    var receiver, method, args, result, e, t1, t2, t3, t4, t5, exception;
    try {
      t1 = this.this_0.get$_registry();
      t2 = msg;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
      receiver = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
      t3 = msg;
      method = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
      t4 = msg;
      t4 = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2);
      t4 = $.getInterceptor$JSArray(t4).mappedBy$1(t4, $._deserialize);
      args = $.getInterceptor$JSArray(t4).toList$0(t4);
      if ($.eqB(method, "#call")) {
        result = null;
        t1 = args;
        switch ($.getInterceptor$JSStringJSArray(t1).get$length(t1)) {
          case 0:
            result = $._serialize(receiver.call$0());
            break;
          case 1:
            t1 = receiver;
            t2 = args;
            result = $._serialize(t1.call$1($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0)));
            break;
          case 2:
            t1 = receiver;
            t2 = args;
            t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
            t3 = args;
            result = $._serialize(t1.call$2(t2, $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1)));
            break;
          case 3:
            t1 = receiver;
            t2 = args;
            t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
            t3 = args;
            t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
            t4 = args;
            result = $._serialize(t1.call$3(t2, t3, $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2)));
            break;
          case 4:
            t1 = receiver;
            t2 = args;
            t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
            t3 = args;
            t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, 1);
            t4 = args;
            t4 = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, 2);
            t5 = args;
            result = $._serialize(t1.call$4(t2, t3, t4, $.getInterceptor$JSStringJSArray(t5).operator$index$1(t5, 3)));
            break;
          default:
            throw $.$$throw("Unsupported number of arguments.");
        }
        t1 = ["return", result];
        return t1;
      } else
        throw $.$$throw("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      return ["throws", $.S(e)];
    }

  }
};

$$.ReceivePortSync_receive_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var data, t1, replyTo, message, result;
    data = $.parse(e.get$detail(), null);
    t1 = $.getInterceptor$JSStringJSArray(data);
    replyTo = t1.operator$index$1(data, 0);
    t1 = t1.operator$index$1(data, 1);
    message = $._JsDeserializer$().deserialize$1(t1);
    result = this.this_0._callback$1(message);
    $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    var t1 = this.values_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, v);
  }
};

$$._DataAttributeMap_values_anon = {"": "Closure;this_0,values_1",
  call$2: function(key, value) {
    var t1;
    if ($.getInterceptor$JSString(key).startsWith$1(key, "data-") === true) {
      t1 = this.values_1;
      $.getInterceptor$JSArray(t1).add$1(t1, value);
    }
  }
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    var t1 = this.this_0;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
  }
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    var t1 = this.keys_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, k);
  }
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  }
};

$$._RemoteSendPortSync__call_anon = {"": "Closure;box_0",
  call$1: function(e) {
    var result = $.parse(e.get$detail(), null);
    this.box_0.result_0 = result;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, t3, length$, i, t2;
    t1 = this.values_0;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.call$1$bailout2(1, value, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    length$ = t1.length;
    for (i = 0; i < length$; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t3.add$1(t1, value);
    t1 = this.copies_1;
    $.getInterceptor$JSArray(t1).add$1(t1, null);
    return length$;
  },
  call$1$bailout2: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        value = env0;
        break;
      case 2:
        length$ = env3;
        t3 = env2;
        t1 = env1;
        value = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this.values_0;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        length$ = t3.get$length(t1);
      case 2:
        var t1, value, t3, length$, i, t2;
        state0 = 0;
        for (i = 0; $.ltB(i, length$); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.getInterceptor$JSArray(t1).add$1(t1, value);
        t1 = this.copies_1;
        $.getInterceptor$JSArray(t1).add$1(t1, null);
        return length$;
    }
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, i, x);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, t3, length$, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout1(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of Date"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      copy = $.makeLiteralMap([]);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout1(2, e, copy, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        t3 = this.call$1(e[t2]);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= copy.length)
          throw $.ioore(t2);
        copy[t2] = t3;
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      length$ = e.length;
      if (this.mustCopy_4 === true)
        copy = new Array(length$);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
        return this.call$1$bailout1(4, e, $.CONSTANT0, length$, copy, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout1: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        e = env0;
        break;
      case 2:
        slot = env2;
        copy = env1;
        e = env0;
        break;
      case 3:
        slot = env3;
        length$ = env2;
        t1 = env1;
        e = env0;
        break;
      case 4:
        slot = env4;
        copy = env3;
        length$ = env2;
        t1 = env1;
        e = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of Date"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      case 2:
        if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              copy = $.makeLiteralMap([]);
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)), t2 = $.getInterceptor$JSArray(copy); t1.moveNext$0() === true;) {
                t3 = t1.get$current();
                t2.operator$indexSet$2(copy, t3, this.call$1(e[t3]));
              }
              return copy;
          }
      default:
        var e, slot, copy, t1, t2, t3, length$, i;
        if (state0 === 4 || state0 === 3 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              t1 = $.getInterceptor$JSStringJSArray(e);
              length$ = t1.get$length(e);
            case 3:
              state0 = 0;
              copy = this.mustCopy_4 === true ? new Array(length$) : e;
            case 4:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$JSArray(copy), i = 0; $.ltB(i, length$); ++i)
                t2.operator$indexSet$2(copy, i, this.call$1(t1.operator$index$1(e, i)));
              return copy;
          }
        return e;
    }
  }
};

$$.JsonParser_parseNumber_handleLiteral = {"": "Closure;box_0,this_1,start_2",
  call$1: function(position) {
    var t1, t2, t3, literal, value;
    t1 = this.this_1;
    t2 = t1.get$source();
    t3 = this.start_2;
    literal = $.getInterceptor$JSString(t2).substring$2(t2, t3, position);
    value = this.box_0.isDouble_0 === true ? $.double_parse(literal, null) : $.int_parse(literal, null, null);
    t1.get$listener().handleNumber$1(value);
    return position;
  }
};

$$._JsonStringifier_stringifyJsonValue_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.first_0 !== true;
    t3 = this.this_1;
    if (t2) {
      t2 = t3.get$sb();
      $.getInterceptor$JSArray(t2).add$1(t2, ",\"");
    } else {
      t2 = t3.get$sb();
      $.getInterceptor$JSArray(t2).add$1(t2, "\"");
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    $.getInterceptor$JSArray(t3).add$1(t3, "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  }
};

$$._deserialize_deserializeFunction = {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$JSStringJSArray(message);
    id = t1.operator$index$1(message, 1);
    port = t1.operator$index$1(message, 2);
    if ($.eqB(port, $.get$_proxiedObjectTable().get$sendPort()))
      return $.get$_proxiedObjectTable().get$1(id);
    else
      return $.FunctionProxy$_internal(port, id);
  }
};

$$._deserialize_deserializeObject = {"": "Closure;",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$JSStringJSArray(message);
    id = t1.operator$index$1(message, 1);
    port = t1.operator$index$1(message, 2);
    if ($.eqB(port, $.get$_proxiedObjectTable().get$sendPort()))
      return $.get$_proxiedObjectTable().get$1(id);
    else
      return $.Proxy$_internal(port, id);
  }
};

$$._initialize_anon = {"": "Closure;",
  call$1: function(_) {
    return $._enterScope();
  }
};

$$._initialize_anon0 = {"": "Closure;",
  call$1: function(args) {
    return $._exitScope($.getInterceptor$JSStringJSArray(args).operator$index$1(args, 0));
  }
};

$$.CssClassSet_addAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    var t1 = this.iterable_0;
    return $.getInterceptor$JSArray(s).addAll$1(s, t1);
  }
};

$$.Proxy__serializeDataTree_anon = {"": "Closure;",
  call$1: function(e) {
    return $.Proxy__serializeDataTree(e);
  }
};

$$.PhotoGalleryWidget_decorate_anon = {"": "Closure;this_0",
  call$1: function(img) {
    var t1, t2;
    t1 = img.get$on().get$click();
    t2 = this.this_0.get$_onThumbClick();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  }
};

$$.PhotoGalleryWidget_decorate_anon0 = {"": "Closure;this_1",
  call$1: function(_) {
    this.this_1._setLightBoxVisible$1(false);
  }
};

$$.PhotoGalleryWidget_decorate_anon1 = {"": "Closure;this_2",
  call$1: function(_) {
    this.this_2._navNext$0();
  }
};

$$.PhotoGalleryWidget_decorate_anon2 = {"": "Closure;this_3",
  call$1: function(_) {
    this.this_3._navPrev$0();
  }
};

$$.KeyboardEventController_processKeyPress_anon = {"": "Closure;",
  call$1: function(element) {
    return element.get$altKey();
  }
};

$$.KeyboardEventController__capsLockOn_anon = {"": "Closure;",
  call$1: function(element) {
    return $.eq(element.get$keyCode(), 20);
  }
};

$$.KeyboardEventController_processKeyUp_anon = {"": "Closure;box_0",
  call$1: function(element) {
    return !$.eqB(element, this.box_0.toRemove_0);
  }
};

$$.PhotoGalleryWidget__createLightBoxImage_anon = {"": "Closure;src_0",
  call$0: function() {
    var t1 = $.context();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "_gaq").push$1($.Proxy_Proxy$_json(["_trackEvent", "Gallery", "LoadOriginal", this.src_0]));
  }
};

$$.PhotoGalleryWidget__setLightBoxVisible_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0.get$_lightBox().get$classes();
    $.getInterceptor$JSArray(t1).remove$1(t1, "transparent");
  }
};

$$.PhotoGalleryWidget__onThumbClick_anon = {"": "Closure;box_0",
  call$0: function() {
    var t1 = $.context();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "_gaq").push$1($.Proxy_Proxy$_json(["_trackEvent", "Gallery", "ThumbnailClick", this.box_0.originalSrc_0]));
  }
};

$$.PhotoGalleryWidget__onWindowResize_anon = {"": "Closure;buttonTop_0",
  call$1: function(button) {
    var t1 = $.S(this.buttonTop_0) + "px";
    button.get$style().set$top(t1);
  }
};

$$.RsvpWidget__onSendClick_anon = {"": "Closure;rsvp_0",
  call$1: function(nameEl) {
    var name$, t1;
    name$ = $.callTypeCast(nameEl, "is$TextInputElement").get$value();
    if (!$.eqB(name$, "")) {
      t1 = this.rsvp_0.get$partyMembers();
      $.getInterceptor$JSArray(t1).add$1(t1, name$);
    }
  }
};

$$.RsvpWidget__onSendClick_anon0 = {"": "Closure;",
  call$0: function() {
    var t1 = $.context();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "_gaq").push$1($.Proxy_Proxy$_json(["_trackEvent", "Rsvp", "start"]));
  }
};

$$.RsvpWidget__onRsvpUpsertFail_anon = {"": "Closure;",
  call$0: function() {
    var t1 = $.context();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "_gaq").push$1($.Proxy_Proxy$_json(["_trackEvent", "Rsvp", "error"]));
  }
};

$$.RsvpWidget__showMessage_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0.get$_infoEl().get$classes();
    $.getInterceptor$JSArray(t1).remove$1(t1, "transparent");
  }
};

$$.RsvpWidget__showMessage_anon0 = {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1.get$_infoEl().get$classes();
    $.getInterceptor$JSArray(t1).add$1(t1, "transparent");
  }
};

$$.RsvpWidget__onRsvpUpsertSuccess_anon = {"": "Closure;",
  call$0: function() {
    var t1 = $.context();
    $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "_gaq").push$1($.Proxy_Proxy$_json(["_trackEvent", "Rsvp", "success"]));
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    this.port_1.close$0();
    t1 = typeof value === "object" && value !== null && !!value.is$Exception;
    t2 = this.completer_0;
    if (t1)
      t2.completeError$1(value);
    else
      t2.complete$1(value);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.get$isWorker() === true)
      $globalState.get$mainManager().postMessage$1(workerMessage);
    else {
      t2 = $globalState.get$managers();
      t1 = t1.get$_workerId();
      manager = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1);
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, t3, remaining;
    t1 = this.values_2;
    t2 = this.pos_3;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, value);
    t2 = this.box_0;
    t3 = t2.remaining_0;
    remaining = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
    t2.remaining_0 = remaining;
    if ($.eqB(remaining, 0))
      this.completer_1.complete$1(t1);
  }
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$.anon0 = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.get$topEventLoop();
    t1 = t2.get$activeTimerCount();
    t2.set$activeTimerCount($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.print("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.print("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._liblib6$_dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._liblib6$_dispatch$1(e);
  }
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, t5, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.get$isolates();
    t5 = t2.get$_liblib6$_isolateId();
    isolate = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, t5);
    if (isolate == null)
      return;
    if (t2.get$_liblib6$_receivePort().get$_liblib6$_callback() == null)
      return;
    shouldSerialize = !($globalState.get$currentContext() == null) && !$.eqB($globalState.get$currentContext().get$id(), t2.get$_liblib6$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_liblib6$_receivePort().get$_liblib6$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_liblib6$_receivePort();
      t2 = this.box_0;
      t1._liblib6$_callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2, t3;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    t3 = t2._liblib6$_dispatch$1(key);
    t2 = t2._liblib6$_dispatch$1(val);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t3, t2);
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_Timer(0, new $._EventLoop__runHelper_next_anon(this));
  }
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.BoundClosure = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$$.BoundClosure1 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};
$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string;
  if (typeof strings !== "object" || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  if (!strings.constructor === Array)
    strings = $.List_List$from(strings);
  length$ = strings.length;
  for (i = 0; i < length$; ++i) {
    if (i >= strings.length)
      throw $.ioore(i);
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      if (!(!(strings == null) && strings.constructor === Array))
        strings = $.List_List$from(strings);
      t1 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t1.get$length(strings);
    case 2:
      var strings, t1, length$, i, string;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        string = t1.operator$index$1(strings, i);
        if (!(typeof string === "string"))
          throw $.$$throw($.ArgumentError$(string));
      }
      return strings;
  }
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $globalState.get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $globalState.get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState(t1);
  if ($globalState.get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.set$rootContext(rootContext);
  $globalState.set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $globalState.get$topEventLoop().run$0();
};

$._globalState0 = function() {
  return $globalState;
};

$._globalState = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var t1, t2, src;
  for (t1 = $.CONSTANT0.get$iterator(document.getElementsByTagName('script')); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    src = t2 && t2.src;
    if (!(src == null)) {
      t2 = $.getInterceptor$JSString(src);
      t2 = t2.endsWith$1(src, "test_controller.js") !== true && t2.endsWith$1(src, "dart.js") !== true;
    } else
      t2 = false;
    if (t2)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSStringJSArray(msg);
  switch (t1.operator$index$1(msg, "command")) {
    case "start":
      t2 = t1.operator$index$1(msg, "id");
      $globalState.set$currentManagerId(t2);
      entryPoint = $[t1.operator$index$1(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.operator$index$1(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.get$topEventLoop().enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.set$currentContext(context);
      $globalState.get$topEventLoop().run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.operator$index$1(msg, "functionName"), t1.operator$index$1(msg, "uri"), t1.operator$index$1(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.operator$index$1(msg, "port") == null))
        t1.operator$index$1(msg, "port").send$2(t1.operator$index$1(msg, "msg"), t1.operator$index$1(msg, "replyTo"));
      $globalState.get$topEventLoop().run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.get$managers();
      t2 = sender.get$id();
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
      sender.terminate$0();
      $globalState.get$topEventLoop().run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.operator$index$1(msg, "msg"));
      break;
    case "print":
      if ($globalState.get$isWorker() === true)
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.print(t1.operator$index$1(msg, "msg"));
      break;
    case "error":
      throw $.$$throw(t1.operator$index$1(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.get$isWorker() === true)
    $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      t1 = msg;
      $.get$globalThis().console.log(t1);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($.Exception_Exception(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePort_ReceivePort();
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2("spawned", $.lazyPort.toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.getInterceptor$JSNumber(workerId).operator$add$1(workerId, 1));
  worker.set$id(workerId);
  t1 = $globalState.get$managers();
  $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$0();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$._ArrayIterator$ = function(_list) {
  return new $._ArrayIterator(_list, -1, null);
};

$.gtB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a <= b : $.le$slow(a, b) === true;
};

$.checkNumbers = function(a, b) {
  if (typeof a === "number")
    if (typeof b === "number")
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function(name$, internalName, type, arguments$, argumentNames) {
  return $.JSInvocationMirror$(name$, internalName, type, arguments$, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.Primitives_objectHashCode = function(object) {
  var hash, t1;
  hash = object.$identityHash;
  if (hash == null) {
    t1 = $.Primitives_hashCodeSeed;
    hash = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (!(match == null)) {
      t1 = $.getInterceptor$JSStringJSArray(match);
      if (!(t1.operator$index$1(match, 2) == null))
        return parseInt(source, 16);
      if (!(t1.operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (!(match == null)) {
      if (radix === 10 && !($.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      if (radix < 10 || $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        t1 = $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 1);
        digitsPart = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
        for (t1 = $.getInterceptor$JSStringJSArray(digitsPart), i = 0; $.ltB(i, t1.get$length(digitsPart)); ++i)
          if ($.gtB(t1.charCodeAt$1(digitsPart, i), maxCharCode))
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  $.checkString(source);
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if ($.CONSTANT5.get$isNaN(result) === true && !$.eqB(source, "NaN"))
    return handleError.call$1(source);
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_newFixedList = function(length$) {
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, i, result, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, i = 0, result = ""; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT0.get$iterator(codePoints); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.CONSTANT3.operator$shr$1(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT0.get$iterator(charCodes); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  var t1 = this;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === "string")
      if ($.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === "string" ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.operator$indexSet$2(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  $._currentIsolate();
  function$ = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = function$;
  return function$;
};

$.propertyTypeCastError = function(value, property) {
  var actualType, t1;
  actualType = $.Primitives_objectTypeName(value);
  t1 = $.getInterceptor$JSStringJSArray(property);
  throw $.$$throw($.CastErrorImplementation$(actualType, t1.substring$2(property, 3, t1.get$length(property))));
};

$.callTypeCast = function(value, property) {
  var t1;
  if (!(value == null))
    t1 = typeof value === "object" && value[property]();
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  if (name$ === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === "string")
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT7));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT7)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, t2, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (isCaseSensitive !== true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(0);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length$ = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.getInterceptor$JSNumber(position).operator$add$1(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.getInterceptor$JSNumber(startIndex).operator$add$1(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === "string")
    return !$.eqB($.CONSTANT1.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === "object" && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else {
    substr = $.CONSTANT1.substring$1(receiver, startIndex);
    t1 = $.getInterceptor$JSString(other).allMatches$1(other, substr);
    return $.getInterceptor$JSArray(t1).get$iterator(t1).moveNext$0();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  $.checkString(to);
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = $.StringBuffer_StringBuffer("");
        length$ = receiver.length;
        t1 = $.getInterceptor$JSArray(result);
        t1.add$1(result, to);
        for (i = 0; i < length$; ++i) {
          if (i >= receiver.length)
            throw $.ioore(i);
          t1.add$1(result, receiver[i]);
          t1.add$1(result, to);
        }
        return t1.toString$0(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
  else if (typeof from === "object" && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl$immediate(value);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListener__FutureListener$wrap = function(future) {
  return $._FutureListenerWrapper$(future);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, t3, i0;
  t1 = {};
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT8);
  completer = $.Completer_Completer();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    t3 = t2.get$current();
    i0 = i + 1;
    t3.then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.get$future();
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.Timer_Timer = function(milliseconds, callback) {
  return $.TimerImpl$(milliseconds, callback);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.operator$indexSet$2(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.operator$indexSet$2(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;)
    if ($.eqB(element, t1.get$current()))
      return true;
  return false;
};

$.IterableMixinWorkaround_any = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).get$iterator(iterable); t1.moveNext$0() === true;)
    if (f.call$1(t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_joinList = function(list, separator) {
  var t1, buffer, i, t2;
  if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if (typeof separator !== "string")
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if ($.getInterceptor$JSStringJSArray(list).get$isEmpty(list) === true)
    return "";
  t1 = list.length;
  if (t1 === 1) {
    if (0 >= t1)
      throw $.ioore(0);
    return $.S(list[0]);
  }
  buffer = $.StringBuffer_StringBuffer("");
  if (separator === "")
    for (t1 = $.getInterceptor$JSArray(buffer), i = 0; i < list.length; ++i)
      t1.add$1(buffer, $.S(list[i]));
  else {
    if (0 >= list.length)
      throw $.ioore(0);
    t1 = $.S(list[0]);
    t2 = $.getInterceptor$JSArray(buffer);
    t2.add$1(buffer, t1);
    for (i = 1; i < list.length; ++i) {
      t2.add$1(buffer, separator);
      if (i >= list.length)
        throw $.ioore(i);
      t2.add$1(buffer, $.S(list[i]));
    }
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.IterableMixinWorkaround_joinList$bailout = function(state0, list, separator) {
  var t1, buffer, t2, i, t3;
  t1 = $.getInterceptor$JSStringJSArray(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if ($.eqB(t1.get$length(list), 1))
    return $.S(t1.operator$index$1(list, 0));
  buffer = $.StringBuffer_StringBuffer("");
  if (separator == null || $.eqB(separator, ""))
    for (t2 = $.getInterceptor$JSArray(buffer), i = 0; $.ltB(i, t1.get$length(list)); ++i)
      t2.add$1(buffer, $.S(t1.operator$index$1(list, i)));
  else {
    t2 = $.S(t1.operator$index$1(list, 0));
    t3 = $.getInterceptor$JSArray(buffer);
    t3.add$1(buffer, t2);
    for (i = 1; $.ltB(i, t1.get$length(list)); ++i) {
      t3.add$1(buffer, separator);
      t3.add$1(buffer, $.S(t1.operator$index$1(list, i)));
    }
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(0));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.is$List());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.getInterceptor$JSArray(c).get$iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = typeof o === "object" && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}";
      $.getInterceptor$JSArray(result).add$1(result, t1);
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).get$iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(0));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  t1 = new $.Maps__emitMap_anon(t1, result, visiting);
  $.getInterceptor$JSArray(m).forEach$1(m, t1);
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ListIterator$ = function(_list) {
  return new $.ListIterator(_list, -1, null);
};

$.MappedList$ = function(_list, _f) {
  return new $.MappedList(_list, _f);
};

$.double_parse = function(source, handleError) {
  return $.Primitives_parseDouble(source, handleError);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === "string") {
    t1 = $.CONSTANT1.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function(length$) {
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  return new Array(length$);
};

$.List_List$fixedLength = function(length$, fill) {
  var result, t1, i;
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  result = $.Primitives_newFixedList(length$);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.is$JavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length$, fill, result);
  if (!$.eqB(length$, 0) && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length$, fill, result) {
  var i;
  if (!$.eqB(length$, 0) && !(fill == null))
    for (i = 0; i < result.length; ++i)
      $.CONSTANT0.operator$indexSet$2(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.getInterceptor$JSArray(other).get$iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT3.operator$tdiv$1(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  var t1, t2;
  t1 = $.getInterceptor$JSNumber(currentProbe).operator$add$1(currentProbe, numberOfProbes);
  t2 = $.getInterceptor$JSNumber(length$).operator$sub$1(length$, 1);
  return $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
};

$._HashMapImplKeyIterable$ = function(_map) {
  return new $._HashMapImplKeyIterable(_map);
};

$._HashMapImplValueIterable$ = function(_map) {
  return new $._HashMapImplValueIterable(_map);
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.print = function(object) {
  if (typeof object === "string")
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.getInterceptor(object).toString$0(object));
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Set_Set = function() {
  return $.HashSet$();
};

$.HashSet$ = function() {
  return new $.HashSet($._HashMapImpl$());
};

$._HashSetIterator$ = function(set) {
  return new $._HashSetIterator($.CONSTANT0.get$iterator(set._backingMap._liblib0$_keys));
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!charCodes.constructor === Array)
    charCodes = $.List_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.Strings__toJsStringArray(strings).join(separator);
};

$.document = function() {
  return document;
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.ApplicationCacheEvents$ = function(_ptr) {
  return new $.ApplicationCacheEvents(_ptr);
};

$.BRElement_BRElement = function() {
  return document.$$dom_createElement$1("br");
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  return $._CustomEventFactoryProvider_createCustomEvent(type, canBubble, cancelable, detail);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._FrozenCssClassSet$ = function() {
  return new $._FrozenCssClassSet();
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = document.$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.InputElement_InputElement = function(type) {
  var e, t1, exception;
  e = document.$$dom_createElement$1("input");
  if (!(type == null))
    try {
      t1 = type;
      e.set$type(t1);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return e;
};

$.TextInputElement_TextInputElement = function() {
  return $.InputElement_InputElement("text");
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.RtcDataChannelEvents$ = function(_ptr) {
  return new $.RtcDataChannelEvents(_ptr);
};

$.RtcPeerConnectionEvents$ = function(_ptr) {
  return new $.RtcPeerConnectionEvents(_ptr);
};

$.ScriptElement_ScriptElement = function() {
  return document.$$dom_createElement$1("script");
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.Window__isDartLocation = function(thing) {
  var t1, exception;
  try {
    t1 = thing;
    t1 = typeof t1 === "object" && t1 !== null && t1.is$Location();
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$._FrameSetElementEvents$ = function(_ptr) {
  return new $._FrameSetElementEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._DataAttributeMap$ = function($$dom_attributes) {
  return new $._DataAttributeMap($$dom_attributes);
};

$.KeyboardEventController$keydown = function(target) {
  var t1, t2, t3;
  t1 = $.CONSTANT1.get$charCodes("a");
  t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
  t2 = $.CONSTANT1.get$charCodes("A");
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, 0);
  t3 = new $.KeyboardEventController(null, null, null, null, $.getInterceptor$JSNumber(t1).operator$sub$1(t1, t2), null, null, null);
  t3.KeyboardEventController$keydown$1(target);
  return t3;
};

$.KeyCode_isCharacterKey = function(keyCode) {
  var t1, t2;
  if (!($.geB(keyCode, 48) && $.leB(keyCode, 57)))
    if (!($.geB(keyCode, 96) && $.leB(keyCode, 106)))
      t1 = $.geB(keyCode, 65) && $.leB(keyCode, 90);
    else
      t1 = true;
  else
    t1 = true;
  if (t1)
    return true;
  t1 = window.get$navigator().get$userAgent();
  if ($.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0) !== true) {
    t1 = window.get$navigator().get$userAgent();
    t2 = $.getInterceptor$JSString(t1).contains$2(t1, "WebKit", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  if (t1 && $.eqB(keyCode, 0))
    return true;
  return $.eqB(keyCode, 32) || $.eqB(keyCode, 63) || $.eqB(keyCode, 107) || $.eqB(keyCode, 109) || $.eqB(keyCode, 110) || $.eqB(keyCode, 111) || $.eqB(keyCode, 186) || $.eqB(keyCode, 59) || $.eqB(keyCode, 189) || $.eqB(keyCode, 187) || $.eqB(keyCode, 61) || $.eqB(keyCode, 188) || $.eqB(keyCode, 190) || $.eqB(keyCode, 191) || $.eqB(keyCode, 192) || $.eqB(keyCode, 222) || $.eqB(keyCode, 219) || $.eqB(keyCode, 220) || $.eqB(keyCode, 221);
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, listener, t2;
  t1 = {};
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  listener = new $._RemoteSendPortSync__call_anon(t1);
  t2 = window.get$on();
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, source);
  $.getInterceptor$JSArray(t2).add$1(t2, listener);
  $._dispatchEvent(target, [source, message]);
  t2 = window.get$on();
  t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, source);
  $.getInterceptor$JSArray(t2).remove$1(t2, listener);
  return t1.result_0;
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  var t1;
  if ($.eqB(isolateId, $.ReceivePortSync__isolateId())) {
    t1 = $.ReceivePortSync__portMap;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId).toSendPort$0();
  } else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$._dispatchEvent = function(receiver, message) {
  var event$ = $.CustomEvent_CustomEvent(receiver, false, false, $._JsonStringifier_stringify(message));
  window.$$dom_dispatchEvent$1(event$);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._CustomEventFactoryProvider_createCustomEvent = function(type, canBubble, cancelable, detail) {
  var e = document.$$dom_createEvent$1("CustomEvent");
  e.$$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = window;
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._LocationCrossFrame__createSafe = function(location$) {
  var t1 = window.get$location();
  if (location$ == null ? t1 == null : location$ === t1)
    return location$;
  else
    return $._LocationCrossFrame$(location$);
};

$.KeyEvent$ = function(parent$) {
  var t1 = new $.KeyEvent(null, null, null, null);
  t1.KeyEvent$1(parent$);
  return t1;
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$._LocationWrapper__get = function(p, m) {
  return p[m];
};

$._LocationWrapper__set = function(p, m, v) {
  return p[m] = v;
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.getInterceptor$JSStringJSArray(array).get$length(array), -1, null);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values, copies;
  values = [];
  copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot(values, copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.geB(startIndex, t1.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    if ($.eqB(t1.operator$index$1(a, i), element))
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== "number")
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, t1, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.getInterceptor$JSNumber(start).operator$add$1(start, length$);
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.gtB(end, t1.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    accumulator.push(t1.operator$index$1(a, i));
  return accumulator;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$.DatabaseEvents$ = function(_ptr) {
  return new $.DatabaseEvents(_ptr);
};

$.OpenDBRequestEvents$ = function(_ptr) {
  return new $.OpenDBRequestEvents(_ptr);
};

$.RequestEvents$ = function(_ptr) {
  return new $.RequestEvents(_ptr);
};

$.TransactionEvents$ = function(_ptr) {
  return new $.TransactionEvents(_ptr);
};

$.VersionChangeRequestEvents$ = function(_ptr) {
  return new $.VersionChangeRequestEvents(_ptr);
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.parse = function(json, reviver) {
  var listener = reviver == null ? $.BuildJsonListener$() : $.ReviverJsonListener$(reviver);
  $.JsonParser$(json, listener).parse$0();
  return listener.get$result();
};

$.BuildJsonListener$ = function() {
  return new $.BuildJsonListener([], null, null, null);
};

$.ReviverJsonListener$ = function(reviver) {
  return new $.ReviverJsonListener(reviver, [], null, null, null);
};

$.JsonParser$ = function(source, listener) {
  return new $.JsonParser(source, listener);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.StringBuffer_StringBuffer("");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.getInterceptor(output).toString$0(output);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, length$, charCodes, needsEscape, i, charCode, t2, t3;
  t1 = $.getInterceptor$JSStringJSArray(s);
  length$ = t1.get$length(s);
  charCodes = $.List_List(0);
  for (needsEscape = false, i = 0; $.ltB(i, length$); ++i) {
    charCode = t1.charCodeAt$1(s, i);
    if ($.ltB(charCode, 32)) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = $.getInterceptor$JSNumber(charCode);
          t3 = t2.operator$shr$1(charCode, 12);
          t3 = $.getInterceptor$JSNumber(t3).operator$and$1(t3, 15);
          if ($.ltB(t3, 10)) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = t2.operator$shr$1(charCode, 8);
          t3 = $.getInterceptor$JSNumber(t3).operator$and$1(t3, 15);
          if ($.ltB(t3, 10)) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = t2.operator$shr$1(charCode, 4);
          t3 = $.getInterceptor$JSNumber(t3).operator$and$1(t3, 15);
          if ($.ltB(t3, 10)) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t2 = t2.operator$and$1(charCode, 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if ($.eqB(charCode, 34) || $.eqB(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  t1 = needsEscape ? $.String_String$fromCharCodes(charCodes) : s;
  $.getInterceptor$JSArray(sb).add$1(sb, t1);
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CONSTANT6.get$isNegative(b) === true || $.CONSTANT6.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.main = function() {
  $.RsvpWidget$().decorate$0();
  $.PhotoGalleryWidget$().decorate$0();
  $.MainWidget$().decorate$0();
};

$.MainWidget$ = function() {
  return new $.MainWidget();
};

$.PhotoGalleryWidget$ = function() {
  return new $.PhotoGalleryWidget(null, null, null, null, null);
};

$.PhotoGalleryWidget__getImageUrl = function(currentUrl, offset) {
  var t1, matchesIt, currentIdx, newIdx, newIdxStr, t2;
  t1 = $.get$PhotoGalleryWidget__IMAGE_IDX_REGEXP();
  t1 = $.getInterceptor$JSString(t1).allMatches$1(t1, currentUrl);
  matchesIt = $.getInterceptor$JSArray(t1).get$iterator(t1);
  matchesIt.moveNext$0();
  currentIdx = $.int_parse(matchesIt.get$current().group$1(1), null, null);
  t1 = $.getInterceptor$JSNumber(currentIdx).operator$add$1(currentIdx, offset);
  newIdx = $.getInterceptor$JSNumber(t1).operator$mod$1(t1, 69);
  newIdxStr = $.S(newIdx);
  if (newIdxStr.length < 2)
    newIdxStr = "0" + $.S(newIdx);
  t1 = $.get$PhotoGalleryWidget__IMAGE_IDX_REGEXP();
  t2 = "images/" + newIdxStr + "_original.jpg";
  return $.getInterceptor$JSString(currentUrl).replaceAll$2(currentUrl, t1, t2);
};

$.RsvpInsertRequest$ = function() {
  return new $.RsvpInsertRequest(null, null, null, null, null);
};

$.RsvpWidget$ = function() {
  return new $.RsvpWidget(null, null);
};

$._inject = function(code) {
  var script, t1;
  script = $.ScriptElement_ScriptElement();
  script.set$type("text/javascript");
  script.set$innerHtml(code);
  t1 = document.get$body().get$nodes();
  $.getInterceptor$JSArray(t1).add$1(t1, script);
};

$._initialize = function() {
  var t1, exception;
  if (!($._jsPortSync == null))
    return;
  try {
    t1 = window;
    $._jsPortSync = t1.lookupPort$1("dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    $._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            return [ 'return', serialize(receiver[field]) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          // TODO(vsm): Should we capture _this_ automatically?\n          return [ 'return', serialize(receiver.apply(null, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          return [ 'return', serialize(receiver[args[0]]) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return 'JS objects Live : ' + live +\n           ' (out of ' + total + ' ever allocated).';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-debug', debug);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = window.lookupPort$1("dart-js-context");
  }
  $._jsPortCreate = window.lookupPort$1("dart-js-create");
  $._jsPortDebug = window.lookupPort$1("dart-js-debug");
  $._jsPortEquals = window.lookupPort$1("dart-js-equals");
  $._jsPortInstanceof = window.lookupPort$1("dart-js-instanceof");
  $._jsPortConvert = window.lookupPort$1("dart-js-convert");
  $._jsEnterJavaScriptScope = window.lookupPort$1("dart-js-enter-scope");
  $._jsExitJavaScriptScope = window.lookupPort$1("dart-js-exit-scope");
  $._jsGlobalize = window.lookupPort$1("dart-js-globalize");
  $._jsInvalidate = window.lookupPort$1("dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  window.registerPort$2("js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  window.registerPort$2("js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$.context = function() {
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot get JavaScript context out of scope.");
  return $._deserialize($._jsPortSync.callSync$1([]));
};

$._depth = function() {
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$.scoped = function(f) {
  var depth, t1;
  depth = $._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._exitScope(depth);
  }
};

$._enterScope = function() {
  $._initialize();
  $.get$_proxiedObjectTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$._exitScope = function(depth) {
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
};

$.Proxy_Proxy$_json = function(data) {
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    throw $.$$throw("Cannot create Proxy out of scope.");
  return $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(data)));
};

$.Proxy__serializeDataTree = function(data) {
  var entries, t1, t2;
  if (typeof data === "object" && data !== null && data.is$Map()) {
    entries = $.List_List(0);
    for (t1 = data.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      entries.push([t2, $.Proxy__serializeDataTree(data.operator$index$1(t2))]);
    }
    return ["map", entries];
  } else if (typeof data === "object" && data !== null && (data.constructor === Array || data.is$List())) {
    t1 = new $.Proxy__serializeDataTree_anon();
    t1 = $.getInterceptor$JSArray(data).mappedBy$1(data, t1);
    return ["list", $.getInterceptor$JSArray(t1).toList$0(t1)];
  } else
    return ["simple", $._serialize(data)];
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy(_port, _id);
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var t1, t2, t3, result;
  t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    throw $.$$throw("Cannot access a JavaScript proxy out of scope.");
  t1 = receiver._port;
  t2 = receiver._liblib5$_id;
  t3 = $.getInterceptor$JSArray(args).mappedBy$1(args, $._serialize);
  result = t1.callSync$1([t2, member, kind, $.getInterceptor$JSArray(t3).toList$0(t3)]);
  t1 = $.getInterceptor$JSStringJSArray(result);
  switch (t1.operator$index$1(result, 0)) {
    case "return":
      return $._deserialize(t1.operator$index$1(result, 1));
    case "throws":
      throw $.$$throw($._deserialize(t1.operator$index$1(result, 1)));
    case "none":
      throw $.$$throw($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.$$throw("Invalid return value");
  }
};

$.FunctionProxy$_internal = function(port, id) {
  return new $.FunctionProxy(port, id);
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List(0);
  t4 = $.List_List(0);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, $.Set_Set(), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$._serialize = function(message) {
  var t1;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!message.is$SendPortSync)
    return message;
  else {
    if (typeof message === "object" && message !== null && message.is$Element()) {
      t1 = message.ownerDocument;
      t1 = t1 == null || $.eqB(t1, document);
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement(message)];
    else if (typeof message === "object" && message !== null && !!message.is$Callback)
      return message.get$_serialized();
    else if (typeof message === "object" && message !== null && !!message.is$Proxy)
      return ["objref", message._liblib5$_id, message._port];
    else {
      t1 = $.get$_proxiedObjectTable();
      return ["objref", $.getInterceptor$JSArray(t1).add$1(t1, message), $.get$_proxiedObjectTable().get$sendPort()];
    }
  }
};

$._deserialize = function(message) {
  var t1, t2, t3;
  t1 = new $._deserialize_deserializeFunction();
  t2 = new $._deserialize_deserializeObject();
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!message.is$SendPortSync)
    return message;
  t3 = $.getInterceptor$JSStringJSArray(message);
  switch (t3.operator$index$1(message, 0)) {
    case "funcref":
      return t1.call$1(message);
    case "objref":
      return t2.call$1(message);
    case "domref":
      return $._deserializeElement(t3.operator$index$1(message, 1));
  }
  throw $.$$throw("Unsupported serialized data: " + $.S(message));
};

$._serializeElement = function(e) {
  var t1, id, t2, top$, oldValue, newValue;
  if (e.get$attributes().containsKey$1("data-dart_id") === true) {
    t1 = e.get$attributes();
    id = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_id");
  } else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    id = "dart-" + $.S(t1);
    t2 = e.get$attributes();
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, "data-dart_id", id);
  }
  t1 = document.get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if (top$.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        t1 = top$.get$attributes();
        oldValue = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).concat$1(oldValue, "a");
        t1 = top$.get$attributes();
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "data-dart_temporary_attached", newValue);
        break;
      }
      if (top$.get$parent() == null) {
        t1 = top$.get$attributes();
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "data-dart_temporary_attached", "a");
        t1 = document.get$documentElement().get$children();
        $.getInterceptor$JSArray(t1).add$1(t1, top$);
        break;
      }
      t1 = top$.get$parent();
      t2 = document.get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return id;
};

$._deserializeElement = function(id) {
  var t1, list, e, top$, oldValue, newValue, t2;
  t1 = "[data-dart_id=\"" + $.S(id) + "\"]";
  list = document.queryAll$1(t1);
  t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.gtB(t1.get$length(list), 1))
    throw $.$$throw("Non unique ID: " + $.S(id));
  if ($.eqB(t1.get$length(list), 0))
    throw $.$$throw("Only elements attached to document can be serialized: " + $.S(id));
  e = t1.operator$index$1(list, 0);
  t1 = document.get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if (top$.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        t1 = top$.get$attributes();
        oldValue = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).substring$1(oldValue, 1);
        t1 = top$.get$attributes();
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "data-dart_temporary_attached", newValue);
        t1 = top$.get$attributes();
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "data-dart_temporary_attached");
        if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
          t1 = top$.get$attributes();
          $.getInterceptor$JSArray(t1).remove$1(t1, "data-dart_temporary_attached");
          top$.remove$0();
        }
        break;
      }
      t1 = top$.get$parent();
      t2 = document.get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return e;
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
Isolate.$finishClasses($$);
$$ = {};
$.List = {builtin$cls: 'List'};
$.Map = {builtin$cls: 'Map'};
$.TextTrack = {builtin$cls: 'TextTrack'};
$.Gamepad = {builtin$cls: 'Gamepad'};
$.TextTrackCue = {builtin$cls: 'TextTrackCue'};
$.Number = {builtin$cls: 'Number'};
$.PathSeg = {builtin$cls: 'PathSeg'};
$.ElementInstance = {builtin$cls: 'ElementInstance'};
$.Touch = {builtin$cls: 'Touch'};
$.num = {builtin$cls: 'num'};
$.MediaStream = {builtin$cls: 'MediaStream'};
$.DomMimeType = {builtin$cls: 'DomMimeType'};
$.DomPlugin = {builtin$cls: 'DomPlugin'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.Match = {builtin$cls: 'Match'};
$.ClientRect = {builtin$cls: 'ClientRect'};
$.Element = {builtin$cls: 'Element'};
$.String = {builtin$cls: 'String'};
$.SourceBuffer = {builtin$cls: 'SourceBuffer'};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar'};
$.Node = {builtin$cls: 'Node'};
$.Entry = {builtin$cls: 'Entry'};
$.EntrySync = {builtin$cls: 'EntrySync'};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.CssRule = {builtin$cls: 'CssRule'};
$.File = {builtin$cls: 'File'};
$.CssValue = {builtin$cls: 'CssValue'};
$.$int = {builtin$cls: '$int'};
$.StyleSheet = {builtin$cls: 'StyleSheet'};
$.Length = {builtin$cls: 'Length'};
$.Transform = {builtin$cls: 'Transform'};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT8 = Isolate.makeConstantList([]);
$.CONSTANT2 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CONSTANT8);
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
$.CONSTANT3 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT7 = new Isolate.$isolateProperties.Object();
$.CONSTANT6 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT5 = new Isolate.$isolateProperties.JSNumber();
$.KeyCode_WIN_KEY_FF_LINUX = 0;
$.KeyCode_ENTER = 13;
$.KeyCode_ALT = 18;
$.KeyCode_CAPS_LOCK = 20;
$.KeyCode_ESC = 27;
$.KeyCode_SPACE = 32;
$.KeyCode_PAGE_UP = 33;
$.KeyCode_PAGE_DOWN = 34;
$.KeyCode_CTRL = 17;
$.KeyCode_END = 35;
$.KeyCode_LEFT = 37;
$.KeyCode_HOME = 36;
$.KeyCode_UP = 38;
$.KeyCode_RIGHT = 39;
$.KeyCode_DOWN = 40;
$.KeyCode_INSERT = 45;
$.KeyCode_DELETE = 46;
$.KeyCode_ZERO = 48;
$.KeyCode_TWO = 50;
$.KeyCode_ONE = 49;
$.KeyCode_FIVE = 53;
$.KeyCode_SIX = 54;
$.KeyCode_FOUR = 52;
$.KeyCode_SEVEN = 55;
$.KeyCode_EIGHT = 56;
$.KeyCode_NINE = 57;
$.KeyCode_FF_SEMICOLON = 59;
$.KeyCode_THREE = 51;
$.KeyCode_FF_EQUALS = 61;
$.KeyCode_QUESTION_MARK = 63;
$.KeyCode_A = 65;
$._getTypeNameOf = null;
$.KeyCode_Z = 90;
$.KeyCode_META = 91;
$.KeyCode_NUM_ZERO = 96;
$.KeyCode_NUM_ONE = 97;
$.KeyCode_NUM_TWO = 98;
$.KeyCode_NUM_THREE = 99;
$.KeyCode_NUM_FOUR = 100;
$.KeyCode_NUM_FIVE = 101;
$.KeyCode_NUM_SIX = 102;
$.KeyCode_NUM_SEVEN = 103;
$.KeyCode_NUM_EIGHT = 104;
$.KeyCode_NUM_NINE = 105;
$.KeyCode_NUM_MULTIPLY = 106;
$.KeyCode_NUM_PLUS = 107;
$.KeyCode_NUM_MINUS = 109;
$.KeyCode_NUM_PERIOD = 110;
$.KeyCode_NUM_DIVISION = 111;
$.KeyCode_F1 = 112;
$.KeyCode_F2 = 113;
$.KeyCode_F3 = 114;
$.KeyCode_F4 = 115;
$.KeyCode_F5 = 116;
$.PhotoGalleryWidget__ORIGINAL_IMAGE_PADDING = 40;
$.KeyCode_F6 = 117;
$.KeyCode_F7 = 118;
$.KeyCode_F8 = 119;
$.KeyCode_F9 = 120;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT4;
$.KeyCode_F10 = 121;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.KeyCode_F12 = 123;
$.KeyCode_F11 = 122;
$.KeyCode_SEMICOLON = 186;
$.KeyCode_DASH = 189;
$.KeyCode_EQUALS = 187;
$.KeyCode_COMMA = 188;
$.KeyCode_PERIOD = 190;
$.KeyCode_SLASH = 191;
$.KeyCode_APOSTROPHE = 192;
$.KeyCode_TILDE = 192;
$.KeyCode_SINGLE_QUOTE = 222;
$.KeyCode_OPEN_SQUARE_BRACKET = 219;
$.KeyCode_BACKSLASH = 220;
$.KeyCode_CLOSE_SQUARE_BRACKET = 221;
$.KeyCode_WIN_KEY = 224;
$.KeyCode_MAC_FF_META = 224;
$.KeyCode_UNKNOWN = -1;
$.lazyPort = null;
$._SPAWNED_SIGNAL = "spawned";
$.JsonParser_INSIDE_ARRAY = 1;
$.JsonParser_INSIDE_OBJECT = 2;
$.JsonParser_AFTER_COLON = 3;
$.JsonParser_ALLOW_STRING_MASK = 8;
$.JsonParser_ALLOW_VALUE_MASK = 4;
$.JsonParser_ALLOW_VALUE = 0;
$.JsonParser_NO_VALUES = 12;
$.JsonParser_STRING_ONLY = 4;
$.JsonParser_NON_EMPTY = 16;
$.JsonParser_EMPTY = 0;
$.JsonParser_VALUE_READ_BITS = 28;
$.JsonParser_STATE_INITIAL = 0;
$.JsonParser_STATE_END = 28;
$.JsonParser_STATE_ARRAY_EMPTY = 1;
$.JsonParser_STATE_ARRAY_VALUE = 29;
$.JsonParser_STATE_ARRAY_COMMA = 17;
$.JsonParser_STATE_OBJECT_EMPTY = 6;
$.JsonParser_STATE_OBJECT_KEY = 30;
$.JsonParser_STATE_OBJECT_COLON = 19;
$.JsonParser_STATE_OBJECT_VALUE = 31;
$.JsonParser_STATE_OBJECT_COMMA = 22;
$.JsonParser_BACKSPACE = 8;
$._jsPortSync = null;
$._jsPortCreate = null;
$.JsonParser_NEWLINE = 10;
$.JsonParser_TAB = 9;
$._jsPortDebug = null;
$.JsonParser_CARRIAGE_RETURN = 13;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$.JsonParser_SPACE = 32;
$._jsPortConvert = null;
$.JsonParser_QUOTE = 34;
$._jsEnterJavaScriptScope = null;
$.JsonParser_FORM_FEED = 12;
$.JsonParser_PLUS = 43;
$.JsonParser_COMMA = 44;
$._jsGlobalize = null;
$.JsonParser_MINUS = 45;
$._jsInvalidate = null;
$.JsonParser_DECIMALPOINT = 46;
$._dartEnterDartScope = null;
$.JsonParser_SLASH = 47;
$._dartExitDartScope = null;
$.JsonParser_CHAR_0 = 48;
$.JsonParser_CHAR_9 = 57;
$.JsonParser_COLON = 58;
$.JsonParser_CHAR_E = 69;
$.JsonParser_LBRACKET = 91;
$.JsonParser_BACKSLASH = 92;
$.JsonParser_RBRACKET = 93;
$.JsonParser_CHAR_a = 97;
$.JsonParser_CHAR_b = 98;
$.JsonParser_CHAR_e = 101;
$.JsonParser_CHAR_f = 102;
$.JsonParser_CHAR_l = 108;
$.JsonParser_CHAR_n = 110;
$._localNextElementId = 0;
$.JsonParser_CHAR_r = 114;
$._DART_ID = "data-dart_id";
$.JsonParser_CHAR_s = 115;
$._DART_TEMPORARY_ATTACHED = "data-dart_temporary_attached";
$.JsonParser_CHAR_t = 116;
$.JsonParser_CHAR_u = 117;
$.JsonParser_LBRACE = 123;
$.JsonParser_RBRACE = 125;
$._jsExitJavaScriptScope = null;
$.ReceivePortImpl__nextFreeId = 1;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.JSInvocationMirror_SETTER = 2;
$._FutureImpl__INCOMPLETE = 0;
$._FutureImpl__VALUE = 1;
$._FutureImpl__ERROR = 2;
$._FutureImpl__UNHANDLED_ERROR = 4;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, '_keyIdentifier', 'KeyboardEventController__keyIdentifier', 'get$KeyboardEventController__keyIdentifier', function() {
  return $.makeLiteralMap(["Up", 38, "Down", 40, "Left", 37, "Right", 39, "Enter", 13, "F1", 112, "F2", 113, "F3", 114, "F4", 115, "F5", 116, "F6", 117, "F7", 118, "F8", 119, "F9", 120, "F10", 121, "F11", 122, "F12", 123, "U+007F", 46, "Home", 36, "End", 35, "PageUp", 33, "PageDown", 34, "Insert", 45]);
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, 'globalThis', 'globalThis', 'get$globalThis', function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, 'thisScript', 'IsolateNatives_thisScript', 'get$IsolateNatives_thisScript', function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, 'globalWindow', 'globalWindow', 'get$globalWindow', function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, '_proxiedObjectTable', '_proxiedObjectTable', 'get$_proxiedObjectTable', function() {
  return $._ProxiedObjectTable$();
});
Isolate.$lazy($, '_IMAGE_IDX_REGEXP', 'PhotoGalleryWidget__IMAGE_IDX_REGEXP', 'get$PhotoGalleryWidget__IMAGE_IDX_REGEXP', function() {
  return $.RegExp_RegExp("images/(\\d+)_original\\.jpg", true, false);
});
Isolate.$lazy($, 'globalPostMessageDefined', 'globalPostMessageDefined', 'get$globalPostMessageDefined', function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, 'globalWorker', 'globalWorker', 'get$globalWorker', function() {
  return $.get$globalThis().Worker;
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  is$JavaScriptIndexingBehavior: function() {
    return false;
  },
  is$Collection: function() {
    return false;
  },
  is$List: function() {
    return false;
  },
  is$Map: function() {
    return false;
  },
  is$ArrayBuffer: function() {
    return false;
  },
  is$ArrayBufferView: function() {
    return false;
  },
  is$Blob: function() {
    return false;
  },
  is$Element: function() {
    return false;
  },
  is$File: function() {
    return false;
  },
  is$FileList: function() {
    return false;
  },
  is$ImageData: function() {
    return false;
  },
  is$ImageElement: function() {
    return false;
  },
  is$TextInputElement: function() {
    return false;
  },
  is$CheckboxInputElement: function() {
    return false;
  },
  is$Location: function() {
    return false;
  },
  is$Node: function() {
    return false;
  },
  is$TextAreaElement: function() {
    return false;
  },
  is$KeyRange: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("AbstractWorker", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.AbstractWorkerEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "hash=,target>,type=",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {"": "status>",
  get$on: function() {
    return $.ApplicationCacheEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "hash>,target>"});

$.$defineNativeClass("ArrayBuffer", {
  is$ArrayBuffer: function() {
    return true;
  }
});

$.$defineNativeClass("ArrayBufferView", {
  is$ArrayBufferView: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLBaseElement", {"": "target>"});

$.$defineNativeClass("BatteryManager", {
  get$on: function() {
    return $.BatteryManagerEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Blob", {"": "type>",
  is$Blob: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$on: function() {
    return $.BodyElementEvents$(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "disabled<,type=,value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height<,width="});

$.$defineNativeClass("CharacterData", {"": "length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("ClientRect", {"": "width>"});

$.$defineNativeClass("CSSFontFaceRule", {"": "style>"});

$.$defineNativeClass("WebKitCSSKeyframeRule", {"": "style>"});

$.$defineNativeClass("WebKitCSSMatrix", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("CSSPageRule", {"": "style>"});

$.$defineNativeClass("CSSRule", {"": "type>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  set$left: function(value) {
    this.setProperty$3("left", value, "");
  },
  get$resize: function() {
    return this.getPropertyValue$1("resize");
  },
  get$src: function() {
    return this.getPropertyValue$1("src");
  },
  set$src: function(value) {
    this.setProperty$3("src", value, "");
  },
  set$top: function(value) {
    this.setProperty$3("top", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("CSSStyleRule", {"": "style>"});

$.$defineNativeClass("CustomEvent", {"": "detail>",
  $$dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
    return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
  }
});

$.$defineNativeClass("DataTransferItem", {"": "type>"});

$.$defineNativeClass("DataTransferItemList", {"": "length>",
  add$2: function(data_OR_file, type) {
    return this.add(data_OR_file,type);
  },
  add$1: function(data_OR_file) {
    return this.add(data_OR_file);
  },
  clear$0: function() {
    return this.clear();
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  get$on: function() {
    return $.DedicatedWorkerContextEvents$(this);
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  }
});

$.$defineNativeClass("HTMLDetailsElement", {
  open$2: function(arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~,documentElement>",
  get$on: function() {
    return $.DocumentEvents$(this);
  },
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_createEvent$1: function(eventType) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_createEvent$1")) {
      return this.createEvent(eventType);
    } else
      return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_getElementsByName$1: function(elementName) {
    return this.getElementsByName(elementName);
  },
  $$dom_getElementsByTagName$1: function(tagname) {
    return this.getElementsByTagName(tagname);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT1.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    var mutableMatches, len, copyOfMatches, t1, i;
    if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(1, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(3, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  queryAll$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        mutableMatches = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        mutableMatches = env0;
        break;
      case 3:
        mutableMatches = env0;
        break;
      case 4:
        len = env2;
        t2 = env1;
        mutableMatches = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var mutableMatches, t2, len, copyOfMatches, i, t1;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true)
          switch (state0) {
            case 0:
              mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT1.substring$2(selectors, 7, selectors.length - 2));
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
              len = t2.get$length(mutableMatches);
            case 2:
              state0 = 0;
              copyOfMatches = $.List_List$fixedLength(len, null);
              for (i = 0; $.ltB(i, len); ++i) {
                t1 = t2.operator$index$1(mutableMatches, i);
                if (i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t1;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true)
                switch (state0) {
                  case 0:
                    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                  case 3:
                    state0 = 0;
                    t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
                    len = t2.get$length(mutableMatches);
                  case 4:
                    state0 = 0;
                    copyOfMatches = $.List_List$fixedLength(len, null);
                    for (i = 0; $.ltB(i, len); ++i) {
                      t1 = t2.operator$index$1(mutableMatches, i);
                      if (i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t1;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
          }
    }
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, e, nodes;
      t1 = this.get$nodes();
      $.getInterceptor$JSArray(t1).clear$0(t1);
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes());
      t1 = this.get$nodes();
      $.getInterceptor$JSArray(t1).addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  },
  get$hidden: function() {
    return false;
  },
  get$id: function() {
    return "";
  },
  get$parent: function() {
    return;
  },
  get$attributes: function() {
    return $.CONSTANT2;
  },
  get$classes: function() {
    return $._FrozenCssClassSet$();
  },
  get$dataAttributes: function() {
    return $.CONSTANT2;
  },
  get$style: function() {
    return $.Element_Element$tag("div").get$style();
  },
  click$0: function() {
  },
  get$click: function() {
    return new $.BoundClosure0(this, "click$0");
  },
  set$hidden: function(value) {
    throw $.$$throw($.UnsupportedError$("Hidden can't be set for document fragments."));
  },
  set$id: function(value) {
    throw $.$$throw($.UnsupportedError$("ID can't be set for document fragments."));
  },
  get$on: function() {
    return $.ElementEvents$(this);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("MimeType", {"": "type>"});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Plugin", {"": "length>"});

$.$defineNativeClass("PluginArray", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Selection", {"": "type>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {"": "value="});

$.$defineNativeClass("DOMStringList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  contains$1: function(string) {
    return this.contains(string);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("DOMTokenList", {"": "length>",
  contains$1: function(token) {
    return this.contains(token);
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children~,hidden=,id=,innerHtml:innerHTML|,$$dom_className:className},$$dom_firstElementChild:firstElementChild~,$$dom_lastElementChild:lastElementChild~,offsetHeight>,offsetWidth>,scrollLeft>,style>",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  set$children: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$children")) {
      var copy, children, t1;
      copy = $.List_List$from(value);
      children = this.get$children();
      t1 = $.getInterceptor$JSArray(children);
      t1.clear$0(children);
      t1.addAll$1(children, copy);
    } else
      return Object.prototype.set$children.call(this, value);
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  get$classes: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$classes")) {
      return $._ElementCssClassSet$(this);
    } else
      return Object.prototype.get$classes.call(this);
  },
  get$dataAttributes: function() {
    return $._DataAttributeMap$(this.get$attributes());
  },
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.ElementEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  click$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("click$0")) {
      return this.click();
    } else
      return Object.prototype.click$0.call(this);
  },
  get$click: function() {
    return new $.BoundClosure0(this, "click$0");
  },
  $$dom_getAttribute$1: function(name$) {
    return this.getAttribute(name$);
  },
  $$dom_hasAttribute$1: function(name$) {
    return this.hasAttribute(name$);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  $$dom_removeAttribute$1: function(name$) {
    return this.removeAttribute(name$);
  },
  $$dom_setAttribute$2: function(name$, value) {
    return this.setAttribute(name$,value);
  },
  is$Element: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height<,src=,type=,width="});

$.$defineNativeClass("Entry", {
  remove$2: function(successCallback, errorCallback) {
    return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$1: function(successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 0);
    return this.remove(successCallback);
  }
});

$.$defineNativeClass("EntrySync", {
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("Event", {"": "type>",
  get$target: function() {
    return $._convertNativeToDart_EventTarget(this.target);
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventSource", {
  get$on: function() {
    return $.EventSourceEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_dispatchEvent$1")) {
      return this.dispatchEvent(event$);
    } else
      return Object.prototype.$$dom_dispatchEvent$1.call(this, event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "disabled<,type>"});

$.$defineNativeClass("File", {
  is$File: function() {
    return true;
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$FileList: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("FileReader", {"": "error>,result>",
  get$on: function() {
    return $.FileReaderEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("FileWriter", {"": "error>,length>",
  get$on: function() {
    return $.FileWriterEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("FileWriterSync", {"": "length>"});

$.$defineNativeClass("Float32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>,target>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("Gamepad", {"": "id>"});

$.$defineNativeClass("History", {"": "length>"});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  }
});

$.$defineNativeClass("XMLHttpRequest", {"": "status>",
  get$on: function() {
    return $.HttpRequestEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  open$5: function(method, url, async, user, password) {
    return this.open(method,url,async,user,password);
  },
  open$2: function(method, url) {
    return this.open(method, url);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestUpload", {
  get$on: function() {
    return $.HttpRequestUploadEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height<,src=,width="});

$.$defineNativeClass("ImageData", {"": "width>",
  is$ImageData: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height=,src=,width=",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  },
  is$ImageElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "checked>,disabled<,height<,pattern>,src=,type=,value=,width=",
  get$on: function() {
    return $.InputElementEvents$(this);
  },
  is$Element: function() {
    return true;
  },
  is$Node: function() {
    return true;
  },
  is$CheckboxInputElement: function() {
    return true;
  },
  is$TextInputElement: function() {
    return true;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("JavaScriptCallFrame", {"": "type>"});

$.$defineNativeClass("KeyboardEvent", {"": "altKey>,ctrlKey>,keyLocation>,metaKey>,shiftKey>",
  get$keyCode: function() {
    return this.get$$$dom_keyCode();
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "disabled<,type>"});

$.$defineNativeClass("HTMLLIElement", {"": "type=,value="});

$.$defineNativeClass("HTMLLinkElement", {"": "disabled<,type="});

$.$defineNativeClass("Location", {"": "hash=",
  toString$0: function() {
    return this.toString();
  },
  is$Location: function() {
    return true;
  }
});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error>,src=",
  get$on: function() {
    return $.MediaElementEvents$(this);
  },
  load$0: function() {
    return this.load();
  },
  get$load: function() {
    return new $.BoundClosure0(this, "load$0");
  }
});

$.$defineNativeClass("MediaList", {"": "length>"});

$.$defineNativeClass("MediaSource", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {"": "id>",
  get$on: function() {
    return $.MediaStreamEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamTrack", {"": "id>",
  get$on: function() {
    return $.MediaStreamTrackEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MessageEvent", {"": "ports>",
  get$source: function() {
    return $._convertNativeToDart_Window(this.source);
  }
});

$.$defineNativeClass("MessagePort", {
  get$on: function() {
    return $.MessagePortEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MouseEvent", {"": "altKey>,ctrlKey>,metaKey>,shiftKey>"});

$.$defineNativeClass("MutationRecord", {"": "target>,type>"});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,parent:parentElement~,text:textContent|",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  replaceWith$1: function(otherNode) {
    var parent$, exception;
    try {
      parent$ = this.parentNode;
      parent$.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  contains$1: function(other) {
    return this.contains(other);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Notification", {
  get$on: function() {
    return $.NotificationEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type="});

$.$defineNativeClass("HTMLObjectElement", {"": "height<,type=,width="});

$.$defineNativeClass("HTMLOptGroupElement", {"": "disabled<"});

$.$defineNativeClass("HTMLOptionElement", {"": "disabled<,value="});

$.$defineNativeClass("HTMLOutputElement", {"": "type>,value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("PerformanceNavigation", {"": "type>"});

$.$defineNativeClass("ProcessingInstruction", {"": "target>"});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("Range", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RTCDataChannel", {
  get$on: function() {
    return $.RtcDataChannelEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  }
});

$.$defineNativeClass("RTCPeerConnection", {
  get$on: function() {
    return $.RtcPeerConnectionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {"": "type="});

$.$defineNativeClass("RTCStatsResponse", {
  result$0: function() {
    return this.result();
  },
  get$result: function() {
    return new $.BoundClosure0(this, "result$0");
  }
});

$.$defineNativeClass("Screen", {"": "width>"});

$.$defineNativeClass("HTMLScriptElement", {"": "src=,type="});

$.$defineNativeClass("ScriptProfileNode", {
  children$0: function() {
    return this.children();
  },
  get$children: function() {
    return new $.BoundClosure0(this, "children$0");
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "disabled<,length=,type>,value="});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML|"});

$.$defineNativeClass("SharedWorkerContext", {
  get$on: function() {
    return $.SharedWorkerContextEvents$(this);
  }
});

$.$defineNativeClass("SourceBufferList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "src=,type="});

$.$defineNativeClass("SpeechGrammar", {"": "src="});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  get$on: function() {
    return $.SpeechRecognitionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("SpeechRecognitionEvent", {"": "result>"});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length>"});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  operator$index$1: function(key) {
    return this.$$dom_getItem$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.operator$index$1(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.operator$index$1(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  is$Map: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>"});

$.$defineNativeClass("HTMLStyleElement", {"": "disabled<,type="});

$.$defineNativeClass("StyleMedia", {"": "type>"});

$.$defineNativeClass("StyleSheet", {"": "disabled<,type>"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "disabled<,type>,value=",
  is$TextAreaElement: function() {
    return true;
  }
});

$.$defineNativeClass("TextMetrics", {"": "width>"});

$.$defineNativeClass("TextTrack", {
  get$on: function() {
    return $.TextTrackEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "id=,text<",
  get$on: function() {
    return $.TextTrackCueEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
});

$.$defineNativeClass("TextTrackList", {
  get$on: function() {
    return $.TextTrackListEvents$(this);
  },
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length>"});

$.$defineNativeClass("Touch", {
  get$target: function() {
    return $._convertNativeToDart_EventTarget(this.target);
  }
});

$.$defineNativeClass("TouchEvent", {"": "altKey>,ctrlKey>,metaKey>,shiftKey>"});

$.$defineNativeClass("TouchList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTrackElement", {"": "src="});

$.$defineNativeClass("WebKitTransitionEvent", {
  propertyName$0: function() {
    return this.propertyName.call$0();
  }
});

$.$defineNativeClass("UIEvent", {"": "detail>,$$dom_keyCode:keyCode~"});

$.$defineNativeClass("Uint16Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  operator$index$1: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$index$1")) {
      return this[index];
    } else
      return Object.prototype.operator$index$1.call(this, index);
  },
  operator$indexSet$2: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$indexSet$2")) {
      this[index] = value;
    } else
      return Object.prototype.operator$indexSet$2.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  contains$1: function(element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, element);
    } else
      return Object.prototype.contains$1.call(this, element);
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  join$1: function(separator) {
    if (Object.getPrototypeOf(this).hasOwnProperty("join$1")) {
      return $.IterableMixinWorkaround_joinList(this, separator);
    } else
      return Object.prototype.join$1.call(this, separator);
  },
  mappedBy$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("mappedBy$1")) {
      return $.MappedList$(this, f);
    } else
      return Object.prototype.mappedBy$1.call(this, f);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f);
    } else
      return Object.prototype.where$1.call(this, f);
  },
  any$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("any$1")) {
      return $.IterableMixinWorkaround_any(this, f);
    } else
      return Object.prototype.any$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      return $.List_List$from(this);
    } else
      return Object.prototype.toList$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  addAll$1: function(iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, iterable);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      var t1 = $.getInterceptor$JSStringJSArray(this);
      if ($.gtB(t1.get$length(this), 0)) {
        t1 = t1.get$length(this);
        return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
      }
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  removeAt$1: function(pos) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAt$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAt$1.call(this, pos);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height<,width="});

$.$defineNativeClass("WebGLActiveInfo", {"": "type>"});

$.$defineNativeClass("WebKitNamedFlow", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(event$) {
    return this.dispatchEvent(event$);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {
  get$on: function() {
    return $.WebSocketEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$2: function(code, reason) {
    return this.close(code,reason);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  }
});

$.$defineNativeClass("DOMWindow", {"": "innerHeight>,navigator>,scrollY>,status>",
  get$document: function() {
    return this.document;
  },
  open$3: function(url, name$, options) {
    if (options == null)
      return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
    else
      return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
  },
  open$2: function(url, name$) {
    return this.open$3(url, name$, null);
  },
  get$location: function() {
    var result = this.get$_location();
    if ($.Window__isDartLocation(result) === true)
      return result;
    if (null == this._location_wrapper)
      this._location_wrapper = $._LocationWrapper$(result);
    return this._location_wrapper;
  },
  get$_location: function() {
    return this.location;
  },
  lookupPort$1: function(name$) {
    var t1, t2, port;
    t1 = this.get$document().get$documentElement().get$attributes();
    t2 = "dart-port:" + name$;
    port = $.parse($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2), null);
    return $._JsDeserializer$().deserialize$1(port);
  },
  registerPort$2: function(name$, port) {
    var serialized, t1, t2, t3;
    serialized = $._JsSerializer$().traverse$1(port);
    t1 = this.get$document().get$documentElement().get$attributes();
    t2 = "dart-port:" + name$;
    t3 = $._JsonStringifier_stringify(serialized);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, t3);
  },
  get$on: function() {
    return $.WindowEvents$(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  _postMessage_1$2: function(message, targetOrigin) {
    return this.postMessage(message,targetOrigin);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  scroll$2: function(x, y) {
    return this.scroll(x,y);
  },
  get$scroll: function() {
    return new $.BoundClosure1(this, "scroll$2");
  },
  scrollTo$2: function(x, y) {
    return this.scrollTo(x,y);
  },
  setTimeout$2: function(handler, timeout) {
    return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
  }
});

$.$defineNativeClass("Worker", {
  get$on: function() {
    return $.WorkerEvents$(this);
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  },
  terminate$0: function() {
    return this.terminate();
  }
});

$.$defineNativeClass("WorkerContext", {"": "location>,navigator>",
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.WorkerContextEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  setTimeout$2: function(handler, timeout) {
    return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
  }
});

$.$defineNativeClass("WorkerLocation", {"": "hash>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("WorkerNavigator", {"": "userAgent>"});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XSLTProcessor", {
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFrameSetElement", {
  get$on: function() {
    return $._FrameSetElementEvents$(this);
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("MediaStreamList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("IDBCursor", {"": "key>,source>"});

$.$defineNativeClass("IDBCursorWithValue", {"": "value>"});

$.$defineNativeClass("IDBDatabase", {
  get$on: function() {
    return $.DatabaseEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBFactory", {
  open$2: function(name$, version) {
    return this.open(name$,version);
  }
});

$.$defineNativeClass("IDBIndex", {
  get$1: function(key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    t1 = !t1;
    if (typeof key === "object" && key !== null && key.is$KeyRange() || key == null)
      return this._get_1$1(key);
    if (t1)
      return this._get_2$1(key);
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  _get_1$1: function(key) {
    return this.get(key);
  },
  _get_2$1: function(key) {
    return this.get(key);
  }
});

$.$defineNativeClass("IDBKeyRange", {
  is$KeyRange: function() {
    return true;
  }
});

$.$defineNativeClass("IDBObjectStore", {
  add$2: function(value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
    return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
  },
  add$1: function(value) {
    return this.add$2(value, $);
  },
  _add_1$2: function(value, key) {
    return this.add(value,key);
  },
  _add_2$1: function(value) {
    return this.add(value);
  },
  clear$0: function() {
    return this.clear();
  }
});

$.$defineNativeClass("IDBOpenDBRequest", {
  get$on: function() {
    return $.OpenDBRequestEvents$(this);
  }
});

$.$defineNativeClass("IDBRequest", {"": "error>,source>",
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.RequestEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  get$result: function() {
    return $._convertNativeToDart_IDBAny(this.result);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBTransaction", {"": "error>",
  get$on: function() {
    return $.TransactionEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("IDBVersionChangeRequest", {
  get$on: function() {
    return $.VersionChangeRequestEvents$(this);
  }
});

$.$defineNativeClass("SVGAElement", {"": "target>"});

$.$defineNativeClass("SVGAngle", {"": "value="});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type>"});

$.$defineNativeClass("SVGElementInstance", {
  get$on: function() {
    return $.ElementInstanceEvents$(this);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type>,result>,width>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEImageElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFETileElement", {"": "result>,width>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type>,result>,width>"});

$.$defineNativeClass("SVGFilterElement", {"": "width>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "width>"});

$.$defineNativeClass("SVGImageElement", {"": "width>"});

$.$defineNativeClass("SVGLength", {"": "value="});

$.$defineNativeClass("SVGLengthList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGMaskElement", {"": "width>"});

$.$defineNativeClass("SVGNumber", {"": "value="});

$.$defineNativeClass("SVGNumberList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSegList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPatternElement", {"": "width>"});

$.$defineNativeClass("SVGPointList", {
  clear$0: function() {
    return this.clear();
  }
});

$.$defineNativeClass("SVGRect", {"": "height<,width="});

$.$defineNativeClass("SVGRectElement", {"": "width>"});

$.$defineNativeClass("SVGScriptElement", {"": "type="});

$.$defineNativeClass("SVGStringList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "disabled<,type="});

$.$defineNativeClass("SVGDocument", {
  $$dom_createEvent$1: function(eventType) {
    return this.createEvent(eventType);
  }
});

$.$defineNativeClass("SVGElement", {
  get$classes: function() {
    if (this._cssClassSet == null)
      this._cssClassSet = $._AttributeClassSet$(this);
    return this._cssClassSet;
  },
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children, t1;
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, value);
  },
  set$innerHtml: function(svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = container.get$children();
    this.set$children($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  click$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot invoke click SVG."));
  },
  get$click: function() {
    return new $.BoundClosure0(this, "click$0");
  },
  get$id: function() {
    return this.id;
  },
  set$id: function(value) {
    this.id = value;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "width>"});

$.$defineNativeClass("SVGTransform", {"": "type>"});

$.$defineNativeClass("SVGTransformList", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
});

$.$defineNativeClass("SVGUseElement", {"": "width>"});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  any$1: function(f) {
    return $.IterableMixinWorkaround_any(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("AudioBuffer", {"": "length>"});

$.$defineNativeClass("AudioContext", {"": "listener>",
  get$on: function() {
    return $.AudioContextEvents$(this);
  }
});

$.$defineNativeClass("AudioParam", {"": "value="});

$.$defineNativeClass("BiquadFilterNode", {"": "type="});

$.$defineNativeClass("OscillatorNode", {"": "type="});

// 229 dynamic classes.
// 379 classes
// 36 !leaf
(function() {
  var v0_MouseEvent = "MouseEvent|WheelEvent", v1_Uint8Array = "Uint8Array|Uint8ClampedArray", v2_ComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v3_MediaElement = "HTMLMediaElement|HTMLAudioElement|HTMLVideoElement", v4_SvgElement = [v2_ComponentTransferFunctionElement, "SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v5_UIEvent = [v0_MouseEvent, "UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent"].join("|"), v6_Element = [v3_MediaElement, v4_SvgElement, "Element|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement"].join("|"), v7_CharacterData = "CharacterData|Text|CDATASection|Comment", v8_Document = "Document|HTMLDocument|SVGDocument", v9_DocumentFragment = "DocumentFragment|ShadowRoot", v10_Node = [v6_Element, v7_CharacterData, v8_Document, v9_DocumentFragment, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|"), v11_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v12_WorkerContext = "WorkerContext|DedicatedWorkerContext|SharedWorkerContext", v13_MediaStream = "MediaStream|LocalMediaStream", v14_Request = "IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest", v15_AudioContext = "AudioContext|OfflineAudioContext";
  $.dynamicSetMetadata([["StyleSheet", "StyleSheet|CSSStyleSheet"], ["MouseEvent", v0_MouseEvent], ["UIEvent", v5_UIEvent], ["Uint8Array", v1_Uint8Array], ["WorkerContext", v12_WorkerContext], ["CSSValueList", "CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSMixFunctionValue"], ["IDBCursor", "IDBCursor|IDBCursorWithValue"], ["IDBRequest", v14_Request], ["AbstractWorker", v11_AbstractWorker], ["ArrayBufferView", [v1_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["SVGComponentTransferFunctionElement", v2_ComponentTransferFunctionElement], ["Blob", "Blob|File"], ["CharacterData", v7_CharacterData], ["CSSRule", "CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule"], ["Document", v8_Document], ["DocumentFragment", v9_DocumentFragment], ["DOMTokenList", "DOMTokenList|DOMSettableTokenList"], ["HTMLMediaElement", v3_MediaElement], ["SVGElement", v4_SvgElement], ["Element", v6_Element], ["Entry", "Entry|DirectoryEntry|FileEntry"], ["EntrySync", "EntrySync|DirectoryEntrySync|FileEntrySync"], ["Event", [v5_UIEvent, "Event|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent"].join("|")], ["Node", v10_Node], ["MediaStream", v13_MediaStream], ["AudioContext", v15_AudioContext], ["EventTarget", [v10_Node, v11_AbstractWorker, v12_WorkerContext, v13_MediaStream, v14_Request, v15_AudioContext, "EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|DOMWindow|IDBDatabase|IDBTransaction|SVGElementInstance"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["AudioParam", "AudioParam|AudioGain"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=main.dart.js.map